%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 12 0 R /F4 136 0 R /F5 137 0 R /F6 149 0 R 
  /F7 152 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/Contents 235 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
5 0 obj
<<
/Contents 236 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
6 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 40.01575 754.0394 248.9357 766.0394 ] /Subtype /Link /Type /Annot
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 754.7894 555.2598 766.7894 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 60.01575 736.0394 143.3757 748.0394 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 549.6998 736.7894 555.2598 748.7894 ] /Subtype /Link /Type /Annot
>>
endobj
10 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Rect [ 80.01575 718.0394 141.6757 730.0394 ] /Subtype /Link /Type /Annot
>>
endobj
11 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Rect [ 549.6998 718.7894 555.2598 730.7894 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
13 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 80.01575 700.0394 156.7257 712.0394 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 549.6998 700.7894 555.2598 712.7894 ] /Subtype /Link /Type /Annot
>>
endobj
15 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 140 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 682.0394 158.9457 694.0394 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 140 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 682.7894 555.2598 694.7894 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 627.0394 0 ] /Rect [ 80.01575 664.0394 183.9457 676.0394 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 627.0394 0 ] /Rect [ 549.6998 664.7894 555.2598 676.7894 ] /Subtype /Link /Type /Annot
>>
endobj
19 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 540.2394 0 ] /Rect [ 60.01575 646.0394 141.7157 658.0394 ] /Subtype /Link /Type /Annot
>>
endobj
20 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 540.2394 0 ] /Rect [ 549.6998 646.7894 555.2598 658.7894 ] /Subtype /Link /Type /Annot
>>
endobj
21 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 403.0394 0 ] /Rect [ 80.01575 628.0394 153.3757 640.0394 ] /Subtype /Link /Type /Annot
>>
endobj
22 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 403.0394 0 ] /Rect [ 549.6998 628.7894 555.2598 640.7894 ] /Subtype /Link /Type /Annot
>>
endobj
23 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Rect [ 80.01575 610.0394 182.2857 622.0394 ] /Subtype /Link /Type /Annot
>>
endobj
24 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Rect [ 549.6998 610.7894 555.2598 622.7894 ] /Subtype /Link /Type /Annot
>>
endobj
25 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 80.01575 592.0394 187.2657 604.0394 ] /Subtype /Link /Type /Annot
>>
endobj
26 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 549.6998 592.7894 555.2598 604.7894 ] /Subtype /Link /Type /Annot
>>
endobj
27 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /Rect [ 80.01575 574.0394 193.3957 586.0394 ] /Subtype /Link /Type /Annot
>>
endobj
28 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /Rect [ 549.6998 574.7894 555.2598 586.7894 ] /Subtype /Link /Type /Annot
>>
endobj
29 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Rect [ 100.0157 556.0394 184.4857 568.0394 ] /Subtype /Link /Type /Annot
>>
endobj
30 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Rect [ 549.6998 556.7894 555.2598 568.7894 ] /Subtype /Link /Type /Annot
>>
endobj
31 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Rect [ 100.0157 538.0394 191.1657 550.0394 ] /Subtype /Link /Type /Annot
>>
endobj
32 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Rect [ 549.6998 538.7894 555.2598 550.7894 ] /Subtype /Link /Type /Annot
>>
endobj
33 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Rect [ 100.0157 520.0394 192.2657 532.0394 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Rect [ 544.1398 520.7894 555.2598 532.7894 ] /Subtype /Link /Type /Annot
>>
endobj
35 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 100.0157 502.0394 188.9357 514.0394 ] /Subtype /Link /Type /Annot
>>
endobj
36 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 544.1398 502.7894 555.2598 514.7894 ] /Subtype /Link /Type /Annot
>>
endobj
37 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Rect [ 100.0157 484.0394 190.0357 496.0394 ] /Subtype /Link /Type /Annot
>>
endobj
38 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Rect [ 544.1398 484.7894 555.2598 496.7894 ] /Subtype /Link /Type /Annot
>>
endobj
39 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Rect [ 100.0157 466.0394 191.1557 478.0394 ] /Subtype /Link /Type /Annot
>>
endobj
40 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Rect [ 544.1398 466.7894 555.2598 478.7894 ] /Subtype /Link /Type /Annot
>>
endobj
41 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 448.0394 158.3757 460.0394 ] /Subtype /Link /Type /Annot
>>
endobj
42 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 448.7894 555.2598 460.7894 ] /Subtype /Link /Type /Annot
>>
endobj
43 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Rect [ 100.0157 430.0394 133.9157 442.0394 ] /Subtype /Link /Type /Annot
>>
endobj
44 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Rect [ 544.1398 430.7894 555.2598 442.7894 ] /Subtype /Link /Type /Annot
>>
endobj
45 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Rect [ 100.0157 412.0394 121.6857 424.0394 ] /Subtype /Link /Type /Annot
>>
endobj
46 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Rect [ 544.1398 412.7894 555.2598 424.7894 ] /Subtype /Link /Type /Annot
>>
endobj
47 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Rect [ 100.0157 394.0394 126.6857 406.0394 ] /Subtype /Link /Type /Annot
>>
endobj
48 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Rect [ 544.1398 394.7894 555.2598 406.7894 ] /Subtype /Link /Type /Annot
>>
endobj
49 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Rect [ 100.0157 376.0394 125.5757 388.0394 ] /Subtype /Link /Type /Annot
>>
endobj
50 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Rect [ 544.1398 376.7894 555.2598 388.7894 ] /Subtype /Link /Type /Annot
>>
endobj
51 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 60.01575 358.0394 141.7157 370.0394 ] /Subtype /Link /Type /Annot
>>
endobj
52 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 544.1398 358.7894 555.2598 370.7894 ] /Subtype /Link /Type /Annot
>>
endobj
53 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 267.4394 0 ] /Rect [ 80.01575 340.0394 144.4857 352.0394 ] /Subtype /Link /Type /Annot
>>
endobj
54 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 267.4394 0 ] /Rect [ 544.1398 340.7894 555.2598 352.7894 ] /Subtype /Link /Type /Annot
>>
endobj
55 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 192.6394 0 ] /Rect [ 100.0157 322.0394 210.0557 334.0394 ] /Subtype /Link /Type /Annot
>>
endobj
56 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 192.6394 0 ] /Rect [ 544.1398 322.7894 555.2598 334.7894 ] /Subtype /Link /Type /Annot
>>
endobj
57 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 304.0394 195.5957 316.0394 ] /Subtype /Link /Type /Annot
>>
endobj
58 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 304.7894 555.2598 316.7894 ] /Subtype /Link /Type /Annot
>>
endobj
59 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Rect [ 100.0157 286.0394 193.3757 298.0394 ] /Subtype /Link /Type /Annot
>>
endobj
60 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Rect [ 544.1398 286.7894 555.2598 298.7894 ] /Subtype /Link /Type /Annot
>>
endobj
61 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Rect [ 80.01575 268.0394 183.9557 280.0394 ] /Subtype /Link /Type /Annot
>>
endobj
62 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Rect [ 544.1398 268.7894 555.2598 280.7894 ] /Subtype /Link /Type /Annot
>>
endobj
63 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 80.01575 250.0394 172.8357 262.0394 ] /Subtype /Link /Type /Annot
>>
endobj
64 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 544.1398 250.7894 555.2598 262.7894 ] /Subtype /Link /Type /Annot
>>
endobj
65 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Rect [ 80.01575 232.0394 163.3657 244.0394 ] /Subtype /Link /Type /Annot
>>
endobj
66 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Rect [ 544.1398 232.7894 555.2598 244.7894 ] /Subtype /Link /Type /Annot
>>
endobj
67 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Rect [ 80.01575 214.0394 142.2657 226.0394 ] /Subtype /Link /Type /Annot
>>
endobj
68 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Rect [ 544.1398 214.7894 555.2598 226.7894 ] /Subtype /Link /Type /Annot
>>
endobj
69 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 60.01575 196.0394 140.6057 208.0394 ] /Subtype /Link /Type /Annot
>>
endobj
70 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 196.7894 555.2598 208.7894 ] /Subtype /Link /Type /Annot
>>
endobj
71 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /Rect [ 80.01575 178.0394 142.2657 190.0394 ] /Subtype /Link /Type /Annot
>>
endobj
72 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /Rect [ 544.1398 178.7894 555.2598 190.7894 ] /Subtype /Link /Type /Annot
>>
endobj
73 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Rect [ 100.0157 160.0394 116.1257 172.0394 ] /Subtype /Link /Type /Annot
>>
endobj
74 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Rect [ 544.1398 160.7894 555.2598 172.7894 ] /Subtype /Link /Type /Annot
>>
endobj
75 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Rect [ 100.0157 142.0394 136.1457 154.0394 ] /Subtype /Link /Type /Annot
>>
endobj
76 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Rect [ 544.1398 142.7894 555.2598 154.7894 ] /Subtype /Link /Type /Annot
>>
endobj
77 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 124.0394 143.3657 136.0394 ] /Subtype /Link /Type /Annot
>>
endobj
78 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 124.7894 555.2598 136.7894 ] /Subtype /Link /Type /Annot
>>
endobj
79 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Rect [ 100.0157 106.0394 124.4657 118.0394 ] /Subtype /Link /Type /Annot
>>
endobj
80 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Rect [ 544.1398 106.7894 555.2598 118.7894 ] /Subtype /Link /Type /Annot
>>
endobj
81 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Rect [ 100.0157 88.03937 135.5757 100.0394 ] /Subtype /Link /Type /Annot
>>
endobj
82 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Rect [ 544.1398 88.78937 555.2598 100.7894 ] /Subtype /Link /Type /Annot
>>
endobj
83 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Rect [ 100.0157 70.03937 120.5757 82.03937 ] /Subtype /Link /Type /Annot
>>
endobj
84 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Rect [ 544.1398 70.78937 555.2598 82.78937 ] /Subtype /Link /Type /Annot
>>
endobj
85 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /Rect [ 80.01575 52.03937 113.9057 64.03937 ] /Subtype /Link /Type /Annot
>>
endobj
86 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /Rect [ 544.1398 52.78937 555.2598 64.78937 ] /Subtype /Link /Type /Annot
>>
endobj
87 0 obj
<<
/Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 13 0 R 14 0 R 15 0 R 16 0 R 
  17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 
  27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 36 0 R 
  37 0 R 38 0 R 39 0 R 40 0 R 41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 46 0 R 
  47 0 R 48 0 R 49 0 R 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 
  57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 
  67 0 R 68 0 R 69 0 R 70 0 R 71 0 R 72 0 R 73 0 R 74 0 R 75 0 R 76 0 R 
  77 0 R 78 0 R 79 0 R 80 0 R 81 0 R 82 0 R 83 0 R 84 0 R 85 0 R 86 0 R ] /Contents 237 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
88 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Rect [ 100.0157 784.0394 130.0157 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
89 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Rect [ 544.1398 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
90 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Rect [ 100.0157 766.0394 142.2457 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
91 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Rect [ 544.1398 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
92 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Rect [ 100.0157 748.0394 140.0257 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
93 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Rect [ 544.1398 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
94 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Rect [ 100.0157 730.0394 135.5857 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
95 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Rect [ 544.1398 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
96 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 712.0394 136.1257 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
97 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
98 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Rect [ 100.0157 694.0394 123.9157 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
99 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Rect [ 544.1398 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
100 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 100.0157 676.0394 155.0557 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
101 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 544.1398 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
102 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /Rect [ 80.01575 658.0394 113.3557 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
103 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /Rect [ 544.1398 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
104 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 100.0157 640.0394 136.1457 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
105 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 544.1398 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
106 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 100.0157 622.0394 172.2657 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
107 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 544.1398 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
108 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 604.0394 120.5757 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
109 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
110 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Rect [ 80.01575 586.0394 179.4957 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
111 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Rect [ 544.1398 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
112 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Rect [ 80.01575 568.0394 173.3957 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
113 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Rect [ 544.1398 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
114 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /Rect [ 60.01575 550.0394 130.5957 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
115 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /Rect [ 544.1398 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
116 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /Rect [ 80.01575 532.0394 125.0357 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
117 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /Rect [ 544.1398 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
118 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Rect [ 100.0157 514.0394 153.3757 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
119 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Rect [ 544.1398 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
120 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Rect [ 100.0157 496.0394 153.3757 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
121 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Rect [ 544.1398 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
122 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Rect [ 100.0157 478.0394 153.3757 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
123 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Rect [ 544.1398 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
124 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Rect [ 100.0157 460.0394 153.3757 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
125 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Rect [ 544.1398 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
126 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 100.0157 442.0394 153.3757 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
127 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 544.1398 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
128 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Rect [ 100.0157 424.0394 153.3757 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
129 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Rect [ 544.1398 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
130 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 100.0157 406.0394 310.1057 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
131 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 544.1398 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
132 0 obj
<<
/Annots [ 88 0 R 89 0 R 90 0 R 91 0 R 92 0 R 93 0 R 94 0 R 95 0 R 96 0 R 97 0 R 
  98 0 R 99 0 R 100 0 R 101 0 R 102 0 R 103 0 R 104 0 R 105 0 R 106 0 R 107 0 R 
  108 0 R 109 0 R 110 0 R 111 0 R 112 0 R 113 0 R 114 0 R 115 0 R 116 0 R 117 0 R 
  118 0 R 119 0 R 120 0 R 121 0 R 122 0 R 123 0 R 124 0 R 125 0 R 126 0 R 127 0 R 
  128 0 R 129 0 R 130 0 R 131 0 R ] /Contents 238 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
133 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://www.edumips.org)
>> /Border [ 0 0 0 ] /Rect [ 170.6257 691.0394 356.5328 703.0394 ] /Subtype /Link /Type /Annot
>>
endobj
134 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://github.com/lupino3/edumips64)
>> /Border [ 0 0 0 ] /Rect [ 40.01575 679.0394 200.6557 691.0394 ] /Subtype /Link /Type /Annot
>>
endobj
135 0 obj
<<
/A <<
/S /URI /Type /Action /URI (mailto:bugs@edumips.org)
>> /Border [ 0 0 0 ] /Rect [ 269.0357 667.0394 355.8857 679.0394 ] /Subtype /Link /Type /Annot
>>
endobj
136 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
137 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
138 0 obj
<<
/Annots [ 133 0 R 134 0 R 135 0 R ] /Contents 239 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
139 0 obj
<<
/Contents 240 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
140 0 obj
<<
/Contents 241 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
141 0 obj
<<
/Contents 242 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
142 0 obj
<<
/Contents 243 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
143 0 obj
<<
/Contents 244 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
144 0 obj
<<
/Contents 245 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
145 0 obj
<<
/Contents 246 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
146 0 obj
<<
/Contents 247 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
147 0 obj
<<
/Contents 248 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
148 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 46.01575 309.4394 0 ] /Rect [ 97.81575 498.8394 102.2637 508.4394 ] /Subtype /Link /Type /Annot
>>
endobj
149 0 obj
<<
/BaseFont /ZapfDingbats /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
150 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 97.81575 507.4394 0 ] /Rect [ 46.01575 295.4394 51.57575 307.4394 ] /Subtype /Link /Type /Annot
>>
endobj
151 0 obj
<<
/Annots [ 148 0 R 150 0 R ] /Contents 249 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
152 0 obj
<<
/BaseFont /Symbol /Name /F7 /Subtype /Type1 /Type /Font
>>
endobj
153 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 270.2394 0 ] /Rect [ 153.3957 529.4394 217.8657 541.4394 ] /Subtype /Link /Type /Annot
>>
endobj
154 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 270.2394 0 ] /Rect [ 439.6557 263.0394 514.4176 275.0394 ] /Subtype /Link /Type /Annot
>>
endobj
155 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 270.2394 0 ] /Rect [ 319.5957 161.0394 384.0657 173.0394 ] /Subtype /Link /Type /Annot
>>
endobj
156 0 obj
<<
/Annots [ 153 0 R 154 0 R 155 0 R ] /Contents 250 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
157 0 obj
<<
/Contents 251 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
158 0 obj
<<
/Contents 252 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
159 0 obj
<<
/Contents 253 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
160 0 obj
<<
/Contents 254 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
161 0 obj
<<
/Contents 255 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
162 0 obj
<<
/Contents 256 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
163 0 obj
<<
/Contents 257 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
164 0 obj
<<
/Contents 258 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
165 0 obj
<<
/Contents 259 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
166 0 obj
<<
/Contents 260 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
167 0 obj
<<
/Contents 261 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
168 0 obj
<<
/Contents 262 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
169 0 obj
<<
/Outlines 171 0 R /PageLabels 263 0 R /PageMode /UseNone /Pages 234 0 R /Type /Catalog
>>
endobj
170 0 obj
<<
/Author () /CreationDate (D:20200413155934+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20200413155934+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
171 0 obj
<<
/Count 75 /First 172 0 R /Last 172 0 R /Type /Outlines
>>
endobj
172 0 obj
<<
/Count 61 /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /First 173 0 R /Last 225 0 R /Parent 171 0 R /Title (Welcome to the EduMIPS64 documentation!)
>>
endobj
173 0 obj
<<
/Count 4 /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /First 174 0 R /Last 177 0 R /Next 178 0 R /Parent 172 0 R 
  /Title (Source files format)
>>
endobj
174 0 obj
<<
/Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Next 175 0 R /Parent 173 0 R /Title (Memory limits)
>>
endobj
175 0 obj
<<
/Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Next 176 0 R /Parent 173 0 R /Prev 174 0 R /Title (The .data section)
>>
endobj
176 0 obj
<<
/Dest [ 140 0 R /XYZ 40.01575 787.0394 0 ] /Next 177 0 R /Parent 173 0 R /Prev 175 0 R /Title (The .code section)
>>
endobj
177 0 obj
<<
/Dest [ 141 0 R /XYZ 40.01575 627.0394 0 ] /Parent 173 0 R /Prev 176 0 R /Title (The #include command)
>>
endobj
178 0 obj
<<
/Count 15 /Dest [ 141 0 R /XYZ 40.01575 540.2394 0 ] /First 179 0 R /Last 189 0 R /Next 194 0 R /Parent 172 0 R 
  /Prev 173 0 R /Title (The instruction set)
>>
endobj
179 0 obj
<<
/Dest [ 141 0 R /XYZ 40.01575 403.0394 0 ] /Next 180 0 R /Parent 178 0 R /Title (ALU Instructions)
>>
endobj
180 0 obj
<<
/Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Next 181 0 R /Parent 178 0 R /Prev 179 0 R /Title (Load/Store instructions)
>>
endobj
181 0 obj
<<
/Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Next 182 0 R /Parent 178 0 R /Prev 180 0 R /Title (Flow control instructions)
>>
endobj
182 0 obj
<<
/Count 6 /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /First 183 0 R /Last 188 0 R /Next 189 0 R /Parent 178 0 R 
  /Prev 181 0 R /Title (The SYSCALL instruction)
>>
endobj
183 0 obj
<<
/Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Next 184 0 R /Parent 182 0 R /Title (SYSCALL 0 - exit\(\))
>>
endobj
184 0 obj
<<
/Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Next 185 0 R /Parent 182 0 R /Prev 183 0 R /Title (SYSCALL 1 - open\(\))
>>
endobj
185 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Next 186 0 R /Parent 182 0 R /Prev 184 0 R /Title (SYSCALL 2 - close\(\))
>>
endobj
186 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Next 187 0 R /Parent 182 0 R /Prev 185 0 R /Title (SYSCALL 3 - read\(\))
>>
endobj
187 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Next 188 0 R /Parent 182 0 R /Prev 186 0 R /Title (SYSCALL 4 - write\(\))
>>
endobj
188 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Parent 182 0 R /Prev 187 0 R /Title (SYSCALL 5 - printf\(\))
>>
endobj
189 0 obj
<<
/Count 4 /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /First 190 0 R /Last 193 0 R /Parent 178 0 R /Prev 182 0 R 
  /Title (Other instructions)
>>
endobj
190 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Next 191 0 R /Parent 189 0 R /Title (BREAK)
>>
endobj
191 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Next 192 0 R /Parent 189 0 R /Prev 190 0 R /Title (NOP)
>>
endobj
192 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Next 193 0 R /Parent 189 0 R /Prev 191 0 R /Title (TRAP)
>>
endobj
193 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Parent 189 0 R /Prev 192 0 R /Title (HALT)
>>
endobj
194 0 obj
<<
/Count 8 /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /First 195 0 R /Last 202 0 R /Next 203 0 R /Parent 172 0 R 
  /Prev 178 0 R /Title (Floating Point Unit)
>>
endobj
195 0 obj
<<
/Count 3 /Dest [ 151 0 R /XYZ 40.01575 267.4394 0 ] /First 196 0 R /Last 198 0 R /Next 199 0 R /Parent 194 0 R 
  /Title (Special values)
>>
endobj
196 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 192.6394 0 ] /Next 197 0 R /Parent 195 0 R /Title (NaN or Invalid Operation)
>>
endobj
197 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Next 198 0 R /Parent 195 0 R /Prev 196 0 R /Title (Zeroes or Underflows)
>>
endobj
198 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Parent 195 0 R /Prev 197 0 R /Title (Infinites or Overflows)
>>
endobj
199 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Next 200 0 R /Parent 194 0 R /Prev 195 0 R /Title (Exception configuration)
>>
endobj
200 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Next 201 0 R /Parent 194 0 R /Prev 199 0 R /Title (The .double directive)
>>
endobj
201 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Next 202 0 R /Parent 194 0 R /Prev 200 0 R /Title (The FCSR register)
>>
endobj
202 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Parent 194 0 R /Prev 201 0 R /Title (Instruction set)
>>
endobj
203 0 obj
<<
/Count 21 /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /First 204 0 R /Last 224 0 R /Next 225 0 R /Parent 172 0 R 
  /Prev 194 0 R /Title (The user interface)
>>
endobj
204 0 obj
<<
/Count 6 /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /First 205 0 R /Last 210 0 R /Next 211 0 R /Parent 203 0 R 
  /Title (The menu bar)
>>
endobj
205 0 obj
<<
/Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Next 206 0 R /Parent 204 0 R /Title (File)
>>
endobj
206 0 obj
<<
/Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Next 207 0 R /Parent 204 0 R /Prev 205 0 R /Title (Execute)
>>
endobj
207 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Next 208 0 R /Parent 204 0 R /Prev 206 0 R /Title (Configure)
>>
endobj
208 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Next 209 0 R /Parent 204 0 R /Prev 207 0 R /Title (Tools)
>>
endobj
209 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Next 210 0 R /Parent 204 0 R /Prev 208 0 R /Title (Window)
>>
endobj
210 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Parent 204 0 R /Prev 209 0 R /Title (Help)
>>
endobj
211 0 obj
<<
/Count 7 /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /First 212 0 R /Last 218 0 R /Next 219 0 R /Parent 203 0 R 
  /Prev 204 0 R /Title (Frames)
>>
endobj
212 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Next 213 0 R /Parent 211 0 R /Title (Cycles)
>>
endobj
213 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Next 214 0 R /Parent 211 0 R /Prev 212 0 R /Title (Registers)
>>
endobj
214 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Next 215 0 R /Parent 211 0 R /Prev 213 0 R /Title (Statistics)
>>
endobj
215 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Next 216 0 R /Parent 211 0 R /Prev 214 0 R /Title (Pipeline)
>>
endobj
216 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Next 217 0 R /Parent 211 0 R /Prev 215 0 R /Title (Memory)
>>
endobj
217 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Next 218 0 R /Parent 211 0 R /Prev 216 0 R /Title (Code)
>>
endobj
218 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Parent 211 0 R /Prev 217 0 R /Title (Input/Output)
>>
endobj
219 0 obj
<<
/Count 3 /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /First 220 0 R /Last 222 0 R /Next 223 0 R /Parent 203 0 R 
  /Prev 211 0 R /Title (Dialogs)
>>
endobj
220 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Next 221 0 R /Parent 219 0 R /Title (Settings)
>>
endobj
221 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Next 222 0 R /Parent 219 0 R /Prev 220 0 R /Title (Dinero Frontend)
>>
endobj
222 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Parent 219 0 R /Prev 221 0 R /Title (Help)
>>
endobj
223 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Next 224 0 R /Parent 203 0 R /Prev 219 0 R /Title (Command line options)
>>
endobj
224 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Parent 203 0 R /Prev 223 0 R /Title (Running EduMIPS64)
>>
endobj
225 0 obj
<<
/Count 8 /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /First 226 0 R /Last 226 0 R /Parent 172 0 R /Prev 203 0 R 
  /Title (Code Examples)
>>
endobj
226 0 obj
<<
/Count 7 /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /First 227 0 R /Last 233 0 R /Parent 225 0 R /Title (SYSCALL)
>>
endobj
227 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Next 228 0 R /Parent 226 0 R /Title (SYSCALL 0)
>>
endobj
228 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Next 229 0 R /Parent 226 0 R /Prev 227 0 R /Title (SYSCALL 1)
>>
endobj
229 0 obj
<<
/Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Next 230 0 R /Parent 226 0 R /Prev 228 0 R /Title (SYSCALL 2)
>>
endobj
230 0 obj
<<
/Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Next 231 0 R /Parent 226 0 R /Prev 229 0 R /Title (SYSCALL 3)
>>
endobj
231 0 obj
<<
/Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Next 232 0 R /Parent 226 0 R /Prev 230 0 R /Title (SYSCALL 4)
>>
endobj
232 0 obj
<<
/Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Next 233 0 R /Parent 226 0 R /Prev 231 0 R /Title (SYSCALL 5)
>>
endobj
233 0 obj
<<
/Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Parent 226 0 R /Prev 232 0 R /Title (A more complex usage example of SYSCALL 5)
>>
endobj
234 0 obj
<<
/Count 28 /Kids [ 4 0 R 5 0 R 87 0 R 132 0 R 138 0 R 139 0 R 140 0 R 141 0 R 142 0 R 143 0 R 
  144 0 R 145 0 R 146 0 R 147 0 R 151 0 R 156 0 R 157 0 R 158 0 R 159 0 R 160 0 R 
  161 0 R 162 0 R 163 0 R 164 0 R 165 0 R 166 0 R 167 0 R 168 0 R ] /Type /Pages
>>
endobj
235 0 obj
<<
/Length 920
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 203.162 0 Td (EduMIPS64) Tj T* -203.162 0 Td ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 24 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL 205.9245 0 Td (version 1.2.7.1) Tj T* -205.9245 0 Td ET
Q
Q
q
1 0 0 1 40.01575 650 cm
Q
q
1 0 0 1 40.01575 629.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F2 12 Tf 14.4 TL 91.90805 0 Td (Andrea Spadaccini and the EduMIPS64 development team) Tj T* -91.90805 0 Td ET
Q
Q
q
1 0 0 1 40.01575 544.5606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F1 12 Tf 14.4 TL 220.602 0 Td (April 13, 2020) Tj T* -220.602 0 Td ET
Q
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
 
endstream
endobj
236 0 obj
<<
/Length 75
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
237 0 obj
<<
/Length 9269
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 49.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Source files format) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Memory limits) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (.data) Tj /F1 10 Tf 0 0 .501961 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (.code) Tj /F1 10 Tf 0 0 .501961 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (3) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (#include) Tj /F1 10 Tf 0 0 .501961 rg ( command) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ALU Instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Load/Store instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Flow control instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (8) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (SYSCALL) Tj /F1 10 Tf 0 0 .501961 rg ( instruction) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 0 - exit\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 1 - open\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 2 - close\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 3 - read\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 4 - write\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 5 - printf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Other instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (BREAK) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (NOP) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (TRAP) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (HALT) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Special values) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (NaN or Invalid Operation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Zeroes or Underflows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Infinites or Overflows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Exception configuration) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The .double directive) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The FCSR register) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Instruction set) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The menu bar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (File) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Execute) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Configure) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Tools) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Window) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Frames) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
 
endstream
endobj
238 0 obj
<<
/Length 4880
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 403.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Cycles) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Registers) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Statistics) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Pipeline) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Memory) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Code) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Input/Output) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dialogs) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Settings) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dinero Frontend) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Command line options) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Running EduMIPS64) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 0) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 1) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 2) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (21) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 3) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 4) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (A more complex usage example of SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 403.0394 cm
Q
 
endstream
endobj
239 0 obj
<<
/Length 6953
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.439653 Tw (EduMIPS64 is a MIPS64 Instruction Set Architecture \(ISA\) simulator. It is designed to be used to execute small) Tj T* 0 Tw 1.976339 Tw (programs that use the subset of the MIPS64 ISA implemented by the simulator, allowing the user to see how) Tj T* 0 Tw -0.028732 Tw (instructions behave in the pipeline, how stalls are handled by the CPU, the status of registers and memory and much) Tj T* 0 Tw (more. It is both a simulator and a visual debugger.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
q
BT 1 0 0 1 0 26 Tm 13.57117 Tw 12 TL /F1 10 Tf 0 0 0 rg (The website for the project is ) Tj 0 0 .501961 rg (http://www.edumips.org) Tj 0 0 0 rg (, and the code is hosted at) Tj T* 0 Tw 2.308007 Tw 0 0 .501961 rg (http://github.com/lupino3/edumips64) Tj 0 0 0 rg (. If you find any bugs, or have any suggestion for improving the simulator,) Tj T* 0 Tw (please open an issue on github or send an email at ) Tj 0 0 .501961 rg (bugs@edumips.org) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.871268 Tw (EduMIPS64 is developed by a group of students of the University of Catania \(Italy\), and started as a clone of) Tj T* 0 Tw (WinMIPS64, even if now there are lots of differences between the two simulators.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 619.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This manual will introduce you to EduMIPS64, and will cover some details on how to use it.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL .000742 Tw (The first chapter of this manual covers the format of source files accepted by the simulator, describing the data types) Tj T* 0 Tw .308561 Tw (and the directives, in addition to command line parameters. In the second chapter there\222s an overview of the subset) Tj T* 0 Tw .184116 Tw (of the MIPS64 instruction set that is accepted by EduMIPS64, with all the needed parameters and indications to use) Tj T* 0 Tw 1.389705 Tw (them. The third chapter is a description of the Floating Point Unit and its instruction set. The fourth chapter is a) Tj T* 0 Tw 1.171894 Tw (description of the user interface of EduMIPS64, that explains the purpose of each frame and menu, along with a) Tj T* 0 Tw .137756 Tw (description of the configuration dialog, the Dinero frontend dialog, the Manual dialog and command line options. The) Tj T* 0 Tw (fifth chapter contains some useful examples.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This manual describes EduMIPS64 version 1.2.7.1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 475.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Source files format) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 445.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .264426 Tw (EduMIPS64 tries to follow the conventions used in other MIPS64 and DLX simulators, so that old time users will not) Tj T* 0 Tw (be confused by its syntax.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 415.8394 cm
q
BT 1 0 0 1 0 14 Tm .671794 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are two sections in a source file, the ) Tj /F3 10 Tf (data) Tj /F1 10 Tf ( section and the ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section, introduced respectively by the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf  T* 0 Tw (and the ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( directives. In the following listing you can see a very basic EduMIPS64 program:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 325.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F4 10 Tf 12 TL (; This is a comment) Tj T* (        .data) Tj T* (label:  .word   15     ; This is an inline comment) Tj T*  T* (        .code) Tj T* (        daddi   r1, r0, 0) Tj T* (        syscall 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 293.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .526705 Tw (To distinguish the various parts of each source code line, any combination of spaces and tabs can be used, as the) Tj T* 0 Tw (parser ignores multiple spaces and only detects whitespaces to separate tokens.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.799653 Tw (Comments can be specified using the \223;\224 character, everything that follows that character will be ignored. So a) Tj T* 0 Tw (comment can be used \223inline\224 \(after the directive\) or on a row by itself.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .238766 Tw (Labels can be used in the code to reference a memory cell or an instruction. They are case insensitive. Only a label) Tj T* 0 Tw 1.749705 Tw (for each source code line can be used. The label can be specified one or more rows above the effective data) Tj T* 0 Tw -0.000369 Tw (declaration or instruction, provided that there\222s nothing, except for comments and empty lines, between the label and) Tj T* 0 Tw (the declaration.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 176.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Memory limits) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 146.2394 cm
q
BT 1 0 0 1 0 14 Tm .443205 Tw 12 TL /F1 10 Tf 0 0 0 rg (EduMIPS64 has a fixed memory size for both data \(the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( section, capped at 640 kB \226 i.e., 80000 64-bit values\)) Tj T* 0 Tw (and instructions \(the ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( section, capped at 128 kB \226 i.e., 32000 instructions, each occupying 32 bits\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 128.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (These limits are hardcoded in the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.43937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (.data) Tj /F5 14 Tf .12549 .262745 .360784 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.43937 cm
q
BT 1 0 0 1 0 14 Tm .696506 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (data) Tj /F1 10 Tf ( section contains commands that specify how the memory must be filled before program execution starts.) Tj T* 0 Tw (The general form of a ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( command is:) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
 
endstream
endobj
240 0 obj
<<
/Length 14055
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] .datatype value1 [, value2 [, ...]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 748.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (EduMIPS64 supports different data types, that are described in the following table.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 742.2394 cm
Q
q
1 0 0 1 40.01575 648.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 88 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 88 495.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 72 495.2441 -18 re f*
1 1 1 rg
n 0 54 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 495.2441 -18 re f*
1 1 1 rg
n 0 18 495.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 88 495.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 111.811 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 44.23551 0 Td (Type) Tj T* -44.23551 0 Td ET
Q
Q
q
1 0 0 1 129.811 75 cm
q
.960784 .960784 .862745 rg
n 0 0 213.111 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 85.43548 0 Td (Directive) Tj T* -85.43548 0 Td ET
Q
Q
q
1 0 0 1 354.922 75 cm
q
.960784 .960784 .862745 rg
n 0 0 134.3221 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 36.32106 0 Td (Bits required) Tj T* -36.32106 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Byte) Tj T* ET
Q
Q
q
1 0 0 1 129.811 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.byte) Tj T* ET
Q
Q
q
1 0 0 1 354.922 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Half word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.word16) Tj T* ET
Q
Q
q
1 0 0 1 354.922 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.word32) Tj T* ET
Q
Q
q
1 0 0 1 354.922 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (32) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Double Word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (.word) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (.word64) Tj T* ET
Q
Q
q
1 0 0 1 354.922 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (64) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 495.2441 72 l S
n 0 54 m 495.2441 54 l S
n 0 36 m 495.2441 36 l S
n 0 18 m 495.2441 18 l S
n 123.811 0 m 123.811 88 l S
n 348.922 0 m 348.922 88 l S
n 0 88 m 495.2441 88 l S
n 0 0 m 495.2441 0 l S
n 0 0 m 0 88 l S
n 495.2441 0 m 495.2441 88 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 648.2394 cm
Q
q
1 0 0 1 40.01575 630.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Please note that a double word can be introduced either by the ) Tj /F3 10 Tf (.word) Tj /F1 10 Tf ( directive or by the ) Tj /F3 10 Tf (.word64) Tj /F1 10 Tf ( directive.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 600.2394 cm
q
BT 1 0 0 1 0 14 Tm .935479 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the data types are interpreted as signed. This means that integer literals in the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( section must be between) Tj T* 0 Tw (-2^\(n-1\) and 2^\(n-1\) - 1 \(inclusive\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.2394 cm
q
BT 1 0 0 1 0 38 Tm 1.639163 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is a big difference between declaring a list of data elements using a single directive or by using multiple) Tj T* 0 Tw .000205 Tw (directives of the same type. EduMIPS64 starts writing from the next 64-bit double word as soon as it finds a datatype) Tj T* 0 Tw .068921 Tw (identifier, so the first ) Tj /F3 10 Tf (.byte) Tj /F1 10 Tf ( statement in the following listing will put the numbers 1, 2, 3 and 4 in the space of 4 bytes,) Tj T* 0 Tw (taking 32 bits, while code in the next four rows will put each number in a different memory cell, occupying 32 bytes:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 467.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (.data) Tj T* (.byte    1, 2, 3, 4) Tj T* (.byte    1) Tj T* (.byte    2) Tj T* (.byte    3) Tj T* (.byte    4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 423.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.082295 Tw (In the following table, the memory is represented using byte-sized cells and each row is 64 bits wide. The address on) Tj T* 0 Tw .808368 Tw (the left side of each row of the table refers to the right-most memory cell, that has the lowest address of the eight) Tj T* 0 Tw (cells in each line.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.4394 cm
Q
q
1 0 0 1 40.01575 327.4394 cm
1 1 1 rg
n 0 90 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 72 515.2441 -18 re f*
1 1 1 rg
n 0 54 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 515.2441 -18 re f*
1 1 1 rg
n 0 18 515.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 177.748 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 177.748 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 177.748 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (24) Tj T* ET
Q
Q
q
1 0 0 1 177.748 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (36) Tj T* ET
Q
Q
q
1 0 0 1 177.748 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 515.2441 72 l S
n 0 54 m 515.2441 54 l S
n 0 36 m 515.2441 36 l S
n 0 18 m 515.2441 18 l S
n 171.748 0 m 171.748 90 l S
n 214.685 0 m 214.685 90 l S
n 257.622 0 m 257.622 90 l S
n 300.5591 0 m 300.5591 90 l S
n 343.4961 0 m 343.4961 90 l S
n 386.4331 0 m 386.4331 90 l S
n 429.3701 0 m 429.3701 90 l S
n 472.3071 0 m 472.3071 90 l S
n 0 90 m 515.2441 90 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 90 l S
n 515.2441 0 m 515.2441 90 l S
Q
Q
q
1 0 0 1 40.01575 327.4394 cm
Q
q
1 0 0 1 40.01575 309.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (There are some special directives that need to be discussed: ) Tj /F3 10 Tf (.space) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (.asciiz) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.4394 cm
q
BT 1 0 0 1 0 26 Tm 2.077584 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.space) Tj /F1 10 Tf ( directive is used to leave some free space in memory. It accepts as a parameter an integer, that) Tj T* 0 Tw -0.075268 Tw (indicates the number of bytes that must be left empty. It is handy when you must save some space in memory for the) Tj T* 0 Tw (results of your computations.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 237.4394 cm
q
BT 1 0 0 1 0 14 Tm 2.33694 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( directive accepts strings containing any of the ASCII characters, and some special C-like escaping) Tj T* 0 Tw (sequences, that are described in the following table, and puts those strings in memory.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 231.4394 cm
Q
q
1 0 0 1 40.01575 119.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 106 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 106 495.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 90 495.2441 -18 re f*
1 1 1 rg
n 0 72 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 495.2441 -18 re f*
1 1 1 rg
n 0 36 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 495.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 106 495.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 93 cm
q
.960784 .960784 .862745 rg
n 0 0 143.9102 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 25.27009 0 Td (Escaping sequence) Tj T* -25.27009 0 Td ET
Q
Q
q
1 0 0 1 161.9102 93 cm
q
.960784 .960784 .862745 rg
n 0 0 235.622 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 97.53102 0 Td (Meaning) Tj T* -97.53102 0 Td ET
Q
Q
q
1 0 0 1 409.5322 93 cm
q
.960784 .960784 .862745 rg
n 0 0 79.71187 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 13.46093 0 Td (ASCII code) Tj T* -13.46093 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\0) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Null byte) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\t) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Horizontal tabulation) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\n) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Newline character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (") Tj T* ET
Q
Q
q
1 0 0 1 161.9102 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Literal quote character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (34) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Literal backslash character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (92) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 90 m 495.2441 90 l S
n 0 72 m 495.2441 72 l S
n 0 54 m 495.2441 54 l S
n 0 36 m 495.2441 36 l S
n 0 18 m 495.2441 18 l S
n 155.9102 0 m 155.9102 106 l S
n 403.5322 0 m 403.5322 106 l S
n 0 106 m 495.2441 106 l S
n 0 0 m 495.2441 0 l S
n 0 0 m 0 106 l S
n 495.2441 0 m 495.2441 106 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 119.4394 cm
Q
q
1 0 0 1 40.01575 89.43937 cm
q
BT 1 0 0 1 0 14 Tm .165535 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.asciiz) Tj /F1 10 Tf ( directive behaves exactly like the ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( command, with the difference that it automatically ends the string) Tj T* 0 Tw (with a null byte.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
 
endstream
endobj
241 0 obj
<<
/Length 10539
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (.code) Tj /F5 14 Tf .12549 .262745 .360784 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 740.2394 cm
q
BT 1 0 0 1 0 14 Tm .589116 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section contains commands that specify how the memory must be filled when the program will start. The) Tj T* 0 Tw (general form of a ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( command is:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] instruction [param1 [, param2 [, param3]]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 701.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section can be specified with the ) Tj /F3 10 Tf (.text) Tj /F1 10 Tf ( alias.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 683.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number and the type of parameters depends on the instruction itself.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 665.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Instructions can take three types of parameters:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 659.4394 cm
Q
q
1 0 0 1 40.01575 659.4394 cm
Q
q
1 0 0 1 40.01575 635.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .224952 Tw 12 TL /F3 10 Tf 0 0 0 rg (Registers) Tj /F1 10 Tf ( a register parameter is indicated by an uppercase or lowercase \223r\224, or a $, followed by the number of) Tj T* 0 Tw (the register \(between 0 and 31\), as in \223r4\224, \223R4\224 or \223$4\224;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 629.4394 cm
Q
q
1 0 0 1 40.01575 593.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .016385 Tw 12 TL /F3 10 Tf 0 0 0 rg (Immediate values) Tj /F1 10 Tf ( an immediate value can be a number or a label; the number can be specified in base 10 or in) Tj T* 0 Tw .915783 Tw (base 16: base 10 numbers are simply inserted by writing the number, while base 16 number are inserted by) Tj T* 0 Tw (putting before the number the prefix \2230x\224) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 587.4394 cm
Q
q
1 0 0 1 40.01575 563.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.010936 Tw 12 TL /F3 10 Tf 0 0 0 rg (Address) Tj /F1 10 Tf ( an address is composed by an immediate value followed by a register name enclosed in brackets. The) Tj T* 0 Tw (value of the register will be used as base, the value of the immediate will be the offset.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 563.4394 cm
Q
q
1 0 0 1 40.01575 545.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The size of immediate values is limited by the number of bits that are available in the bit encoding of the instruction.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 515.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.110742 Tw (You can use standard MIPS assembly aliases to address the first 32 registers, appending the alias to one of the) Tj T* 0 Tw (standard register prefixes like \223r\224, \223$\224 and \223R\224. See the next table.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 509.4394 cm
Q
q
1 0 0 1 40.01575 54.85039 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 448 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 448 489.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 432 489.2441 -18 re f*
1 1 1 rg
n 0 414 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 396 489.2441 -18 re f*
1 1 1 rg
n 0 378 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 360 489.2441 -18 re f*
1 1 1 rg
n 0 342 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 324 489.2441 -18 re f*
1 1 1 rg
n 0 306 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 288 489.2441 -18 re f*
1 1 1 rg
n 0 270 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 252 489.2441 -18 re f*
1 1 1 rg
n 0 234 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 216 489.2441 -18 re f*
1 1 1 rg
n 0 198 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 180 489.2441 -18 re f*
1 1 1 rg
n 0 162 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 144 489.2441 -18 re f*
1 1 1 rg
n 0 126 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 108 489.2441 -18 re f*
1 1 1 rg
n 0 90 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 72 489.2441 -18 re f*
1 1 1 rg
n 0 54 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 489.2441 -18 re f*
1 1 1 rg
n 0 18 489.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 448 489.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 435 cm
q
.960784 .960784 .862745 rg
n 0 0 267.5681 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 113.779 0 Td (Register) Tj T* -113.779 0 Td ET
Q
Q
q
1 0 0 1 285.5681 435 cm
q
.960784 .960784 .862745 rg
n 0 0 197.676 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 86.88802 0 Td (Alias) Tj T* -86.88802 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 417 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 417 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (zero) Tj T* ET
Q
Q
q
1 0 0 1 6 399 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 399 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (at) Tj T* ET
Q
Q
q
1 0 0 1 6 381 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 381 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (v0) Tj T* ET
Q
Q
q
1 0 0 1 6 363 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 363 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (v1) Tj T* ET
Q
Q
q
1 0 0 1 6 345 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 345 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a0) Tj T* ET
Q
Q
q
1 0 0 1 6 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a1) Tj T* ET
Q
Q
q
1 0 0 1 6 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a2) Tj T* ET
Q
Q
q
1 0 0 1 6 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a3) Tj T* ET
Q
Q
q
1 0 0 1 6 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t0) Tj T* ET
Q
Q
q
1 0 0 1 6 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t1) Tj T* ET
Q
Q
q
1 0 0 1 6 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t2) Tj T* ET
Q
Q
q
1 0 0 1 6 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t3) Tj T* ET
Q
Q
q
1 0 0 1 6 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t4) Tj T* ET
Q
Q
q
1 0 0 1 6 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t5) Tj T* ET
Q
Q
q
1 0 0 1 6 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t6) Tj T* ET
Q
Q
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t7) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s0) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s1) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s2) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s3) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s4) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s5) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s6) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s7) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 489.2441 0 l S
n 0 432 m 489.2441 432 l S
n 0 414 m 489.2441 414 l S
n 0 396 m 489.2441 396 l S
n 0 378 m 489.2441 378 l S
n 0 360 m 489.2441 360 l S
n 0 342 m 489.2441 342 l S
n 0 324 m 489.2441 324 l S
n 0 306 m 489.2441 306 l S
n 0 288 m 489.2441 288 l S
n 0 270 m 489.2441 270 l S
n 0 252 m 489.2441 252 l S
n 0 234 m 489.2441 234 l S
n 0 216 m 489.2441 216 l S
n 0 198 m 489.2441 198 l S
n 0 180 m 489.2441 180 l S
n 0 162 m 489.2441 162 l S
n 0 144 m 489.2441 144 l S
n 0 126 m 489.2441 126 l S
n 0 108 m 489.2441 108 l S
n 0 90 m 489.2441 90 l S
n 0 72 m 489.2441 72 l S
n 0 54 m 489.2441 54 l S
n 0 36 m 489.2441 36 l S
n 0 18 m 489.2441 18 l S
n 279.5681 0 m 279.5681 448 l S
n 0 448 m 489.2441 448 l S
n 0 0 m 0 448 l S
n 489.2441 0 m 489.2441 448 l S
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
 
endstream
endobj
242 0 obj
<<
/Length 8857
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 643.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 144 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 126 489.2441 -18 re f*
1 1 1 rg
n 0 108 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 90 489.2441 -18 re f*
1 1 1 rg
n 0 72 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 489.2441 -18 re f*
1 1 1 rg
n 0 36 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 489.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t8) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (25) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t9) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (26) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (k0) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (27) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (k1) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (28) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (gp) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (29) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (sp) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (30) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (fp) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (31) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ra) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 144 m 489.2441 144 l S
n 0 126 m 489.2441 126 l S
n 0 108 m 489.2441 108 l S
n 0 90 m 489.2441 90 l S
n 0 72 m 489.2441 72 l S
n 0 54 m 489.2441 54 l S
n 0 36 m 489.2441 36 l S
n 0 18 m 489.2441 18 l S
n 279.5681 0 m 279.5681 144 l S
n 0 0 m 0 144 l S
n 489.2441 0 m 489.2441 144 l S
n 0 0 m 489.2441 0 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 643.0394 cm
Q
q
1 0 0 1 40.01575 610.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (#include) Tj /F5 14 Tf .12549 .262745 .360784 rg ( command) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 556.2394 cm
q
BT 1 0 0 1 0 38 Tm .864116 Tw 12 TL /F1 10 Tf 0 0 0 rg (Source files can contain the ) Tj /F3 10 Tf (#include filename) Tj /F1 10 Tf ( command, which has the effect of putting in place of the command) Tj T* 0 Tw 2.302576 Tw (row the content of the file ) Tj /F3 10 Tf (filename) Tj /F1 10 Tf (. It is useful if you want to include external routines, and it comes with a) Tj T* 0 Tw .307705 Tw (loop-detection algorithm that will warn you if you try to do something like \223) Tj /F3 10 Tf (#include A.s) Tj /F1 10 Tf (\224 in file ) Tj /F3 10 Tf (B.s) Tj /F1 10 Tf ( and \223) Tj /F3 10 Tf (#include B.s) Tj /F1 10 Tf (\224) Tj T* 0 Tw (in file ) Tj /F3 10 Tf (A.s) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 521.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 479.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.173561 Tw (In this section we will the subset of the MIPS64 instruction set that EduMIPS64 recognizes. We can operate two) Tj T* 0 Tw .151894 Tw (different taxonomic classification: one based on the functionality of the instructions and one based on the type of the) Tj T* 0 Tw (parameters of the instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 437.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.1243 Tw (The first classification divides instruction into three categories: ALU instructions, Load/Store instructions, Flow control) Tj T* 0 Tw 1.70494 Tw (instructions. The next three subsections will describe each category and every instruction that belongs to those) Tj T* 0 Tw (categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 419.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The fourth subsection will describe instructions that do not fit in any of the three categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 386.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (ALU Instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 344.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.021095 Tw (The Arithmetic Logic Unit \(in short, ALU\) is a part of the execution unit of a CPU, that has the duty of doing) Tj T* 0 Tw .381268 Tw (arithmetical and logic operations. So in the ALU instructions group we will find those instructions that do this kind of) Tj T* 0 Tw (operations.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 326.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (ALU Instructions can be divided in two groups: ) Tj /F3 10 Tf (R-Type) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (I-Type) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 296.2394 cm
q
BT 1 0 0 1 0 14 Tm 1.175783 Tw 12 TL /F1 10 Tf 0 0 0 rg (Four of those instructions make use of two special registers: LO and HI. They are internal CPU registers, whose) Tj T* 0 Tw (value can be accessed through the ) Tj /F3 10 Tf (MFLO) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (MFHI) Tj /F1 10 Tf ( instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 278.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here\222s the list of R-Type ALU Instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 272.2394 cm
Q
q
1 0 0 1 40.01575 272.2394 cm
Q
q
1 0 0 1 40.01575 242.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (AND rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise AND between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 236.2394 cm
Q
q
1 0 0 1 40.01575 194.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADD rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .072705 Tw (Sums the content of 32-bits registers rs and rt, considering them as signed values, and puts the result into rd. If) Tj T* 0 Tw (an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 188.2394 cm
Q
q
1 0 0 1 40.01575 146.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .017705 Tw (Sums the content of 32-bits registers rs and rt, and puts the result into rd. No integer overflow occurs under any) Tj T* 0 Tw (circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 146.2394 cm
Q
q
1 0 0 1 40.01575 140.2394 cm
Q
q
1 0 0 1 40.01575 140.2394 cm
Q
q
1 0 0 1 40.01575 98.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADD rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .072705 Tw (Sums the content of 64-bits registers rs and rt, considering them as signed values, and puts the result into rd. If) Tj T* 0 Tw (an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 92.23937 cm
Q
q
1 0 0 1 40.01575 80.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDU rd, rs, rt) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 56.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .017705 Tw (Sums the content of 64-bits registers rs and rt, and puts the result into rd. No integer overflow occurs under any) Tj T* 0 Tw (circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 56.23937 cm
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
 
endstream
endobj
243 0 obj
<<
/Length 8820
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 787.0394 cm
Q
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DDIV rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.490829 Tw (Executes the division between 64-bits registers rs and rt, putting the 64-bits quotient in LO and the 64-bits) Tj T* 0 Tw (remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DDIVU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .334006 Tw (Executes the division between 64-bits registers rs and rt, considering them as unsigned values and putting the) Tj T* 0 Tw (64-bits quotient in LO and the 64-bits remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 649.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIV rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.490829 Tw (Executes the division between 32-bits registers rs and rt, putting the 32-bits quotient in LO and the 32-bits) Tj T* 0 Tw (remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 643.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIVU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .334006 Tw (Executes the division between 32-bits registers rs and rt, considering them as unsigned values and putting the) Tj T* 0 Tw (32-bits quotient in LO and the 32-bits remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULT rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .54294 Tw (Executes the multiplication between 64-bits registers rs and rt, putting the low-order 64-bits doubleword of the) Tj T* 0 Tw (result into special register LO and the high-order 64-bits doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 64-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw 2.432273 Tw (putting the low-order 64-bits doubleword of the result into special register LO and the high-order 64-bits) Tj T* 0 Tw (doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 487.0394 cm
Q
q
1 0 0 1 40.01575 433.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULTU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 64-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw 2.432273 Tw (putting the low-order 64-bits doubleword of the result into special register LO and the high-order 64-bits) Tj T* 0 Tw (doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 427.0394 cm
Q
q
1 0 0 1 40.01575 385.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSLL rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .156705 Tw (Does a left shift of 64-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts the) Tj T* 0 Tw (result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 379.0394 cm
Q
q
1 0 0 1 40.01575 337.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSLLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.065295 Tw (Does a left shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned value,) Tj T* 0 Tw (and puts the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 331.0394 cm
Q
q
1 0 0 1 40.01575 277.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRA rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .721268 Tw (Does a right shift of 64-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw .017814 Tw (the result into 64-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is zero, otherwise they) Tj T* 0 Tw (are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 271.0394 cm
Q
q
1 0 0 1 40.01575 217.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRAV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned) Tj T* 0 Tw 1.049243 Tw (value, and puts the result into 64-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is) Tj T* 0 Tw (zero, otherwise they are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 211.0394 cm
Q
q
1 0 0 1 40.01575 169.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRL rd, rs, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .604426 Tw (Does a right shift of 64-bits register rs, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw (the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 163.0394 cm
Q
q
1 0 0 1 40.01575 121.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned) Tj T* 0 Tw (value, and puts the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 115.0394 cm
Q
q
1 0 0 1 40.01575 73.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSUB rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .390227 Tw (Subtracts the value of 64-bits register rt to 64-bits register rs, considering them as signed values, and puts the) Tj T* 0 Tw (result in rd. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 67.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
 
endstream
endobj
244 0 obj
<<
/Length 9355
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSUBU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.306531 Tw (Subtracts the value of 64-bits register rt to 64-bits register rs, and puts the result in rd. No integer overflow) Tj T* 0 Tw (occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFLO rd) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Moves the content of the special register LO into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 673.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFHI rd) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Moves the content of the special register HI into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVN rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is different from zero, then moves the content of rs into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVZ rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is equal to zero, then moves the content of rs into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MULT rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .683381 Tw (Executes the multiplication between 32-bits registers rs and rt, putting the low-order 32-bits word of the result) Tj T* 0 Tw (into special register LO and the high-order 32-bits word of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MULTU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 32-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw .791894 Tw (putting the low-order 32-bits word of the result into special register LO and the high-order 32-bits word of the) Tj T* 0 Tw (result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 487.0394 cm
Q
q
1 0 0 1 40.01575 457.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (OR rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise OR between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 451.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLL rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .156705 Tw (Does a left shift of 32-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts the) Tj T* 0 Tw (result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 403.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.065295 Tw (Does a left shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned value,) Tj T* 0 Tw (and puts the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 355.0394 cm
Q
q
1 0 0 1 40.01575 301.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRA rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .721268 Tw (Does a right shift of 32-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw .017814 Tw (the result into 32-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is zero, otherwise they) Tj T* 0 Tw (are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 295.0394 cm
Q
q
1 0 0 1 40.01575 241.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRAV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned) Tj T* 0 Tw 1.049243 Tw (value, and puts the result into 32-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is) Tj T* 0 Tw (zero, otherwise they are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 235.0394 cm
Q
q
1 0 0 1 40.01575 193.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRL rd, rs, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .604426 Tw (Does a right shift of 32-bits register rs, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw (the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 187.0394 cm
Q
q
1 0 0 1 40.01575 145.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned) Tj T* 0 Tw (value, and puts the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 139.0394 cm
Q
q
1 0 0 1 40.01575 97.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUB rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .390227 Tw (Subtracts the value of 32-bits register rt to 32-bits register rs, considering them as signed values, and puts the) Tj T* 0 Tw (result in rd. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 79.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUBU rd, rs, rt) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.306531 Tw (Subtracts the value of 32-bits register rt to 32-bits register rs, and puts the result in rd. No integer overflow) Tj T* 0 Tw (occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.03937 cm
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
 
endstream
endobj
245 0 obj
<<
/Length 8995
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 787.0394 cm
Q
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLT rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.102964 Tw (Sets the value of rd to 1 if the value of rs is less than the value of rt, otherwise sets it to 0. This instruction) Tj T* 0 Tw (performs a signed comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.102964 Tw (Sets the value of rd to 1 if the value of rs is less than the value of rt, otherwise sets it to 0. This instruction) Tj T* 0 Tw (performs an unsigned comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 661.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (XOR rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise exclusive OR \(XOR\) between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 661.0394 cm
Q
q
1 0 0 1 40.01575 643.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here\222s the list of I-Type ALU Instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .512006 Tw (Executes the sum between 32-bits register rs and the immediate value, putting the result in rt. This instruction) Tj T* 0 Tw (considers rs and the immediate value as signed values. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 589.0394 cm
Q
q
1 0 0 1 40.01575 547.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDIU rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 32-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 541.0394 cm
Q
q
1 0 0 1 40.01575 541.0394 cm
Q
q
1 0 0 1 40.01575 511.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ANDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes the bitwise AND between rs and the immediate value, putting the result in rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 505.0394 cm
Q
q
1 0 0 1 40.01575 463.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .512006 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. This instruction) Tj T* 0 Tw (considers rs and the immediate value as signed values. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 457.0394 cm
Q
q
1 0 0 1 40.01575 415.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDIU rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 415.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 367.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDUI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 367.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
Q
q
1 0 0 1 40.01575 319.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LUI rt, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.572705 Tw (Loads the constant defined in the immediate value in the upper half \(16 bit\) of the lower 32 bits of rt,) Tj T* 0 Tw (sign-extending the upper 32 bits of the register.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 313.0394 cm
Q
q
1 0 0 1 40.01575 283.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ORI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes the bitwise OR between rs and the immediate value, putting the result in rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 277.0394 cm
Q
q
1 0 0 1 40.01575 235.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .880564 Tw (Sets the value of rt to 1 if the value of rs is less than the value of the immediate, otherwise sets it to 0. This) Tj T* 0 Tw (instruction performs a signed comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 229.0394 cm
Q
q
1 0 0 1 40.01575 187.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTUI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .880564 Tw (Sets the value of rt to 1 if the value of rs is less than the value of the immediate, otherwise sets it to 0. This) Tj T* 0 Tw (instruction performs an unsigned comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 181.0394 cm
Q
q
1 0 0 1 40.01575 151.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (XORI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise exclusive OR \(XOR\) between rs and the immediate value, and puts the result into rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 151.0394 cm
Q
q
1 0 0 1 40.01575 118.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Load/Store instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 88.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.425256 Tw (This category contains all the instructions that operate transfers between registers and the memory. All of these) Tj T* 0 Tw (instructions are in the form:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 69.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] instruction rt, offset\(base\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
 
endstream
endobj
246 0 obj
<<
/Length 8428
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 751.0394 cm
q
BT 1 0 0 1 0 26 Tm .152004 Tw 12 TL /F1 10 Tf 0 0 0 rg (Where rt is the source or destination register, depending if we are using a store or a load instruction; offset is a label) Tj T* 0 Tw .024277 Tw (or an immediate value and base is a register. The address is obtained by adding to the value of the register ) Tj /F3 10 Tf (base) Tj /F1 10 Tf ( the) Tj T* 0 Tw (immediate value ) Tj /F3 10 Tf (offset) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .648005 Tw (The address specified must be aligned according to the data type that is treated. Load instructions ending with \223U\224) Tj T* 0 Tw (treat the content of the register rt as an unsigned value.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of load instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 655.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LB rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 649.0394 cm
Q
q
1 0 0 1 40.01575 607.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LBU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.128205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as an) Tj T* 0 Tw (unsigned byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 559.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LD rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (double word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 553.0394 cm
Q
q
1 0 0 1 40.01575 511.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LH rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 505.0394 cm
Q
q
1 0 0 1 40.01575 463.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LHU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.128205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as an) Tj T* 0 Tw (unsigned half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 457.0394 cm
Q
q
1 0 0 1 40.01575 415.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LW rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 367.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LWU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 367.0394 cm
Q
q
1 0 0 1 40.01575 349.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of store instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 343.0394 cm
Q
q
1 0 0 1 40.01575 343.0394 cm
Q
q
1 0 0 1 40.01575 313.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SB rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 307.0394 cm
Q
q
1 0 0 1 40.01575 277.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SD rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a double word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 271.0394 cm
Q
q
1 0 0 1 40.01575 241.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SH rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 235.0394 cm
Q
q
1 0 0 1 40.01575 205.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SW rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 205.0394 cm
Q
q
1 0 0 1 40.01575 172.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Flow control instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 142.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.223705 Tw (Flow control instructions are used to alter the order of instructions that are fetched by the CPU. We can make a) Tj T* 0 Tw (distinction between these instructions: R-Type, I-Type and J-Type.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 112.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .379689 Tw (Those instructions effectively executes the jump in the ID stage, so often an useless fetch is executed. In this case,) Tj T* 0 Tw (two instructions are removed from the pipeline, and the branch taken stalls counter is incremented by two units.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 94.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of R-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 88.23937 cm
Q
q
1 0 0 1 40.01575 88.23937 cm
Q
q
1 0 0 1 40.01575 76.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JALR rs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
 
endstream
endobj
247 0 obj
<<
/Length 8525
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .071205 Tw (Puts the content of rs into the program counter, and puts into R31 the address of the instruction that follows the) Tj T* 0 Tw (JALR instruction, the return value.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JR rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Puts the content of rs into the program counter.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of I-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 673.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (B offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unconditionally jumps to offset) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BEQ rs, rt, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is equal to rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BEQZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is equal to zero.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 565.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BGEZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rs is greather than zero, does a PC-relative jump to offset.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 559.0394 cm
Q
q
1 0 0 1 40.01575 529.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BNE rs, rt, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is not equal to rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 523.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BNEZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is not equal to zero.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 493.0394 cm
Q
q
1 0 0 1 40.01575 475.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of J-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 469.0394 cm
Q
q
1 0 0 1 40.01575 469.0394 cm
Q
q
1 0 0 1 40.01575 439.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (J target) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Puts the immediate value target into the program counter.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 433.0394 cm
Q
q
1 0 0 1 40.01575 391.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JAL target) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .295783 Tw (Puts the immediate value target into the program counter, and puts into R31 the address of the instruction that) Tj T* 0 Tw (follows the JAL instruction, the return value.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 391.0394 cm
Q
q
1 0 0 1 40.01575 358.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (SYSCALL) Tj /F5 14 Tf .12549 .262745 .360784 rg ( instruction) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 328.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .17493 Tw (The SYSCALL instruction offers to the programmer an operating-system-like interface, making available six different) Tj T* 0 Tw (system calls.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 298.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .029705 Tw (System calls expect that the address of their parameters is stored in register R14 \($t6\), and will put their return value) Tj T* 0 Tw (in register R1 \($at\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 280.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (System calls follow as much as possible the POSIX convention.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 249.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 0 - exit\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 231.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 0 does not expect any parameter, nor it returns anything. It simply stops the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 201.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .266265 Tw (Note that if the simulator does not find SYSCALL 0 in the source code, or any of its equivalents \(HALT - TRAP 0\), it) Tj T* 0 Tw (will be added automatically at the end of the source.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 171.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 1 - open\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 129.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .523182 Tw (The SYSCALL 1 expects two parameters: a zero-terminated string that indicates the pathname of the file that must) Tj T* 0 Tw -0.108853 Tw (be opened, and a double word containing an integer that indicates the flags that must be used to specify how to open) Tj T* 0 Tw (the file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 111.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This integer must be built summing the flags that you want to use, choosing them from the following list:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 105.4394 cm
Q
q
1 0 0 1 40.01575 105.4394 cm
Q
q
1 0 0 1 40.01575 93.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_RDONLY \(0x01\)) Tj /F1 10 Tf ( Opens the file in read only mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 87.43937 cm
Q
q
1 0 0 1 40.01575 75.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_WRONLY \(0x02\)) Tj /F1 10 Tf ( Opens the file in write only mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 69.43937 cm
Q
q
1 0 0 1 40.01575 57.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_RDWR \(0x03\)) Tj /F1 10 Tf ( Opens the file in read/write mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
 
endstream
endobj
248 0 obj
<<
/Length 8448
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_CREAT \(0x04\)) Tj /F1 10 Tf ( Creates the file if it does not exist;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_APPEND \(0x08\)) Tj /F1 10 Tf ( In write mode, appends written text at the end of the file;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 751.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_TRUNC \(0x08\)) Tj /F1 10 Tf ( In write mode, deletes the content of the file as soon as it is opened.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.084481 Tw (It is mandatory to specify one of the first three modes. The fourth and the fifth modes are exclusive, you can not) Tj T* 0 Tw (specify O_APPEND if you specify O_TRUNC \(and vice versa\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .027705 Tw (You can specify a combination of modes by simply adding the integer values of those flags. For instance, if you want) Tj T* 0 Tw .425542 Tw (to open a file in write only mode and append the written text to the end of file, you should specify the mode 2 + 8 =) Tj T* 0 Tw (10.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .025641 Tw (The return value of the system call is the new file descriptor associated with the file, that can be further used with the) Tj T* 0 Tw (other system calls. If there is an error, the return value will be -1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 606.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 2 - close\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 588.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 2 expects only one parameter, the file descriptor of the file that is closed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .265479 Tw (If the operation ends successfully, SYSCALL 2 will return 0, otherwise it will return -1. Possible causes of failure are) Tj T* 0 Tw .079243 Tw (the attempt to close a non-existent file descriptor or the attempt to close file descriptors 0, 1 or 2, that are associated) Tj T* 0 Tw (respectively to standard input, standard output and standard error.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 516.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 3 - read\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 486.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .146005 Tw (SYSCALL 3 expects three parameters: the file descriptor to read from, the address where the read data must be put) Tj T* 0 Tw (into, the number of bytes to read.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 456.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .254337 Tw (If the first parameter is 0, the simulator will prompt the user for an input, via an input dialog. If the length of the input) Tj T* 0 Tw (is greater than the number of bytes that have to be read, the simulator will show again the message dialog.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 414.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .916205 Tw (It returns the number of bytes that have effectively been read, or -1 if the read operation fails. Possible causes of) Tj T* 0 Tw .030215 Tw (failure are the attempt to read from a non-existent file descriptor, the attempt to read from file descriptors 1 \(standard) Tj T* 0 Tw (output\) or 2 \(standard error\) or the attempt to read from a write-only file descriptor.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 383.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 4 - write\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 353.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .234426 Tw (SYSCALL 4 expects three parameters: the file descriptor to write to, the address where the data must be read from,) Tj T* 0 Tw (the number of bytes to write.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 335.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If the first parameter is two or three, the simulator will pop the input/output frame, and write there the read data.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 293.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .370671 Tw (It returns the number of bytes that have been written, or -1 if the write operation fails. Possible causes of failure are) Tj T* 0 Tw .889705 Tw (the attempt to write to a non-existent file descriptor, the attempt to write to file descriptor 0 \(standard input\) or the) Tj T* 0 Tw (attempt to write to a read-only file descriptor.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 5 - printf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 233.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .40245 Tw (SYSCALL 5 expects a variable number of parameters, the first being the address of the so-called \223format string\224. In) Tj T* 0 Tw (the format string can be included some placeholders, described in the following list:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 227.4394 cm
Q
q
1 0 0 1 40.01575 227.4394 cm
Q
q
1 0 0 1 40.01575 215.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%s) Tj /F1 10 Tf ( indicates a string parameter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 209.4394 cm
Q
q
1 0 0 1 40.01575 197.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%i) Tj /F1 10 Tf ( indicates an integer parameter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 191.4394 cm
Q
q
1 0 0 1 40.01575 179.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%d) Tj /F1 10 Tf ( behaves like ) Tj /F3 10 Tf (%i) Tj /F1 10 Tf (;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 173.4394 cm
Q
q
1 0 0 1 40.01575 161.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%%) Tj /F1 10 Tf ( literal ) Tj /F3 10 Tf (%) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 161.4394 cm
Q
q
1 0 0 1 40.01575 143.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (For each ) Tj /F3 10 Tf (%s) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (%d) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (%i) Tj /F1 10 Tf ( placeholder, SYSCALL 5 expects a parameter, starting from the address of the previous one.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 113.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .326711 Tw (When the SYSCALL finds a placeholder for an integer parameter, it expects that the corresponding parameter is an) Tj T* 0 Tw (integer value, when if it finds a placeholder for a string parameter, it expects as a parameter the address of the string.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The result is printed in the input/output frame, and the number of bytes written is put into R1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 77.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If there\222s an error, -1 is written to R1.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
 
endstream
endobj
249 0 obj
<<
/Length 6457
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Other instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 752.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In this section there are instructions that do not fit in the previous categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (BREAK) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.000795 Tw (The BREAK instruction throws an exception that has the effect to stop the execution if the simulator is running. It can) Tj T* 0 Tw (be used for debugging purposes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 661.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (NOP) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 643.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The NOP instruction does not do anything, and it\222s used to create gaps in the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 613.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (TRAP) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The TRAP instruction is a deprecated alias for the SYSCALL instruction.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 564.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (HALT) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The HALT instruction is a deprecated alias for the SYSCALL 0 instruction, that halts the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 493.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This chapter ) Tj /F1 8 Tf 0 0 .501961 rg 5 Ts (1) Tj /F1 10 Tf 0 0 0 rg 0 Ts ( describes the Floating Point Unit \(FPU\) emulated in EduMIPS64.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 463.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.696339 Tw (In the first paragraph we introduce the double format, the special floating point values defined in the IEEE 754) Tj T* 0 Tw (standard and the exceptions that floating point computations can raise.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 445.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In the second paragraph we explain how EduMIPS64 allows users to enable or disable the IEEE floating point traps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 415.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .278005 Tw (In the third paragraph we describe how double precision numbers and special values can be specified in the source) Tj T* 0 Tw (programs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 373.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.439116 Tw (In the fourth paragraph, we introduce the FCSR register, used by the FPU to represent its state. It contains) Tj T* 0 Tw .22094 Tw (information about rounding, the boolean results of comparison operations and the policies for handling IEEE floating) Tj T* 0 Tw (point exceptions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 343.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .585227 Tw (In the fifth and last paragraph, we present all the MIPS64 floating point instructions that have been implemented in) Tj T* 0 Tw (EduMIPS64.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 313.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .882006 Tw (Before starting the discussion about the FPU, we define the domain of floating point double precision numbers as) Tj T* 0 Tw ([-1.79E308,-4.94E-324] ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL ( {0} ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL ( [4.94E-324,1.79E308].) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 307.4394 cm
Q
q
1 0 0 1 40.01575 283.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.371902 Tw (This chapter is part of the Bachelor\222s degree thesis by Massimo Trubia: \223Progetto e) Tj T* 0 Tw (implementazione di un modello di Floating Point Unit per un simulatore di CPU MIPS64\224.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 283.4394 cm
Q
q
1 0 0 1 40.01575 250.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Special values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 208.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.398381 Tw (Floating point arithmetics allows the programmer to choose whether to stop the computation or not, if invalid) Tj T* 0 Tw .784947 Tw (operations are carried on. In this scenario, operations like the division between zeroes or square roots of negative) Tj T* 0 Tw (numbers must produce a result that, not being a number \(NaN\) is treated as somehting different.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 178.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (NaN or Invalid Operation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 112.2394 cm
q
BT 1 0 0 1 0 50 Tm 1.628864 Tw 12 TL /F1 10 Tf 0 0 0 rg (The IEEE Standard for Floating-Point Arithmetic \(IEEE 754\) defined that invalid arithmetic operations can either) Tj T* 0 Tw .474205 Tw (signal the error while the program is running \(using a trap for the IEEE exception ) Tj /F2 10 Tf (Invalid Operation) Tj /F1 10 Tf (\) or return as a) Tj T* 0 Tw 1.212006 Tw (result the special value QNan \(Quit Not a Number\). Another NaN value, that inconditionally raises the same trap) Tj T* 0 Tw .609243 Tw (once it is detected as being one of the operands, is SNan \(Signalling Not a Number\). This value is seldom used in) Tj T* 0 Tw (applications, and historically it has been used to initialize variables.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
 
endstream
endobj
250 0 obj
<<
/Length 8286
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Zeroes or Underflows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 706.6394 cm
q
BT 1 0 0 1 0 50 Tm 1.637058 Tw 12 TL /F1 10 Tf 0 0 0 rg (Another special value defined by the standard is zero. Since the double format does not include the zero in its) Tj T* 0 Tw 1.006385 Tw (domain, it is considered a special value. There is a positive zero and a negative zero: the former is used when a) Tj T* 0 Tw .168476 Tw (representation of a negative number ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( ]-4.94E-324,0[\) is attempted, and a result is required \(as opposed to allowing) Tj T* 0 Tw .062847 Tw (an ) Tj /F2 10 Tf (Underflow) Tj /F1 10 Tf ( trap\), while the latter is used when the number that should be represented is ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,4.94E-324[, and the) Tj T* 0 Tw (Underflow trap is disabled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 676.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Infinites or Overflows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 634.2394 cm
q
BT 1 0 0 1 0 26 Tm 2.767756 Tw 12 TL /F1 10 Tf 0 0 0 rg (When a program attempts to represent a value with an extremely large absolute value \() Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( ]-) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (,-1.79E308[ ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL T* 0 Tw .745479 Tw (]1.79E308,+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ([\), that is outside the domain of double values, the CPU returns either -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( or +) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (. The alternative is to) Tj T* 0 Tw (trigger a trap for the exceptional ) Tj /F2 10 Tf (Overflow) Tj /F1 10 Tf ( condition.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 604.2394 cm
q
BT 1 0 0 1 0 14 Tm .184337 Tw 12 TL /F1 10 Tf 0 0 0 rg (Infinites can also be returned in case of a division by zero; in that case the sign of the infinite is given by the product) Tj T* 0 Tw (of the sign of the zero and the sign of the dividend. The ) Tj /F2 10 Tf (Divide by zero) Tj /F1 10 Tf ( trap can be alternatively raised.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 571.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Exception configuration) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.4394 cm
q
BT 1 0 0 1 0 26 Tm 2.456005 Tw 12 TL /F1 10 Tf 0 0 0 rg (EduMIPS64 allows the user to enable or disable the traps for 4 of the 5 IEEE exceptions, through the ) Tj /F3 10 Tf (FPU) Tj T* 0 Tw .709689 Tw (Exceptions) Tj /F1 10 Tf ( tab in the ) Tj /F3 10 Tf (Configure) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\256) Tj /F1 10 Tf 12 TL ( ) Tj /F3 10 Tf (Settings) Tj /F1 10 Tf ( window. If any of them is disabled, the respective special value will be) Tj T* 0 Tw (returned \(as described in ) Tj (Special values) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 496.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The .double directive) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 466.6394 cm
q
BT 1 0 0 1 0 14 Tm .119243 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F4 10 Tf (.double) Tj /F1 10 Tf ( directive must be used in the ) Tj /F4 10 Tf (.data) Tj /F1 10 Tf ( section of source files, and allows to allocate a memory cell for a) Tj T* 0 Tw /F3 10 Tf (double) Tj /F1 10 Tf ( value.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 448.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The directive can be used in 2 ways:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (variable-name: .double double_number) Tj T* (variable-name: .double keyword) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 373.8394 cm
q
BT 1 0 0 1 0 26 Tm 5.674508 Tw 12 TL /F1 10 Tf 0 0 0 rg (where ) Tj /F4 10 Tf (double_number) Tj /F1 10 Tf ( can be represented either in extended notation \() Tj /F4 10 Tf (1.0,0.003) Tj /F1 10 Tf (\), or in scientific) Tj T* 0 Tw 4.660682 Tw (notation\() Tj /F4 10 Tf (3.7E-12,0.5E32) Tj /F1 10 Tf (\). ) Tj /F4 10 Tf (keyword) Tj /F1 10 Tf ( can be ) Tj /F4 10 Tf (POSITIVEINFINITY) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (NEGATIVEINFINITY) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (POSITIVEZERO) Tj /F1 10 Tf (,) Tj T* 0 Tw /F4 10 Tf (NEGATIVEZERO) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (SNAN) Tj /F1 10 Tf ( e ) Tj /F4 10 Tf (QNAN) Tj /F1 10 Tf (, thus allowing to directly insert in memory the special values.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 341.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The FCSR register) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 311.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .067888 Tw (The FCSR \(Floating point Control Status Register\) is the register that controls several functional aspects of the FPU.) Tj T* 0 Tw (It is 32 bits long and it is represented in the statistics window.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 281.0394 cm
q
BT 1 0 0 1 0 14 Tm .464205 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (FCC) Tj /F1 10 Tf ( field is 8 bits wide, from 0 to 7. The conditional instructions \() Tj /F4 10 Tf (C.EQ.D,C.LT.D) Tj /F1 10 Tf (\) use it to save the boolean) Tj T* 0 Tw (result of comparisons between two registers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 239.0394 cm
q
BT 1 0 0 1 0 26 Tm .686123 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Cause, Enables and Flag fields handle the dynamics of IEEE exceptions described in ) Tj (Special values) Tj (. Each of) Tj T* 0 Tw -0.107295 Tw (them is composed of 5 bits, V \(Invalid Operation\), Z \(Divide by Zero\), O \(Overflow\), U \(Underflow\) and I \(Inexact\); the) Tj T* 0 Tw (latter is not yet used.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 221.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Clause) Tj /F1 10 Tf ( field bits are set if the corresponding IEEE exceptions occur during the execution of a program.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 191.0394 cm
q
BT 1 0 0 1 0 14 Tm .926339 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Enable) Tj /F1 10 Tf ( field bits are set through the configuration window and show the IEEE exceptions for which traps are) Tj T* 0 Tw (enabled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 161.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.159672 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Flag) Tj /F1 10 Tf ( field shows the exceptions that have happened but, since the trap is not enabled for that particular) Tj T* 0 Tw (exception, have returned special values \(the ones described in ) Tj (Special values) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 131.0394 cm
q
BT 1 0 0 1 0 14 Tm .649116 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (RM) Tj /F1 10 Tf ( field describes the rounding method currently in use to convert floating point numbers to integers \(see the) Tj T* 0 Tw (description of the ) Tj /F4 10 Tf (CVT.L.D) Tj /F1 10 Tf ( instruction\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 98.23937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Instruction set) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 56.23937 cm
q
BT 1 0 0 1 0 26 Tm .335606 Tw 12 TL /F1 10 Tf 0 0 0 rg (This section describes the MIPS64 FPU instruction implemented by EduMIPS64; they are listed in alphabetic order.) Tj T* 0 Tw -0.029217 Tw (The operations performed by the instruction are described using a notation according to which the i-th memory cell is) Tj T* 0 Tw (represented as ) Tj /F4 10 Tf (memory[i]) Tj /F1 10 Tf (, and the FCC fields of the FCSR register are ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (cc) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,7].) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
 
endstream
endobj
251 0 obj
<<
/Length 8846
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 727.0394 cm
q
BT 1 0 0 1 0 50 Tm .920783 Tw 12 TL /F1 10 Tf 0 0 0 rg (In some instructions, to avoid ambiguity, the registers are represented as ) Tj /F4 10 Tf (GPR[i]) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (FPR[i]) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (i) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,31], but in) Tj T* 0 Tw .438439 Tw (most cases we just use the ) Tj /F4 10 Tf (rx) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (fx) Tj /F1 10 Tf ( notation, with ) Tj /F4 10 Tf (x) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( {d,s,t}. The three letters are used to indicate the purpose of) Tj T* 0 Tw .596721 Tw (each register \(destination, source, third\). Lastly, the values returned by conversion operations are represented with) Tj T* 0 Tw 15.65482 Tw (the following notation: ) Tj /F4 10 Tf (convert_conversiontype\(register[,rounding_type]\)) Tj /F1 10 Tf (, where the) Tj T* 0 Tw /F4 10 Tf (rounding_type) Tj /F1 10 Tf ( parameter is optional.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
q
BT 1 0 0 1 0 14 Tm 33.21301 Tw 12 TL /F1 10 Tf 0 0 0 rg (Some examples for the FPU instructions are available at) Tj T* 0 Tw /F4 10 Tf (http://www.edumips.org/attachment/wiki/Upload/FPUMaxSamples.rar) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 631.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADD.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (+) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .355606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Overflow and underflow traps are generated if the result cannot be represented according to IEEE) Tj T* 0 Tw (754. Invalid operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation \(+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( - ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\) is executed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 490.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BC1F cc, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (branch) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf ( is false, do a PC-relative branch.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.EQ.D 7,f1,f2) Tj T* (BC1F 7,label) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.109814 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.EQ.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf ( are equal, writing the results of the comparison in the 7th bit of the) Tj T* 0 Tw (FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1F) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (label) Tj /F1 10 Tf ( if the result of the comparison is 0 \(false\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 484.2394 cm
Q
q
1 0 0 1 40.01575 349.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BC1T cc, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (1) Tj ( ) Tj (then) Tj ( ) Tj (branch) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf ( is true, do a PC-relative branch.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.EQ.D 7,f1,f2) Tj T* (BC1T 7,label) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.109814 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.EQ.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf ( are equal, writing the results of the comparison in the 7th bit of the) Tj T* 0 Tw (FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1F) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (label) Tj /F1 10 Tf ( if the result of the comparison is 1 \(false\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 343.4394 cm
Q
q
1 0 0 1 40.01575 253.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (C.EQ.D cc, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj ( ) Tj (=) Tj ( ) Tj (\(fs==ft\)) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 14 Tm -0.125048 Tw 12 TL /F1 10 Tf 0 0 0 rg (Checks if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( is equal to ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf (, and saves the result of the comparison in ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (. See examples for ) Tj /F4 10 Tf (BC1T) Tj /F1 10 Tf (,) Tj T* 0 Tw /F4 10 Tf (BC1F) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .069205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Invalid Operation can be thrown if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf ( contain QNaN \(trap is triggered if it is enabled\) o SNaN) Tj T* 0 Tw (\(trap is always triggered\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 247.4394 cm
Q
q
1 0 0 1 40.01575 82.63937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 149.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 149.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (C.LT.D cc, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 131.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj ( ) Tj (=) Tj ( ) Tj (\(fs) Tj (<) Tj (ft\)) Tj T* ET
Q
Q
q
1 0 0 1 23 113.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Checks if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( is smaller than ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf (, and saves the result of the comparison in ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 23 95.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.LT.D 2,f1,f2) Tj T* (BC1T 2,target) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 14 Tm .269205 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.LT.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( is smaller than ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf (, and saves the result of the comparison in the second) Tj T* 0 Tw (bit of the FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1T) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (target) Tj /F1 10 Tf ( if that bit is set to 1.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .069205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Invalid Operation can be thrown if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf ( contain QNaN \(trap is triggered if it is enabled\) o SNaN) Tj T* 0 Tw (\(trap is always triggered\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 76.63937 cm
Q
q
1 0 0 1 40.01575 64.63937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.D.L fd, fs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
 
endstream
endobj
252 0 obj
<<
/Length 10754
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 628.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 145.8 Tm  T* ET
q
1 0 0 1 23 143.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_longToDouble\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a long to a double.) Tj T* ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 77 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (DMTC1 r6,f5) Tj T* (CVT.D.L f5,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 38 Tm .363205 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (DMTC1) Tj /F1 10 Tf ( copies the value of GPR r6 to FPR f5; after that ) Tj /F4 10 Tf (CVT.D.L) Tj /F1 10 Tf ( converts the value stored in) Tj T* 0 Tw 2.240215 Tw (f5 from long to double. If for instance r6 contains the value 52, after the execution of ) Tj /F4 10 Tf (DMTC1) Tj /F1 10 Tf ( the binary) Tj T* 0 Tw -0.001524 Tw (representation of 52 gets copied to f5. After the execution of ) Tj /F4 10 Tf (CVT.D.L) Tj /F1 10 Tf (, f5 contains the IEEE 754 representation) Tj T* 0 Tw (of 52.0.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains QNaN, SNaN or an infinite.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 622.2394 cm
Q
q
1 0 0 1 40.01575 427.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 179.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 179.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.D.W fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 161.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_IntToDouble\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 143.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts an int to a double.) Tj T* ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 95 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (MTC1 r6,f5) Tj T* (CVT.D.W f5,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 14 Tm -0.051996 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( copies the lower 32 bit of the GPR r6 into the FPR f5. Then, ) Tj /F4 10 Tf (CVT.D.W) Tj /F1 10 Tf (, reads f5 as an int,) Tj T* 0 Tw (and converts it to double.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 26 Tm 1.714508 Tw 12 TL /F1 10 Tf 0 0 0 rg (If we had ) Tj /F4 10 Tf (r6=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (, after the execution of ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( we get ) Tj /F4 10 Tf (f5=0xXXXXXXXXBBBBBBBB) Tj /F1 10 Tf (; its) Tj T* 0 Tw 2.22894 Tw (upper 32 bits \() Tj /F4 10 Tf (XX..X) Tj /F1 10 Tf (\) are now UNDEFINED \(haven\222t been overwritten\). ) Tj /F4 10 Tf (CVT.D.W) Tj /F1 10 Tf ( interprets f5 as an int) Tj T* 0 Tw (\() Tj /F4 10 Tf (f5=-1145324613) Tj /F1 10 Tf (\), and converts it to double\() Tj /F4 10 Tf (f5=0xC1D1111111400000 =-1.145324613E9) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains QNaN, SNaN or an infinite.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 421.4394 cm
Q
q
1 0 0 1 40.01575 286.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.L.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_doubleToLong\(fs,) Tj ( ) Tj (CurrentRoundingMode\)) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a double to a long, rounding it before the conversion.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (CVT.L.D f5,f5) Tj T* (DMFC1 r6,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .581624 Tw 12 TL /F4 10 Tf 0 0 0 rg (CVT.L.D) Tj /F1 10 Tf ( the double value in f5 to a long; then ) Tj /F4 10 Tf (DMFC1) Tj /F1 10 Tf ( copies f5 to r6; the result of this operation depends on) Tj T* 0 Tw (the current rounding modality, that can be set in the ) Tj /F3 10 Tf (FPU Rounding) Tj /F1 10 Tf ( tab of the ) Tj /F3 10 Tf (Configure) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\256) Tj /F1 10 Tf 12 TL ( ) Tj /F3 10 Tf (Settings) Tj /F1 10 Tf ( window.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 286.6394 cm
Q
q
1 0 0 1 40.01575 280.6394 cm
Q
q
1 0 0 1 40.01575 250.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 200.61 0 Td 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Rounding examples) Tj T* -200.61 0 Td ET
Q
Q
q
1 0 0 1 40.01575 66.23937 cm
1 1 1 rg
n 0 178 515.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 162 515.2441 -18 re f*
1 1 1 rg
n 0 144 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 126 515.2441 -18 re f*
1 1 1 rg
n 0 108 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 90 515.2441 -18 re f*
1 1 1 rg
n 0 72 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 515.2441 -18 re f*
1 1 1 rg
n 0 36 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 515.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 178 515.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 165 cm
q
.960784 .960784 .862745 rg
n 0 0 139.5424 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 59.21619 0 Td (Tipo) Tj T* -59.21619 0 Td ET
Q
Q
q
1 0 0 1 157.5424 165 cm
q
.960784 .960784 .862745 rg
n 0 0 89.02825 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 25.06913 0 Td (RM field) Tj T* -25.06913 0 Td ET
Q
Q
q
1 0 0 1 258.5706 165 cm
q
.960784 .960784 .862745 rg
n 0 0 119.3367 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 35.49336 0 Td (f5 register) Tj T* -35.49336 0 Td ET
Q
Q
q
1 0 0 1 389.9074 165 cm
q
.960784 .960784 .862745 rg
n 0 0 119.3367 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 35.21336 0 Td (r6 register) Tj T* -35.21336 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.4) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.8) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.5) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6 \(to even\)) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7.5) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8 \(to even\)) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards 0) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7.1) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards 0) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-2.3) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-2) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4.2) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3.9) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4.2) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 515.2441 0 l S
n 0 162 m 515.2441 162 l S
n 0 144 m 515.2441 144 l S
n 0 126 m 515.2441 126 l S
n 0 108 m 515.2441 108 l S
n 0 90 m 515.2441 90 l S
n 0 72 m 515.2441 72 l S
n 0 54 m 515.2441 54 l S
n 0 36 m 515.2441 36 l S
n 0 18 m 515.2441 18 l S
n 151.5424 0 m 151.5424 178 l S
n 252.5706 0 m 252.5706 178 l S
n 383.9074 0 m 383.9074 178 l S
n 0 178 m 515.2441 178 l S
n 0 0 m 0 178 l S
n 515.2441 0 m 515.2441 178 l S
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
 
endstream
endobj
253 0 obj
<<
/Length 9285
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 769.0394 cm
1 1 1 rg
n 0 18 515.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3.9) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 18 m 515.2441 18 l S
n 151.5424 0 m 151.5424 18 l S
n 252.5706 0 m 252.5706 18 l S
n 383.9074 0 m 383.9074 18 l S
n 0 0 m 0 18 l S
n 515.2441 0 m 515.2441 18 l S
n 0 0 m 515.2441 0 l S
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.W.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_DoubleToInt\(fs,) Tj ( ) Tj (CurrentRoundingMode\)) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a double to an int, using the current rounding modality.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.224116 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains an infinite value, any NaN or the results is outside the) Tj T* 0 Tw (signed int domain [-2 ) Tj /F1 8 Tf 5 Ts (63) Tj /F1 10 Tf 0 Ts (, 2 ) Tj /F1 8 Tf 5 Ts (63) Tj /F1 10 Tf 0 Ts ( -1]) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 607.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIV.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (\\div) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm -0.047869 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Overflow or Underflow are raised if the results cannot be represented using the IEEE 754 standard.) Tj T* 0 Tw .634705 Tw (Invalid Operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation is executed \(0div0,) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( div) Tj T* 0 Tw /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\). Divide by zero is raised if a division by zero is attempted with a dividend that is not QNaN or SNaN.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMFC1 rt,fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (rt) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bit per bit copy of the FPR fs into the GPR rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 499.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMTC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fs) Tj ( ) Tj (=) Tj ( ) Tj (rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bit per bit copy of the GPR rt into the FPR fs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 493.0394 cm
Q
q
1 0 0 1 40.01575 445.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (L.D ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (ft) Tj ( ) Tj (=) Tj ( ) Tj (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a doubleword and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 445.0394 cm
Q
q
1 0 0 1 40.01575 433.0394 cm
Q
q
1 0 0 1 40.01575 364.2394 cm
.933333 .933333 .933333 rg
n 0 68.8 515.2441 -68.8 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 50.8 Tm  T* ET
q
1 0 0 1 8 44 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.8 Tm /F5 14 Tf 16.8 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 8 8 cm
q
BT 1 0 0 1 0 14 Tm .584004 Tw 12 TL /F3 10 Tf 0 0 0 rg (L.D) Tj /F1 10 Tf ( is not present in the MIPS64 ISA, it is an alias for ) Tj /F4 10 Tf (LDC1) Tj /F1 10 Tf ( that is present in EduMIPS64 for compatibility with) Tj T* 0 Tw (WinMIPS64.) Tj T* ET
Q
Q
q
1 J
1 j
.8 .8 .8 RG
.5 w
n 0 68.8 m 515.2441 68.8 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 68.8 l S
n 515.2441 0 m 515.2441 68.8 l S
Q
Q
q
1 0 0 1 40.01575 358.2394 cm
Q
q
1 0 0 1 40.01575 352.2394 cm
Q
q
1 0 0 1 40.01575 352.2394 cm
Q
q
1 0 0 1 40.01575 304.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LDC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a doubleword and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 298.2394 cm
Q
q
1 0 0 1 40.01575 250.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LWC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (ft) Tj ( ) Tj (=) Tj ( ) Tj (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a word and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 244.2394 cm
Q
q
1 0 0 1 40.01575 103.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (rt) Tj ( ) Tj (=) Tj ( ) Tj (readInt\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 89.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Reads the fs FPR as an int and writes its value to the rt GPR as long. ) Tj /F3 10 Tf (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (MFC1 r6,f5) Tj T* (SD r6,mem\(R0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 4.249546 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let ) Tj /F4 10 Tf (f5=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (; ) Tj /F4 10 Tf (MFC1) Tj /F1 10 Tf ( reads f5 as an int \(lower 32 bits\), interpreting ) Tj /F4 10 Tf (BBBBBBBB) Tj /F1 10 Tf ( as) Tj T* 0 Tw .014273 Tw /F4 10 Tf (-1145324613) Tj /F1 10 Tf (, and writes the value to f6 \(64 bits\). After the execution of ) Tj /F4 10 Tf (MFC1) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (r6=0xFFFFFFFFBBBBBBBB) Tj ( ) Tj (=) Tj T* 0 Tw .010742 Tw (-1145324613) Tj /F1 10 Tf (. So the ) Tj /F4 10 Tf (SD) Tj /F1 10 Tf ( instruction will write to memory a doubleword with this value, since the sign in r6 was) Tj T* 0 Tw (extended.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 97.43937 cm
Q
q
1 0 0 1 40.01575 67.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVF.D fd, fs, cc) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 -1 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If FCSR_FCC[cc] is false, the copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
 
endstream
endobj
254 0 obj
<<
/Length 8291
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 739.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVT.D fd, fs, cc) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (1) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If FCSR_FCC[cc] is true, the copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOV.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 631.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVN.D fd, fs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (rt) Tj ( ) Tj (!=) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is not zero, copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 577.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVZ.D fd, fs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (rt) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is equal to zero, copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 577.0394 cm
Q
q
1 0 0 1 40.01575 571.0394 cm
Q
q
1 0 0 1 40.01575 571.0394 cm
Q
q
1 0 0 1 40.01575 448.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 107.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MTC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 89.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( fs = rt ) Tj /F1 8 Tf -5 Ts (0..31) Tj T* ET
Q
Q
q
1 0 0 1 23 71.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies the lower 32 bit of rt to fs.) Tj T* ET
Q
Q
q
1 0 0 1 23 53.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (MTC1 r6,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.008206 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let ) Tj /F4 10 Tf (r5=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (; ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( reads the lower 32 bits of r5 copying them to the 32 lower bits of f5. The) Tj T* 0 Tw (higher 32 bits of f5 are not overwritten.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 442.2394 cm
Q
q
1 0 0 1 40.01575 370.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MUL.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (\327) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm -0.047869 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Overflow or Underflow are raised if the results cannot be represented using the IEEE 754 standard.) Tj T* 0 Tw .234481 Tw (Invalid Operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation is executed \(multiply by ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* 0 Tw (OR BY QNaN\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 364.2394 cm
Q
q
1 0 0 1 40.01575 316.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (S.D ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 316.2394 cm
Q
q
1 0 0 1 40.01575 304.2394 cm
Q
q
1 0 0 1 40.01575 235.4394 cm
.933333 .933333 .933333 rg
n 0 68.8 515.2441 -68.8 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 50.8 Tm  T* ET
q
1 0 0 1 8 44 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.8 Tm /F5 14 Tf 16.8 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 8 8 cm
q
BT 1 0 0 1 0 14 Tm .531147 Tw 12 TL /F3 10 Tf 0 0 0 rg (S.D) Tj /F1 10 Tf ( is not present in the MIPS64 ISA, it is an alias for ) Tj /F4 10 Tf (SDC1) Tj /F1 10 Tf ( that is present in EduMIPS64 for compatibility with) Tj T* 0 Tw (WinMIPS64.) Tj T* ET
Q
Q
q
1 J
1 j
.8 .8 .8 RG
.5 w
n 0 68.8 m 515.2441 68.8 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 68.8 l S
n 515.2441 0 m 515.2441 68.8 l S
Q
Q
q
1 0 0 1 40.01575 229.4394 cm
Q
q
1 0 0 1 40.01575 223.4394 cm
Q
q
1 0 0 1 40.01575 223.4394 cm
Q
q
1 0 0 1 40.01575 175.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SDC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 169.4394 cm
Q
q
1 0 0 1 40.01575 109.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUB.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs-ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .355606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Overflow and underflow traps are generated if the result cannot be represented according to IEEE) Tj T* 0 Tw (753. Invalid operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation \(+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( - ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\) is executed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 103.4394 cm
Q
q
1 0 0 1 40.01575 55.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SWC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies the lower 32 bits of ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.43937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
 
endstream
endobj
255 0 obj
<<
/Length 9779
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 767.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 737.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.144116 Tw (The GUI of EduMIPS64 is inspired to WinMIPS64 user interface. In fact, the main window is identical, except for) Tj T* 0 Tw (some menus.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 683.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.453182 Tw (The EduMIPS64 main window is composed by a menu bar and six frames, showing different aspects of the) Tj T* 0 Tw .146531 Tw (simulation. There\222s also a status bar, that has the double purpose to show the content of memory cells and registers) Tj T* 0 Tw .916705 Tw (when you click them and to notify the user that the simulator is running when the simulation has been started but) Tj T* 0 Tw (verbose mode is not selected.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 665.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The status bar also shows the CPU status. It can show one of the following four states:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 659.8394 cm
Q
q
1 0 0 1 40.01575 659.8394 cm
Q
q
1 0 0 1 40.01575 647.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (READY) Tj /F1 10 Tf ( The CPU hasn\222t executed any instructions \(no program is loaded\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 641.8394 cm
Q
q
1 0 0 1 40.01575 629.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (RUNNING) Tj /F1 10 Tf ( The CPU is executing a series of instructions.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 623.8394 cm
Q
q
1 0 0 1 40.01575 599.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .647756 Tw 12 TL /F3 10 Tf 0 0 0 rg (STOPPING) Tj /F1 10 Tf ( The CPU has found a termination instruction, and is executing the instructions that are already in) Tj T* 0 Tw (the pipeline before terminating the execution.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 593.8394 cm
Q
q
1 0 0 1 40.01575 581.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (HALTED) Tj /F1 10 Tf ( The CPU is stopped: a program just finished running.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 581.8394 cm
Q
q
1 0 0 1 40.01575 527.8394 cm
q
BT 1 0 0 1 0 38 Tm .382847 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the CPU status is different from the simulator status. The simulator may execute a number of CPU cycles) Tj T* 0 Tw .556339 Tw (and then stop executing, allowing the user to inspect memory and registers: in this state, between CPU cycles, the) Tj T* 0 Tw .836339 Tw (CPU stays in ) Tj /F3 10 Tf (RUNNING) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (STOPPING) Tj /F1 10 Tf ( state. Once the CPU reaches the ) Tj /F3 10 Tf (HALTED) Tj /F1 10 Tf ( state, the user cannot run any) Tj T* 0 Tw (CPU cycle without loading a program again \(the same program, or a different one\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 509.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are more details in the following sections.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 477.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The menu bar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 459.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The menu bar contains six menus:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 428.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (File) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 410.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The File menu contains menu items about opening files, resetting or shutting down the simulator, writing trace files.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 404.6394 cm
Q
q
1 0 0 1 40.01575 404.6394 cm
Q
q
1 0 0 1 40.01575 392.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Open\205) Tj /F1 10 Tf ( Opens a dialog that allows the user to choose a source file to open.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 386.6394 cm
Q
q
1 0 0 1 40.01575 362.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .267205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Open recent) Tj /F1 10 Tf ( Shows the list of the recent files opened by the simulator, from which the user can choose the file) Tj T* 0 Tw (to open) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 356.6394 cm
Q
q
1 0 0 1 40.01575 344.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Reset) Tj /F1 10 Tf ( Resets the simulator, keeping open the file that was loaded but resetting the execution.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 338.6394 cm
Q
q
1 0 0 1 40.01575 326.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Write Dinero Tracefile\205) Tj /F1 10 Tf ( Writes the memory access data to a file, in xdin format.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 320.6394 cm
Q
q
1 0 0 1 40.01575 308.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exit) Tj /F1 10 Tf ( Closes the simulator.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 308.6394 cm
Q
q
1 0 0 1 40.01575 278.6394 cm
q
BT 1 0 0 1 0 14 Tm .557058 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Write Dinero Tracefile\205) Tj /F1 10 Tf ( menu item is only available when a whole source file has been executed and the end) Tj T* 0 Tw (has been already reached.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 248.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Execute) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 230.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Execute menu contains menu items regarding the execution flow of the simulation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 224.2394 cm
Q
q
1 0 0 1 40.01575 224.2394 cm
Q
q
1 0 0 1 40.01575 212.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Single Cycle) Tj /F1 10 Tf ( Executes a single simulation step) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 206.2394 cm
Q
q
1 0 0 1 40.01575 182.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.654631 Tw 12 TL /F3 10 Tf 0 0 0 rg (Run) Tj /F1 10 Tf ( Starts the execution, stopping when the simulator reaches a ) Tj /F3 10 Tf (SYSCALL 0) Tj /F1 10 Tf ( \(or equivalent\) or a ) Tj /F3 10 Tf (BREAK) Tj /F1 10 Tf  T* 0 Tw (instruction, or when the user clicks the Stop menu item \(or presses F9\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 176.2394 cm
Q
q
1 0 0 1 40.01575 152.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.431606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Multi Cycle) Tj /F1 10 Tf ( Executes some simulation steps. The number of steps executed can be configured through the) Tj T* 0 Tw (Setting dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 152.2394 cm
Q
q
1 0 0 1 40.01575 146.2394 cm
Q
q
1 0 0 1 40.01575 146.2394 cm
Q
q
1 0 0 1 40.01575 134.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Stop) Tj /F1 10 Tf ( Stops the execution when the simulator is in \223Run\224 or \223Multi cycle\224 mode, as described previously.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 134.2394 cm
Q
q
1 0 0 1 40.01575 104.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.076178 Tw 12 TL /F1 10 Tf 0 0 0 rg (This menu is only available when a source file is loaded and the end of the simulation is not reached. The ) Tj /F3 10 Tf (Stop) Tj /F1 10 Tf ( menu) Tj T* 0 Tw (item is available only in \223Run\224 or \223Multi Cycle\224 mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 74.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.284672 Tw (Note that the simulator slows down when updating the UI. If you want to execute long \(thousands of cycles\)) Tj T* 0 Tw (programs quickly, disable the \223Sync graphics with CPU in multi-step execution\224 option.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
 
endstream
endobj
256 0 obj
<<
/Length 7894
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Configure) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 754.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Configure menu provides facilities for customizing EduMIPS64 appearance and behavior.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 748.6394 cm
Q
q
1 0 0 1 40.01575 748.6394 cm
Q
q
1 0 0 1 40.01575 736.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Settings\205) Tj /F1 10 Tf ( Opens the Settings dialog, described in the next sections of this chapter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 730.6394 cm
Q
q
1 0 0 1 40.01575 694.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .714631 Tw 12 TL /F3 10 Tf 0 0 0 rg (Change Language) Tj /F1 10 Tf ( Allows the user to change the language used by the user interface. Currently only English) Tj T* 0 Tw .127205 Tw (and Italian are supported. This change affects every aspect of the GUI, from the title of the frames to the online) Tj T* 0 Tw (manual and warning/error messages.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 694.6394 cm
Q
q
1 0 0 1 40.01575 664.6394 cm
q
BT 1 0 0 1 0 14 Tm .149163 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Settings\205) Tj /F1 10 Tf ( menu item is not available when the simulator is in \223Run\224 or \223Multi Cycle\224 mode, because of potential) Tj T* 0 Tw (race conditions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 634.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Tools) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 616.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains only an item, used to invoke the Dinero Frontend dialog.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 598.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Dinero Frontend\205) Tj /F1 10 Tf ( Opens the Dinero Frontend dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 598.2394 cm
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu is not available until you have not executed a program and the execution has reached its end.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 549.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Window) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 531.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains items related to operations with frames.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 525.8394 cm
Q
q
1 0 0 1 40.01575 525.8394 cm
Q
q
1 0 0 1 40.01575 501.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .194277 Tw 12 TL /F3 10 Tf 0 0 0 rg (Tile) Tj /F1 10 Tf ( Sorts the visible windows so that no more that three frames are put in a row. It tries to maximize the space) Tj T* 0 Tw (occupied by every frame.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 501.8394 cm
Q
q
1 0 0 1 40.01575 483.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The other menu items simply toggle the status of each frame, making them visible or minimizing them.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 453.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 435.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains help-related menu items.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 429.4394 cm
Q
q
1 0 0 1 40.01575 429.4394 cm
Q
q
1 0 0 1 40.01575 417.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Manual\205) Tj /F1 10 Tf ( Shows the Help dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 411.4394 cm
Q
q
1 0 0 1 40.01575 399.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (About us\205) Tj /F1 10 Tf ( Shows a cute dialog that contains the names of the project contributors, along with their roles.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 399.4394 cm
Q
q
1 0 0 1 40.01575 366.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Frames) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 348.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The GUI is composed by seven frames, six of which are visible by default, and one \(the I/O frame\) is hidden.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 318.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Cycles) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 288.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.9773 Tw (The Cycles frame shows the evolution of the execution flow during time, showing for each time slot which) Tj T* 0 Tw (instructions are in the pipeline, and in which stage of the pipeline they are located.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 257.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Registers) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 215.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .417705 Tw (The Registers frame shows the content of each register. By left-clicking on them you can see in the status bar their) Tj T* 0 Tw .056205 Tw (decimal \(signed\) value, while double-clicking on them will pop up a dialog that allows the user to change the value of) Tj T* 0 Tw (the register.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 185.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Statistics) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 167.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Statistics frame shows some statistics about the program execution.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 125.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .586894 Tw (Note that during the last execution cycle the cycles counter is not incremented, because the last execution cycle is) Tj T* 0 Tw .279205 Tw (not a full CPU cycle but rather a pseudo-cycle whose only duties are to remove the last instruction from the pipeline) Tj T* 0 Tw (and increment the counter of executed instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Pipeline) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.439653 Tw (The Pipeline frame shows the actual status of the pipeline, showing which instruction is in which pipeline stage.) Tj T* 0 Tw (Different colors highlight different pipeline stages.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
 
endstream
endobj
257 0 obj
<<
/Length 7015
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Memory) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 718.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.740256 Tw (The Memory frame shows memory cells content, along with labels and comments taken from the source code.) Tj T* 0 Tw .788476 Tw (Memory cells content, like registers, can be modified double-clicking on them, and clicking on them will show their) Tj T* 0 Tw .001268 Tw (decimal value in the status bar. The first column shows the hexadecimal address of the memory cell, and the second) Tj T* 0 Tw (column shows the value of the cell. Other columns show additional info from the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 688.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Code) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 646.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .590829 Tw (The Code window shows the instructions loaded in memory. The first column shows the address of the instruction,) Tj T* 0 Tw .636721 Tw (while the second column shows the hexadecimal representation of the instructions. Other columns show additional) Tj T* 0 Tw (info taken from the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 615.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Input/Output) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 573.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .708005 Tw (The Input/Output window provides an interface for the user to see the output that the program creates through the) Tj T* 0 Tw -0.024413 Tw (SYSCALLs 4 and 5. Actually it is not used for input, as there\222s a dialog that pops up when a SYSCALL 3 tries to read) Tj T* 0 Tw (from standard input, but future versions will include an input text box.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 541.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Dialogs) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .938637 Tw (Dialogs are used by EduMIPS64 to interact with the user in many ways. Here\222s a summary of the most important) Tj T* 0 Tw (dialogs:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 480.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Settings) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 438.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .409689 Tw (In the Settings dialog various aspects of the simulator can be configured. Clicking on the \223OK\224 button will cause the) Tj T* 0 Tw .353373 Tw (options to be saved, while clicking on \223Cancel\224 \(or simply closing the window\) will cause the changes to be ignored.) Tj T* 0 Tw (Don\222t forget to click \223OK\224 if you want to save your changes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 420.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Main Settings tab allow to configure forwarding and the number of steps in the Multi Cycle mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 342.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.359672 Tw (The Behavior tab allow to enable or disable warnings during the parsing phase, the \223Sync graphics with CPU in) Tj T* 0 Tw .632273 Tw (multi-step execution\224 option, when checked, will synchronize the frames\222 graphical status with the internal status of) Tj T* 0 Tw .3239 Tw (the simulator. This means that the simulation will be slower, but you\222ll have an explicit graphical feedback of what is) Tj T* 0 Tw 1.285881 Tw (happening during the simulation. If this option is checked, the \223Interval between cycles\224 option will influence how) Tj T* 0 Tw 1.441417 Tw (many milliseconds the simulator will wait before starting a new cycle. Those options are effective only when the) Tj T* 0 Tw (simulation is run using the \223Run\224 or the \223Multi Cycle\224 options from the Execute menu.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 240.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 2.409116 Tw (The last two options set the behavior of the simulator when a synchronous exception is raised. If the \223Mask) Tj T* 0 Tw 2.44894 Tw (synchronous exceptions\224 option is checked, the simulator will ignore any Division by zero or Integer overflow) Tj T* 0 Tw 2.953381 Tw (exception. If the \223Terminate on synchronous exception\224 option is checked, the simulation will be halted if a) Tj T* 0 Tw .25894 Tw (synchronous exception is raised. Please note that if synchronous exceptions are masked, nothing will happen, even) Tj T* 0 Tw .116005 Tw (if the termination option is checked. If exceptions are not masked and the termination option is not checked, a dialog) Tj T* 0 Tw 1.287913 Tw (will pop out, but the simulation will go on as soon as the dialog is closed. If exceptions are not masked and the) Tj T* 0 Tw 1.055705 Tw (termination option is checked, the dialog will pop out, and the simulation will be stopped as soon as the dialog is) Tj T* 0 Tw (closed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 198.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.530227 Tw (The last tab allows to change the appearance of the user interface. There are options to change the colors) Tj T* 0 Tw .555227 Tw (associated to the different pipeline stages, an option to choose whether memory cells are shown as long or double) Tj T* 0 Tw (values and an option to set the UI font size.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 168.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .429732 Tw (Note that the UI scaling with font size is far from perfect, but it should be enough to make the simulator usable with) Tj T* 0 Tw (high-resolution displays \(e.g., 4k\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 138.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Dinero Frontend) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 96.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.123106 Tw (The Dinero Frontend dialog allows to feed a DineroIV process with the trace file internally generated by the execution) Tj T* 0 Tw -0.001996 Tw (of the program. In the first text box there is the path of the DineroIV executable, and in the second one there must be) Tj T* 0 Tw (the parameters of DineroIV.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 78.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The lower section contains the output of the DineroIV process, from which you can take the data that you need.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
 
endstream
endobj
258 0 obj
<<
/Length 7676
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 754.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Help dialog brings up the on-line manual, which is an HTML copy of this document.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Command line options) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .649672 Tw (Three command line options are available. They are described in the following list, with the long name enclosed in) Tj T* 0 Tw (round brackets. Long and short names can be used in the same way.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 685.8394 cm
Q
q
1 0 0 1 40.01575 685.8394 cm
Q
q
1 0 0 1 40.01575 673.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-v \(\226version\)) Tj /F1 10 Tf ( prints the simulator version and exits.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.8394 cm
Q
q
1 0 0 1 40.01575 655.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-h \(\226help\)) Tj /F1 10 Tf ( prints a help message with a brief summary of command line options, then exits.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 649.8394 cm
Q
q
1 0 0 1 40.01575 637.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-f \(\226file\) filename) Tj /F1 10 Tf ( opens ) Tj /F3 10 Tf (filename) Tj /F1 10 Tf ( in the simulator) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.8394 cm
Q
q
1 0 0 1 40.01575 619.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-r \(\226reset\)) Tj /F1 10 Tf ( resets the stored configuration to the default values) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 613.8394 cm
Q
q
1 0 0 1 40.01575 601.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-d \(\226debug\)) Tj /F1 10 Tf ( enters Debug mode) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.8394 cm
Q
q
1 0 0 1 40.01575 559.8394 cm
q
BT 1 0 0 1 0 26 Tm .804705 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (\226debug) Tj /F1 10 Tf ( flag has the effect to activate Debug mode. In this mode, a new frame is available, the Debug frame,) Tj T* 0 Tw .740171 Tw (and it shows the log of internal activities of EduMIPS64. It is not useful for the end user, it is meant to be used by) Tj T* 0 Tw (EduMIPS64 developers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 527.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Running EduMIPS64) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.0394 cm
q
BT 1 0 0 1 0 14 Tm .225641 Tw 12 TL /F1 10 Tf 0 0 0 rg (The EduMIPS64 ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file can act both as a stand-alone executable ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file and as an applet, so it can be executed in) Tj T* 0 Tw (both ways. Both methods need the Java Runtime Environment, version 5 or later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 455.0394 cm
q
BT 1 0 0 1 0 26 Tm 5.820241 Tw 12 TL /F1 10 Tf 0 0 0 rg (To run it as a stand-alone application, the ) Tj /F3 10 Tf (java) Tj /F1 10 Tf ( executable must be issued in this way: ) Tj /F3 10 Tf (java -jar) Tj T* 0 Tw .419631 Tw (edumips64-version.jar) Tj /F1 10 Tf (, where the ) Tj /F3 10 Tf (version) Tj /F1 10 Tf ( string must be replaced with the actual version of the simulator. On some) Tj T* 0 Tw (systems, you may be able to execute it by just clicking on the ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 425.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.026705 Tw 12 TL /F1 10 Tf 0 0 0 rg (To embed it in an HTML, the ) Tj /F3 10 Tf (<) Tj (applet) Tj (>) Tj /F1 10 Tf ( tag must be used. The EduMIPS64 web site contains a page that already) Tj T* 0 Tw (contains the applet, so that everyone can execute it without the hassle of using the command line.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 389.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 371.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In this chapter you\222ll find some sample listings that will be useful in order to understand how EduMIPS64 works.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 339.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (SYSCALL) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 297.0394 cm
q
BT 1 0 0 1 0 26 Tm .058637 Tw 12 TL /F1 10 Tf 0 0 0 rg (It\222s important to understand that examples for SYSCALL 1-4 refer to the ) Tj /F3 10 Tf (print.s) Tj /F1 10 Tf ( file, that is the example for SYSCALL) Tj T* 0 Tw .191917 Tw (5. If you want to run the examples, you should copy the content of that example in a file named ) Tj /F3 10 Tf (print.s) Tj /F1 10 Tf ( and include it) Tj T* 0 Tw (in your code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.311794 Tw (Some examples use an already existing file descriptor, even if it doesn\222t truly exist. If you want to run those) Tj T* 0 Tw (examples, use the SYSCALL 1 example to open a file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 236.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 0) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 218.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When SYSCALL 0 is called, it stops the execution of the program. Example:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 175.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (.code) Tj T* (    daddi   r1, r0, 0    ; saves 0 in R1) Tj T* (    syscall 0            ; exits) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 145.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 1) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 127.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that opens a file:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (                .data) Tj T* (error_op:       .asciiz     "Error opening the file") Tj T* (ok_message:     .asciiz     "All right") Tj T* (params_sys1:    .asciiz     "filename.txt") Tj T* (                .word64     0xF) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
 
endstream
endobj
259 0 obj
<<
/Length 4878
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 612.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 174 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F4 10 Tf 12 TL  T* (                .text) Tj T* (open:           daddi       r14, r0, params_sys1) Tj T* (                syscall     1) Tj T* (                daddi       $s0, r0, -1) Tj T* (                dadd        $s2, r0, r1) Tj T* (                daddi       $a0,r0,ok_message) Tj T* (                bne         r1,$s0,end) Tj T* (                daddi       $a0,r0,error_op) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall 0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .252205 Tw (In the first two rows we write to memory the strings containing the error message and the success message that we) Tj T* 0 Tw (will pass to print_string function, and we give them two labels. The print_string function is included in the print.s file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 550.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .290178 Tw (Next, we write to memory the data required from SYSCALL 1 \(row 4, 5\), the path of the file to be opened \(that must) Tj T* 0 Tw (exist if we work in read or read/write mode\) and, in the next memory cell, an integer that defines the opening mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 520.2394 cm
q
BT 1 0 0 1 0 14 Tm .644947 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, the file was opened using the following modes: ) Tj /F3 10 Tf (O_RDWR) Tj /F1 10 Tf ( | ) Tj /F3 10 Tf (O_CREAT) Tj /F1 10 Tf ( | ) Tj /F3 10 Tf (O_APPEND) Tj /F1 10 Tf (. The number) Tj T* 0 Tw (15 \(0xF in base 16\) comes from the sum of the values of these three modes \(3 + 4 + 8\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 502.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We give a label to this data so that we can use it later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 460.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .318766 Tw (In the .text section, we save the address of params_sys1 \(that for the compiler is a number\) in register r14; next we) Tj T* 0 Tw .221364 Tw (can call SYSCALL 1 and save the content of r1 in $s2, so that we can use it in the rest of the program \(for instance,) Tj T* 0 Tw (with other SYSCALL\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 430.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.140705 Tw (Then the print_string function is called, passing error_op as an argument if r1 is equal to -1 \(rows 13-14\) or else) Tj T* 0 Tw (passing ok_message as an argument if everything went smoothly \(rows 12 and 16\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 399.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 2) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 381.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that closes a file:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 159.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 222 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 206 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys2:    .space 8) Tj T* (error_cl:       .asciiz     "Error closing the file") Tj T* (ok_message:     .asciiz     "All right") Tj T*  T* (                .text) Tj T* (close:          daddi       r14, r0, params_sys2) Tj T* (                sw          $s2, params_sys2\(r0\)) Tj T* (                syscall     2) Tj T* (                daddi       $s0, r0, -1) Tj T* (                daddi       $a0, r0, ok_message) Tj T* (                bne         r1, $s0, end) Tj T* (                daddi       $a0, r0, error_cl) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 127.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .530671 Tw (First we save some memory for the only argument of SYSCALL 2, the file descriptor of the file that must be closed) Tj T* 0 Tw (\(row 2\), and we give it a label so that we can access it later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 97.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.110295 Tw (Next we put in memory the strings containing the error message and the success message, that will be passed to the) Tj T* 0 Tw (print_string function \(rows 3, 4\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 79.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In the .text section, we save the address of params_sys2 in r14; then we can call SYSCALL 2.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
 
endstream
endobj
260 0 obj
<<
/Length 4418
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.935433 Tw (Now we call the print_string function using error_cl as a parameter if r1 yields -1 \(row 13\), or we call it using) Tj T* 0 Tw (ok_message as a parameter if all went smoothly \(row 11\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (Note:) Tj /F1 10 Tf ( This listing needs that registry $s2 contains the file descriptor of the file to use.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 714.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 3) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 696.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that reads 16 bytes from a file and saves them to memory:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 401.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 294 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys3:    .space      8) Tj T* (ind_value:      .space      8) Tj T* (                .word64     16) Tj T* (error_3:        .asciiz     "Error while reading from file") Tj T* (ok_message:     .asciiz     "All right") Tj T*  T* (value:          .space      30) Tj T*  T* (                .text) Tj T* (read:           daddi       r14, r0, params_sys3) Tj T* (                sw          $s2, params_sys3\(r0\)) Tj T* (                daddi       $s1, r0, value) Tj T* (                sw          $s1, ind_value\(r0\)) Tj T* (                syscall     3) Tj T* (                daddi       $s0, r0, -1) Tj T* (                daddi       $a0, r0,ok_message) Tj T* (                bne         r1, $s0,end) Tj T* (                daddi       $a0, r0,error_3) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 345.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .68829 Tw (The first 4 rows of the .data section contain the arguments of SYSCALL 3, the file descriptor of the from which we) Tj T* 0 Tw .000205 Tw (must read, the memory address where the SYSCALL must save the read data, the number of bytes to read. We give) Tj T* 0 Tw 1.698561 Tw (labels to those parameters that must be accessed later. Next we put, as usual, the strings containing the error) Tj T* 0 Tw (message and the success message.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .001205 Tw (In the .text section, we save the params_sys3 address to register r14, we save in the memory cells for the SYSCALL) Tj T* 0 Tw .024277 Tw (parameters the file descriptor \(that we suppose to have in $s2\) and the address that we want to use to save the read) Tj T* 0 Tw (bytes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 273.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.499064 Tw (Next we can call SYSCALL 3, and then we call the print_string function passing as argument error_3 or) Tj T* 0 Tw (ok_message, according to the success of the operation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 243.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 4) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 225.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that writes to a file a string:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 62.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 162 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 146 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys4:    .space      8) Tj T* (ind_value:      .space      8) Tj T* (                .word64     16) Tj T* (error_4:        .asciiz     "Error writing to file") Tj T* (ok_message:     .asciiz     "All right") Tj T* (value:          .space      30) Tj T*  T* (                .text) Tj T*  T* (write:          daddi       r14, r0,params_sys4) Tj T* (                sw          $s2, params_sys4\(r0\)) Tj T* (                daddi       $s1, r0,value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
 
endstream
endobj
261 0 obj
<<
/Length 4833
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 648.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 138 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL (                sw          $s1, ind_value\(r0\)) Tj T* (                syscall     4) Tj T* (                daddi       $s0, r0,-1) Tj T* (                daddi       $a0, r0,ok_message) Tj T* (                bne         r1, $s0,end) Tj T* (                daddi       $a0, r0,error_4) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 592.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .68829 Tw (The first 4 rows of the .data section contain the arguments of SYSCALL 4, the file descriptor of the from which we) Tj T* 0 Tw -0.026295 Tw (must read, the memory address from where the SYSCALL must read the bytes to write, the number of bytes to write.) Tj T* 0 Tw .819163 Tw (We give labels to those parameters that must be accessed later. Next we put, as usual, the strings containing the) Tj T* 0 Tw (error message and the success message.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 550.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .001205 Tw (In the .text section, we save the params_sys4 address to register r14, we save in the memory cells for the SYSCALL) Tj T* 0 Tw .306205 Tw (parameters the file descriptor \(that we suppose to have in $s2\) and the address from where we must take the bytes) Tj T* 0 Tw (to weite.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 520.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.499064 Tw (Next we can call SYSCALL 3, and then we call the print_string function passing as argument error_3 or) Tj T* 0 Tw (ok_message, according to the success of the operation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 489.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 471.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that contains a function that prints to standard output the string contained in $a0:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 357.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 114 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys5:    .space  8) Tj T*  T* (                .text) Tj T* (print_string:) Tj T* (                sw      $a0, params_sys5\(r0\)) Tj T* (                daddi   r14, r0, params_sys5) Tj T* (                syscall 5) Tj T* (                jr      r31) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 325.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .579743 Tw (The second row is used to save space for the string that must be printed by the SYSCALL, that is filled by the first) Tj T* 0 Tw (instruction of the .text section, that assumes that in $a0 there\222s the address of the string to be printed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 295.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .252004 Tw (The next instruction puts in r14 the address of this string, and then we can call SYSCALL 5 and print the string. The) Tj T* 0 Tw (last instruction sets the program counter to the content of r31, as the usual MIPS calling convention states.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 264.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (A more complex usage example of SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 246.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 5 uses a not-so-simple arguments passing mechanism, that will be shown in the following example:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 59.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 186 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F4 10 Tf 12 TL (                .data) Tj T* (format_str:     .asciiz   "%dth of %s:\\n%s version %i.%i is being tested!") Tj T* (s1:             .asciiz   "June") Tj T* (s2:             .asciiz   "EduMIPS64") Tj T* (fs_addr:        .space    4) Tj T* (                .word     5) Tj T* (s1_addr:        .space    4) Tj T* (s2_addr:        .space    4) Tj T* (                .word     0) Tj T* (                .word     5) Tj T* (test:) Tj T* (                .code) Tj T* (                daddi     r5, r0, format_str) Tj T* (                sw        r5, fs_addr\(r0\)) Tj T* (                daddi     r2, r0, s1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
 
endstream
endobj
262 0 obj
<<
/Length 1903
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (                daddi     r3, r0, s2) Tj T* (                sd        r2, s1_addr\(r0\)) Tj T* (                sd        r3, s2_addr\(r0\)) Tj T* (                daddi     r14, r0, fs_addr) Tj T* (                syscall   5) Tj T* (                syscall   0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 664.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.111705 Tw (The address of the format string is put into R5, whose content is then saved to memory at address fs_addr. The) Tj T* 0 Tw .834006 Tw (string parameters\222 addresses are saved into s1_addr and s2_addr. Those two string parameters are the ones that) Tj T* 0 Tw (match the two %s placeholders in the format string.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .383381 Tw (Looking at the memory, it\222s obvious that the parameters matching the placeholders are stored immediately after the) Tj T* 0 Tw .92894 Tw (address of the format string: numbers match integer parameters, while addresses match string parameters. In the) Tj T* 0 Tw .999205 Tw (s1_addr and s2_addr locations there are the addresses of the two strings that we want to print instead of the %s) Tj T* 0 Tw (placeholders.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .702847 Tw (The execution of the example will show how SYSCALL 5 can handle complex format strings like the one stored at) Tj T* 0 Tw (format_str.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
 
endstream
endobj
263 0 obj
<<
/Nums [ 0 264 0 R 1 265 0 R 2 266 0 R 3 267 0 R 4 268 0 R 
  5 269 0 R 6 270 0 R 7 271 0 R 8 272 0 R 9 273 0 R 
  10 274 0 R 11 275 0 R 12 276 0 R 13 277 0 R 14 278 0 R 
  15 279 0 R 16 280 0 R 17 281 0 R 18 282 0 R 19 283 0 R 
  20 284 0 R 21 285 0 R 22 286 0 R 23 287 0 R 24 288 0 R 
  25 289 0 R 26 290 0 R 27 291 0 R ]
>>
endobj
264 0 obj
<<
/S /D /St 1
>>
endobj
265 0 obj
<<
/S /D /St 2
>>
endobj
266 0 obj
<<
/S /r /St 1
>>
endobj
267 0 obj
<<
/S /r /St 2
>>
endobj
268 0 obj
<<
/S /D /St 1
>>
endobj
269 0 obj
<<
/S /D /St 2
>>
endobj
270 0 obj
<<
/S /D /St 3
>>
endobj
271 0 obj
<<
/S /D /St 4
>>
endobj
272 0 obj
<<
/S /D /St 5
>>
endobj
273 0 obj
<<
/S /D /St 6
>>
endobj
274 0 obj
<<
/S /D /St 7
>>
endobj
275 0 obj
<<
/S /D /St 8
>>
endobj
276 0 obj
<<
/S /D /St 9
>>
endobj
277 0 obj
<<
/S /D /St 10
>>
endobj
278 0 obj
<<
/S /D /St 11
>>
endobj
279 0 obj
<<
/S /D /St 12
>>
endobj
280 0 obj
<<
/S /D /St 13
>>
endobj
281 0 obj
<<
/S /D /St 14
>>
endobj
282 0 obj
<<
/S /D /St 15
>>
endobj
283 0 obj
<<
/S /D /St 16
>>
endobj
284 0 obj
<<
/S /D /St 17
>>
endobj
285 0 obj
<<
/S /D /St 18
>>
endobj
286 0 obj
<<
/S /D /St 19
>>
endobj
287 0 obj
<<
/S /D /St 20
>>
endobj
288 0 obj
<<
/S /D /St 21
>>
endobj
289 0 obj
<<
/S /D /St 22
>>
endobj
290 0 obj
<<
/S /D /St 23
>>
endobj
291 0 obj
<<
/S /D /St 24
>>
endobj
xref
0 292
0000000000 65535 f 
0000000073 00000 n 
0000000176 00000 n 
0000000283 00000 n 
0000000395 00000 n 
0000000602 00000 n 
0000000809 00000 n 
0000000978 00000 n 
0000001147 00000 n 
0000001316 00000 n 
0000001485 00000 n 
0000001655 00000 n 
0000001825 00000 n 
0000001941 00000 n 
0000002111 00000 n 
0000002281 00000 n 
0000002451 00000 n 
0000002621 00000 n 
0000002791 00000 n 
0000002961 00000 n 
0000003131 00000 n 
0000003301 00000 n 
0000003471 00000 n 
0000003641 00000 n 
0000003811 00000 n 
0000003981 00000 n 
0000004151 00000 n 
0000004321 00000 n 
0000004491 00000 n 
0000004661 00000 n 
0000004831 00000 n 
0000005001 00000 n 
0000005171 00000 n 
0000005341 00000 n 
0000005511 00000 n 
0000005681 00000 n 
0000005851 00000 n 
0000006021 00000 n 
0000006191 00000 n 
0000006361 00000 n 
0000006531 00000 n 
0000006701 00000 n 
0000006871 00000 n 
0000007041 00000 n 
0000007211 00000 n 
0000007381 00000 n 
0000007551 00000 n 
0000007721 00000 n 
0000007891 00000 n 
0000008061 00000 n 
0000008231 00000 n 
0000008401 00000 n 
0000008571 00000 n 
0000008741 00000 n 
0000008911 00000 n 
0000009081 00000 n 
0000009251 00000 n 
0000009421 00000 n 
0000009591 00000 n 
0000009761 00000 n 
0000009931 00000 n 
0000010101 00000 n 
0000010271 00000 n 
0000010441 00000 n 
0000010611 00000 n 
0000010781 00000 n 
0000010951 00000 n 
0000011121 00000 n 
0000011291 00000 n 
0000011461 00000 n 
0000011631 00000 n 
0000011801 00000 n 
0000011971 00000 n 
0000012141 00000 n 
0000012311 00000 n 
0000012481 00000 n 
0000012651 00000 n 
0000012821 00000 n 
0000012991 00000 n 
0000013161 00000 n 
0000013331 00000 n 
0000013501 00000 n 
0000013671 00000 n 
0000013841 00000 n 
0000014011 00000 n 
0000014181 00000 n 
0000014351 00000 n 
0000014521 00000 n 
0000015318 00000 n 
0000015488 00000 n 
0000015658 00000 n 
0000015828 00000 n 
0000015998 00000 n 
0000016168 00000 n 
0000016338 00000 n 
0000016508 00000 n 
0000016678 00000 n 
0000016848 00000 n 
0000017018 00000 n 
0000017188 00000 n 
0000017358 00000 n 
0000017529 00000 n 
0000017700 00000 n 
0000017871 00000 n 
0000018042 00000 n 
0000018213 00000 n 
0000018384 00000 n 
0000018555 00000 n 
0000018726 00000 n 
0000018897 00000 n 
0000019068 00000 n 
0000019239 00000 n 
0000019410 00000 n 
0000019581 00000 n 
0000019752 00000 n 
0000019923 00000 n 
0000020094 00000 n 
0000020265 00000 n 
0000020436 00000 n 
0000020607 00000 n 
0000020778 00000 n 
0000020949 00000 n 
0000021120 00000 n 
0000021291 00000 n 
0000021462 00000 n 
0000021633 00000 n 
0000021804 00000 n 
0000021975 00000 n 
0000022146 00000 n 
0000022317 00000 n 
0000022488 00000 n 
0000022659 00000 n 
0000022830 00000 n 
0000023403 00000 n 
0000023579 00000 n 
0000023768 00000 n 
0000023945 00000 n 
0000024052 00000 n 
0000024173 00000 n 
0000024418 00000 n 
0000024627 00000 n 
0000024836 00000 n 
0000025045 00000 n 
0000025254 00000 n 
0000025463 00000 n 
0000025672 00000 n 
0000025881 00000 n 
0000026090 00000 n 
0000026299 00000 n 
0000026470 00000 n 
0000026555 00000 n 
0000026726 00000 n 
0000026963 00000 n 
0000027042 00000 n 
0000027213 00000 n 
0000027384 00000 n 
0000027555 00000 n 
0000027800 00000 n 
0000028009 00000 n 
0000028218 00000 n 
0000028427 00000 n 
0000028636 00000 n 
0000028845 00000 n 
0000029054 00000 n 
0000029263 00000 n 
0000029472 00000 n 
0000029681 00000 n 
0000029890 00000 n 
0000030099 00000 n 
0000030308 00000 n 
0000030418 00000 n 
0000030677 00000 n 
0000030755 00000 n 
0000030925 00000 n 
0000031091 00000 n 
0000031210 00000 n 
0000031347 00000 n 
0000031484 00000 n 
0000031610 00000 n 
0000031791 00000 n 
0000031913 00000 n 
0000032056 00000 n 
0000032201 00000 n 
0000032385 00000 n 
0000032511 00000 n 
0000032651 00000 n 
0000032792 00000 n 
0000032932 00000 n 
0000033073 00000 n 
0000033201 00000 n 
0000033366 00000 n 
0000033477 00000 n 
0000033600 00000 n 
0000033724 00000 n 
0000033834 00000 n 
0000034014 00000 n 
0000034175 00000 n 
0000034305 00000 n 
0000034445 00000 n 
0000034573 00000 n 
0000034716 00000 n 
0000034857 00000 n 
0000034994 00000 n 
0000035115 00000 n 
0000035295 00000 n 
0000035454 00000 n 
0000035564 00000 n 
0000035691 00000 n 
0000035820 00000 n 
0000035945 00000 n 
0000036071 00000 n 
0000036181 00000 n 
0000036348 00000 n 
0000036460 00000 n 
0000036589 00000 n 
0000036719 00000 n 
0000036847 00000 n 
0000036973 00000 n 
0000037097 00000 n 
0000037215 00000 n 
0000037383 00000 n 
0000037497 00000 n 
0000037632 00000 n 
0000037742 00000 n 
0000037882 00000 n 
0000038005 00000 n 
0000038165 00000 n 
0000038302 00000 n 
0000038417 00000 n 
0000038546 00000 n 
0000038675 00000 n 
0000038804 00000 n 
0000038933 00000 n 
0000039062 00000 n 
0000039209 00000 n 
0000039490 00000 n 
0000040462 00000 n 
0000040588 00000 n 
0000049910 00000 n 
0000054843 00000 n 
0000061849 00000 n 
0000075958 00000 n 
0000086551 00000 n 
0000095461 00000 n 
0000104334 00000 n 
0000113742 00000 n 
0000122790 00000 n 
0000131271 00000 n 
0000139849 00000 n 
0000148350 00000 n 
0000154860 00000 n 
0000163199 00000 n 
0000172098 00000 n 
0000182906 00000 n 
0000192244 00000 n 
0000200588 00000 n 
0000210420 00000 n 
0000218367 00000 n 
0000225435 00000 n 
0000233164 00000 n 
0000238095 00000 n 
0000242566 00000 n 
0000247452 00000 n 
0000249408 00000 n 
0000249754 00000 n 
0000249789 00000 n 
0000249824 00000 n 
0000249859 00000 n 
0000249894 00000 n 
0000249929 00000 n 
0000249964 00000 n 
0000249999 00000 n 
0000250034 00000 n 
0000250069 00000 n 
0000250104 00000 n 
0000250139 00000 n 
0000250174 00000 n 
0000250209 00000 n 
0000250245 00000 n 
0000250281 00000 n 
0000250317 00000 n 
0000250353 00000 n 
0000250389 00000 n 
0000250425 00000 n 
0000250461 00000 n 
0000250497 00000 n 
0000250533 00000 n 
0000250569 00000 n 
0000250605 00000 n 
0000250641 00000 n 
0000250677 00000 n 
0000250713 00000 n 
trailer
<<
/ID 
[<663dcee95ccecbb352e735a979793069><663dcee95ccecbb352e735a979793069>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 170 0 R
/Root 169 0 R
/Size 292
>>
startxref
250749
%%EOF
%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 12 0 R /F4 136 0 R /F5 137 0 R /F6 149 0 R 
  /F7 152 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/Contents 235 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
5 0 obj
<<
/Contents 236 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
6 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 40.01575 754.0394 248.9357 766.0394 ] /Subtype /Link /Type /Annot
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 549.6998 754.7894 555.2598 766.7894 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 60.01575 736.0394 143.3757 748.0394 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 549.6998 736.7894 555.2598 748.7894 ] /Subtype /Link /Type /Annot
>>
endobj
10 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Rect [ 80.01575 718.0394 141.6757 730.0394 ] /Subtype /Link /Type /Annot
>>
endobj
11 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Rect [ 549.6998 718.7894 555.2598 730.7894 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
13 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 80.01575 700.0394 156.7257 712.0394 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Rect [ 549.6998 700.7894 555.2598 712.7894 ] /Subtype /Link /Type /Annot
>>
endobj
15 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 139 0 R /XYZ 40.01575 73.43937 0 ] /Rect [ 80.01575 682.0394 158.9457 694.0394 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 139 0 R /XYZ 40.01575 73.43937 0 ] /Rect [ 549.6998 682.7894 555.2598 694.7894 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 645.0394 0 ] /Rect [ 80.01575 664.0394 183.9457 676.0394 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 645.0394 0 ] /Rect [ 549.6998 664.7894 555.2598 676.7894 ] /Subtype /Link /Type /Annot
>>
endobj
19 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 558.2394 0 ] /Rect [ 60.01575 646.0394 141.7157 658.0394 ] /Subtype /Link /Type /Annot
>>
endobj
20 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 558.2394 0 ] /Rect [ 549.6998 646.7894 555.2598 658.7894 ] /Subtype /Link /Type /Annot
>>
endobj
21 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 421.0394 0 ] /Rect [ 80.01575 628.0394 153.3757 640.0394 ] /Subtype /Link /Type /Annot
>>
endobj
22 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 141 0 R /XYZ 40.01575 421.0394 0 ] /Rect [ 549.6998 628.7894 555.2598 640.7894 ] /Subtype /Link /Type /Annot
>>
endobj
23 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Rect [ 80.01575 610.0394 182.2857 622.0394 ] /Subtype /Link /Type /Annot
>>
endobj
24 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Rect [ 549.6998 610.7894 555.2598 622.7894 ] /Subtype /Link /Type /Annot
>>
endobj
25 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 80.01575 592.0394 187.2657 604.0394 ] /Subtype /Link /Type /Annot
>>
endobj
26 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Rect [ 549.6998 592.7894 555.2598 604.7894 ] /Subtype /Link /Type /Annot
>>
endobj
27 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /Rect [ 80.01575 574.0394 193.3957 586.0394 ] /Subtype /Link /Type /Annot
>>
endobj
28 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /Rect [ 549.6998 574.7894 555.2598 586.7894 ] /Subtype /Link /Type /Annot
>>
endobj
29 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Rect [ 100.0157 556.0394 184.4857 568.0394 ] /Subtype /Link /Type /Annot
>>
endobj
30 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Rect [ 549.6998 556.7894 555.2598 568.7894 ] /Subtype /Link /Type /Annot
>>
endobj
31 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Rect [ 100.0157 538.0394 191.1657 550.0394 ] /Subtype /Link /Type /Annot
>>
endobj
32 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Rect [ 549.6998 538.7894 555.2598 550.7894 ] /Subtype /Link /Type /Annot
>>
endobj
33 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Rect [ 100.0157 520.0394 192.2657 532.0394 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Rect [ 544.1398 520.7894 555.2598 532.7894 ] /Subtype /Link /Type /Annot
>>
endobj
35 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 100.0157 502.0394 188.9357 514.0394 ] /Subtype /Link /Type /Annot
>>
endobj
36 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 544.1398 502.7894 555.2598 514.7894 ] /Subtype /Link /Type /Annot
>>
endobj
37 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Rect [ 100.0157 484.0394 190.0357 496.0394 ] /Subtype /Link /Type /Annot
>>
endobj
38 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Rect [ 544.1398 484.7894 555.2598 496.7894 ] /Subtype /Link /Type /Annot
>>
endobj
39 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Rect [ 100.0157 466.0394 191.1557 478.0394 ] /Subtype /Link /Type /Annot
>>
endobj
40 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Rect [ 544.1398 466.7894 555.2598 478.7894 ] /Subtype /Link /Type /Annot
>>
endobj
41 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 80.01575 448.0394 158.3757 460.0394 ] /Subtype /Link /Type /Annot
>>
endobj
42 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 448.7894 555.2598 460.7894 ] /Subtype /Link /Type /Annot
>>
endobj
43 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Rect [ 100.0157 430.0394 133.9157 442.0394 ] /Subtype /Link /Type /Annot
>>
endobj
44 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Rect [ 544.1398 430.7894 555.2598 442.7894 ] /Subtype /Link /Type /Annot
>>
endobj
45 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Rect [ 100.0157 412.0394 121.6857 424.0394 ] /Subtype /Link /Type /Annot
>>
endobj
46 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Rect [ 544.1398 412.7894 555.2598 424.7894 ] /Subtype /Link /Type /Annot
>>
endobj
47 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Rect [ 100.0157 394.0394 126.6857 406.0394 ] /Subtype /Link /Type /Annot
>>
endobj
48 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Rect [ 544.1398 394.7894 555.2598 406.7894 ] /Subtype /Link /Type /Annot
>>
endobj
49 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Rect [ 100.0157 376.0394 125.5757 388.0394 ] /Subtype /Link /Type /Annot
>>
endobj
50 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Rect [ 544.1398 376.7894 555.2598 388.7894 ] /Subtype /Link /Type /Annot
>>
endobj
51 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 60.01575 358.0394 141.7157 370.0394 ] /Subtype /Link /Type /Annot
>>
endobj
52 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /Rect [ 544.1398 358.7894 555.2598 370.7894 ] /Subtype /Link /Type /Annot
>>
endobj
53 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 297.4394 0 ] /Rect [ 80.01575 340.0394 144.4857 352.0394 ] /Subtype /Link /Type /Annot
>>
endobj
54 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 297.4394 0 ] /Rect [ 544.1398 340.7894 555.2598 352.7894 ] /Subtype /Link /Type /Annot
>>
endobj
55 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 222.6394 0 ] /Rect [ 100.0157 322.0394 210.0557 334.0394 ] /Subtype /Link /Type /Annot
>>
endobj
56 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 222.6394 0 ] /Rect [ 544.1398 322.7894 555.2598 334.7894 ] /Subtype /Link /Type /Annot
>>
endobj
57 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 304.0394 195.5957 316.0394 ] /Subtype /Link /Type /Annot
>>
endobj
58 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 304.7894 555.2598 316.7894 ] /Subtype /Link /Type /Annot
>>
endobj
59 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Rect [ 100.0157 286.0394 193.3757 298.0394 ] /Subtype /Link /Type /Annot
>>
endobj
60 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Rect [ 544.1398 286.7894 555.2598 298.7894 ] /Subtype /Link /Type /Annot
>>
endobj
61 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Rect [ 80.01575 268.0394 183.9557 280.0394 ] /Subtype /Link /Type /Annot
>>
endobj
62 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Rect [ 544.1398 268.7894 555.2598 280.7894 ] /Subtype /Link /Type /Annot
>>
endobj
63 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 80.01575 250.0394 172.8357 262.0394 ] /Subtype /Link /Type /Annot
>>
endobj
64 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Rect [ 544.1398 250.7894 555.2598 262.7894 ] /Subtype /Link /Type /Annot
>>
endobj
65 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Rect [ 80.01575 232.0394 163.3657 244.0394 ] /Subtype /Link /Type /Annot
>>
endobj
66 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Rect [ 544.1398 232.7894 555.2598 244.7894 ] /Subtype /Link /Type /Annot
>>
endobj
67 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Rect [ 80.01575 214.0394 142.2657 226.0394 ] /Subtype /Link /Type /Annot
>>
endobj
68 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Rect [ 544.1398 214.7894 555.2598 226.7894 ] /Subtype /Link /Type /Annot
>>
endobj
69 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 60.01575 196.0394 140.6057 208.0394 ] /Subtype /Link /Type /Annot
>>
endobj
70 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 196.7894 555.2598 208.7894 ] /Subtype /Link /Type /Annot
>>
endobj
71 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /Rect [ 80.01575 178.0394 142.2657 190.0394 ] /Subtype /Link /Type /Annot
>>
endobj
72 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /Rect [ 544.1398 178.7894 555.2598 190.7894 ] /Subtype /Link /Type /Annot
>>
endobj
73 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Rect [ 100.0157 160.0394 116.1257 172.0394 ] /Subtype /Link /Type /Annot
>>
endobj
74 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Rect [ 544.1398 160.7894 555.2598 172.7894 ] /Subtype /Link /Type /Annot
>>
endobj
75 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Rect [ 100.0157 142.0394 136.1457 154.0394 ] /Subtype /Link /Type /Annot
>>
endobj
76 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Rect [ 544.1398 142.7894 555.2598 154.7894 ] /Subtype /Link /Type /Annot
>>
endobj
77 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 124.0394 143.3657 136.0394 ] /Subtype /Link /Type /Annot
>>
endobj
78 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 124.7894 555.2598 136.7894 ] /Subtype /Link /Type /Annot
>>
endobj
79 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Rect [ 100.0157 106.0394 124.4657 118.0394 ] /Subtype /Link /Type /Annot
>>
endobj
80 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Rect [ 544.1398 106.7894 555.2598 118.7894 ] /Subtype /Link /Type /Annot
>>
endobj
81 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Rect [ 100.0157 88.03937 135.5757 100.0394 ] /Subtype /Link /Type /Annot
>>
endobj
82 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Rect [ 544.1398 88.78937 555.2598 100.7894 ] /Subtype /Link /Type /Annot
>>
endobj
83 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Rect [ 100.0157 70.03937 120.5757 82.03937 ] /Subtype /Link /Type /Annot
>>
endobj
84 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Rect [ 544.1398 70.78937 555.2598 82.78937 ] /Subtype /Link /Type /Annot
>>
endobj
85 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /Rect [ 80.01575 52.03937 113.9057 64.03937 ] /Subtype /Link /Type /Annot
>>
endobj
86 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /Rect [ 544.1398 52.78937 555.2598 64.78937 ] /Subtype /Link /Type /Annot
>>
endobj
87 0 obj
<<
/Annots [ 6 0 R 7 0 R 8 0 R 9 0 R 10 0 R 11 0 R 13 0 R 14 0 R 15 0 R 16 0 R 
  17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 
  27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 36 0 R 
  37 0 R 38 0 R 39 0 R 40 0 R 41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 46 0 R 
  47 0 R 48 0 R 49 0 R 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 
  57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 
  67 0 R 68 0 R 69 0 R 70 0 R 71 0 R 72 0 R 73 0 R 74 0 R 75 0 R 76 0 R 
  77 0 R 78 0 R 79 0 R 80 0 R 81 0 R 82 0 R 83 0 R 84 0 R 85 0 R 86 0 R ] /Contents 237 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
88 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Rect [ 100.0157 784.0394 130.0157 796.0394 ] /Subtype /Link /Type /Annot
>>
endobj
89 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Rect [ 544.1398 784.7894 555.2598 796.7894 ] /Subtype /Link /Type /Annot
>>
endobj
90 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Rect [ 100.0157 766.0394 142.2457 778.0394 ] /Subtype /Link /Type /Annot
>>
endobj
91 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Rect [ 544.1398 766.7894 555.2598 778.7894 ] /Subtype /Link /Type /Annot
>>
endobj
92 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Rect [ 100.0157 748.0394 140.0257 760.0394 ] /Subtype /Link /Type /Annot
>>
endobj
93 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Rect [ 544.1398 748.7894 555.2598 760.7894 ] /Subtype /Link /Type /Annot
>>
endobj
94 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Rect [ 100.0157 730.0394 135.5857 742.0394 ] /Subtype /Link /Type /Annot
>>
endobj
95 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Rect [ 544.1398 730.7894 555.2598 742.7894 ] /Subtype /Link /Type /Annot
>>
endobj
96 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 712.0394 136.1257 724.0394 ] /Subtype /Link /Type /Annot
>>
endobj
97 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 712.7894 555.2598 724.7894 ] /Subtype /Link /Type /Annot
>>
endobj
98 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Rect [ 100.0157 694.0394 123.9157 706.0394 ] /Subtype /Link /Type /Annot
>>
endobj
99 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Rect [ 544.1398 694.7894 555.2598 706.7894 ] /Subtype /Link /Type /Annot
>>
endobj
100 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 100.0157 676.0394 155.0557 688.0394 ] /Subtype /Link /Type /Annot
>>
endobj
101 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Rect [ 544.1398 676.7894 555.2598 688.7894 ] /Subtype /Link /Type /Annot
>>
endobj
102 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /Rect [ 80.01575 658.0394 113.3557 670.0394 ] /Subtype /Link /Type /Annot
>>
endobj
103 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /Rect [ 544.1398 658.7894 555.2598 670.7894 ] /Subtype /Link /Type /Annot
>>
endobj
104 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 100.0157 640.0394 136.1457 652.0394 ] /Subtype /Link /Type /Annot
>>
endobj
105 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Rect [ 544.1398 640.7894 555.2598 652.7894 ] /Subtype /Link /Type /Annot
>>
endobj
106 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 100.0157 622.0394 172.2657 634.0394 ] /Subtype /Link /Type /Annot
>>
endobj
107 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Rect [ 544.1398 622.7894 555.2598 634.7894 ] /Subtype /Link /Type /Annot
>>
endobj
108 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 100.0157 604.0394 120.5757 616.0394 ] /Subtype /Link /Type /Annot
>>
endobj
109 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Rect [ 544.1398 604.7894 555.2598 616.7894 ] /Subtype /Link /Type /Annot
>>
endobj
110 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Rect [ 80.01575 586.0394 179.4957 598.0394 ] /Subtype /Link /Type /Annot
>>
endobj
111 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Rect [ 544.1398 586.7894 555.2598 598.7894 ] /Subtype /Link /Type /Annot
>>
endobj
112 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Rect [ 80.01575 568.0394 173.3957 580.0394 ] /Subtype /Link /Type /Annot
>>
endobj
113 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Rect [ 544.1398 568.7894 555.2598 580.7894 ] /Subtype /Link /Type /Annot
>>
endobj
114 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /Rect [ 60.01575 550.0394 130.5957 562.0394 ] /Subtype /Link /Type /Annot
>>
endobj
115 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /Rect [ 544.1398 550.7894 555.2598 562.7894 ] /Subtype /Link /Type /Annot
>>
endobj
116 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /Rect [ 80.01575 532.0394 125.0357 544.0394 ] /Subtype /Link /Type /Annot
>>
endobj
117 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /Rect [ 544.1398 532.7894 555.2598 544.7894 ] /Subtype /Link /Type /Annot
>>
endobj
118 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Rect [ 100.0157 514.0394 153.3757 526.0394 ] /Subtype /Link /Type /Annot
>>
endobj
119 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Rect [ 544.1398 514.7894 555.2598 526.7894 ] /Subtype /Link /Type /Annot
>>
endobj
120 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Rect [ 100.0157 496.0394 153.3757 508.0394 ] /Subtype /Link /Type /Annot
>>
endobj
121 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Rect [ 544.1398 496.7894 555.2598 508.7894 ] /Subtype /Link /Type /Annot
>>
endobj
122 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Rect [ 100.0157 478.0394 153.3757 490.0394 ] /Subtype /Link /Type /Annot
>>
endobj
123 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Rect [ 544.1398 478.7894 555.2598 490.7894 ] /Subtype /Link /Type /Annot
>>
endobj
124 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Rect [ 100.0157 460.0394 153.3757 472.0394 ] /Subtype /Link /Type /Annot
>>
endobj
125 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Rect [ 544.1398 460.7894 555.2598 472.7894 ] /Subtype /Link /Type /Annot
>>
endobj
126 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 100.0157 442.0394 153.3757 454.0394 ] /Subtype /Link /Type /Annot
>>
endobj
127 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Rect [ 544.1398 442.7894 555.2598 454.7894 ] /Subtype /Link /Type /Annot
>>
endobj
128 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Rect [ 100.0157 424.0394 153.3757 436.0394 ] /Subtype /Link /Type /Annot
>>
endobj
129 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Rect [ 544.1398 424.7894 555.2598 436.7894 ] /Subtype /Link /Type /Annot
>>
endobj
130 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 100.0157 406.0394 310.1057 418.0394 ] /Subtype /Link /Type /Annot
>>
endobj
131 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Rect [ 544.1398 406.7894 555.2598 418.7894 ] /Subtype /Link /Type /Annot
>>
endobj
132 0 obj
<<
/Annots [ 88 0 R 89 0 R 90 0 R 91 0 R 92 0 R 93 0 R 94 0 R 95 0 R 96 0 R 97 0 R 
  98 0 R 99 0 R 100 0 R 101 0 R 102 0 R 103 0 R 104 0 R 105 0 R 106 0 R 107 0 R 
  108 0 R 109 0 R 110 0 R 111 0 R 112 0 R 113 0 R 114 0 R 115 0 R 116 0 R 117 0 R 
  118 0 R 119 0 R 120 0 R 121 0 R 122 0 R 123 0 R 124 0 R 125 0 R 126 0 R 127 0 R 
  128 0 R 129 0 R 130 0 R 131 0 R ] /Contents 238 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
133 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://www.edumips.org)
>> /Border [ 0 0 0 ] /Rect [ 170.6257 691.0394 356.5328 703.0394 ] /Subtype /Link /Type /Annot
>>
endobj
134 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://github.com/lupino3/edumips64)
>> /Border [ 0 0 0 ] /Rect [ 40.01575 679.0394 200.6557 691.0394 ] /Subtype /Link /Type /Annot
>>
endobj
135 0 obj
<<
/A <<
/S /URI /Type /Action /URI (mailto:bugs@edumips.org)
>> /Border [ 0 0 0 ] /Rect [ 269.0357 667.0394 355.8857 679.0394 ] /Subtype /Link /Type /Annot
>>
endobj
136 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
137 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
138 0 obj
<<
/Annots [ 133 0 R 134 0 R 135 0 R ] /Contents 239 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
139 0 obj
<<
/Contents 240 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
140 0 obj
<<
/Contents 241 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
141 0 obj
<<
/Contents 242 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
142 0 obj
<<
/Contents 243 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
143 0 obj
<<
/Contents 244 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
144 0 obj
<<
/Contents 245 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
145 0 obj
<<
/Contents 246 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
146 0 obj
<<
/Contents 247 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
147 0 obj
<<
/Contents 248 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
148 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 46.01575 80.85039 0 ] /Rect [ 97.81575 498.8394 102.2637 508.4394 ] /Subtype /Link /Type /Annot
>>
endobj
149 0 obj
<<
/BaseFont /ZapfDingbats /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
150 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 97.81575 507.4394 0 ] /Rect [ 46.01575 66.85039 51.57575 78.85039 ] /Subtype /Link /Type /Annot
>>
endobj
151 0 obj
<<
/Annots [ 148 0 R 150 0 R ] /Contents 249 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
152 0 obj
<<
/BaseFont /Symbol /Name /F7 /Subtype /Type1 /Type /Font
>>
endobj
153 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 300.2394 0 ] /Rect [ 153.3957 529.4394 217.8657 541.4394 ] /Subtype /Link /Type /Annot
>>
endobj
154 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 300.2394 0 ] /Rect [ 439.6557 263.0394 514.4176 275.0394 ] /Subtype /Link /Type /Annot
>>
endobj
155 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 40.01575 300.2394 0 ] /Rect [ 319.5957 161.0394 384.0657 173.0394 ] /Subtype /Link /Type /Annot
>>
endobj
156 0 obj
<<
/Annots [ 153 0 R 154 0 R 155 0 R ] /Contents 250 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
157 0 obj
<<
/Contents 251 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
158 0 obj
<<
/Contents 252 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
159 0 obj
<<
/Contents 253 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
160 0 obj
<<
/Contents 254 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
161 0 obj
<<
/Contents 255 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
162 0 obj
<<
/Contents 256 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
163 0 obj
<<
/Contents 257 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
164 0 obj
<<
/Contents 258 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
165 0 obj
<<
/Contents 259 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
166 0 obj
<<
/Contents 260 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
167 0 obj
<<
/Contents 261 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
168 0 obj
<<
/Contents 262 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 234 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
169 0 obj
<<
/Outlines 171 0 R /PageLabels 263 0 R /PageMode /UseNone /Pages 234 0 R /Type /Catalog
>>
endobj
170 0 obj
<<
/Author () /CreationDate (D:20200413155936+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20200413155936+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
171 0 obj
<<
/Count 75 /First 172 0 R /Last 172 0 R /Type /Outlines
>>
endobj
172 0 obj
<<
/Count 61 /Dest [ 138 0 R /XYZ 40.01575 787.0394 0 ] /First 173 0 R /Last 225 0 R /Parent 171 0 R /Title (Welcome to the EduMIPS64 documentation!)
>>
endobj
173 0 obj
<<
/Count 4 /Dest [ 138 0 R /XYZ 40.01575 495.0394 0 ] /First 174 0 R /Last 177 0 R /Next 178 0 R /Parent 172 0 R 
  /Title (Source files format)
>>
endobj
174 0 obj
<<
/Dest [ 138 0 R /XYZ 40.01575 193.0394 0 ] /Next 175 0 R /Parent 173 0 R /Title (Memory limits)
>>
endobj
175 0 obj
<<
/Dest [ 138 0 R /XYZ 40.01575 112.2394 0 ] /Next 176 0 R /Parent 173 0 R /Prev 174 0 R /Title (The .data section)
>>
endobj
176 0 obj
<<
/Dest [ 139 0 R /XYZ 40.01575 73.43937 0 ] /Next 177 0 R /Parent 173 0 R /Prev 175 0 R /Title (The .code section)
>>
endobj
177 0 obj
<<
/Dest [ 141 0 R /XYZ 40.01575 645.0394 0 ] /Parent 173 0 R /Prev 176 0 R /Title (The #include command)
>>
endobj
178 0 obj
<<
/Count 15 /Dest [ 141 0 R /XYZ 40.01575 558.2394 0 ] /First 179 0 R /Last 189 0 R /Next 194 0 R /Parent 172 0 R 
  /Prev 173 0 R /Title (The instruction set)
>>
endobj
179 0 obj
<<
/Dest [ 141 0 R /XYZ 40.01575 421.0394 0 ] /Next 180 0 R /Parent 178 0 R /Title (ALU Instructions)
>>
endobj
180 0 obj
<<
/Dest [ 144 0 R /XYZ 40.01575 135.0394 0 ] /Next 181 0 R /Parent 178 0 R /Prev 179 0 R /Title (Load/Store instructions)
>>
endobj
181 0 obj
<<
/Dest [ 145 0 R /XYZ 40.01575 189.0394 0 ] /Next 182 0 R /Parent 178 0 R /Prev 180 0 R /Title (Flow control instructions)
>>
endobj
182 0 obj
<<
/Count 6 /Dest [ 146 0 R /XYZ 40.01575 375.0394 0 ] /First 183 0 R /Last 188 0 R /Next 189 0 R /Parent 178 0 R 
  /Prev 181 0 R /Title (The SYSCALL instruction)
>>
endobj
183 0 obj
<<
/Dest [ 146 0 R /XYZ 40.01575 264.2394 0 ] /Next 184 0 R /Parent 182 0 R /Title (SYSCALL 0 - exit\(\))
>>
endobj
184 0 obj
<<
/Dest [ 146 0 R /XYZ 40.01575 185.8394 0 ] /Next 185 0 R /Parent 182 0 R /Prev 183 0 R /Title (SYSCALL 1 - open\(\))
>>
endobj
185 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 621.0394 0 ] /Next 186 0 R /Parent 182 0 R /Prev 184 0 R /Title (SYSCALL 2 - close\(\))
>>
endobj
186 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 530.6394 0 ] /Next 187 0 R /Parent 182 0 R /Prev 185 0 R /Title (SYSCALL 3 - read\(\))
>>
endobj
187 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 398.2394 0 ] /Next 188 0 R /Parent 182 0 R /Prev 186 0 R /Title (SYSCALL 4 - write\(\))
>>
endobj
188 0 obj
<<
/Dest [ 147 0 R /XYZ 40.01575 277.8394 0 ] /Parent 182 0 R /Prev 187 0 R /Title (SYSCALL 5 - printf\(\))
>>
endobj
189 0 obj
<<
/Count 4 /Dest [ 151 0 R /XYZ 40.01575 787.0394 0 ] /First 190 0 R /Last 193 0 R /Parent 178 0 R /Prev 182 0 R 
  /Title (Other instructions)
>>
endobj
190 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 736.2394 0 ] /Next 191 0 R /Parent 189 0 R /Title (BREAK)
>>
endobj
191 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 675.8394 0 ] /Next 192 0 R /Parent 189 0 R /Prev 190 0 R /Title (NOP)
>>
endobj
192 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 627.4394 0 ] /Next 193 0 R /Parent 189 0 R /Prev 191 0 R /Title (TRAP)
>>
endobj
193 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 579.0394 0 ] /Parent 189 0 R /Prev 192 0 R /Title (HALT)
>>
endobj
194 0 obj
<<
/Count 8 /Dest [ 151 0 R /XYZ 40.01575 530.6394 0 ] /First 195 0 R /Last 202 0 R /Next 203 0 R /Parent 172 0 R 
  /Prev 178 0 R /Title (Floating Point Unit)
>>
endobj
195 0 obj
<<
/Count 3 /Dest [ 151 0 R /XYZ 40.01575 297.4394 0 ] /First 196 0 R /Last 198 0 R /Next 199 0 R /Parent 194 0 R 
  /Title (Special values)
>>
endobj
196 0 obj
<<
/Dest [ 151 0 R /XYZ 40.01575 222.6394 0 ] /Next 197 0 R /Parent 195 0 R /Title (NaN or Invalid Operation)
>>
endobj
197 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 787.0394 0 ] /Next 198 0 R /Parent 195 0 R /Prev 196 0 R /Title (Zeroes or Underflows)
>>
endobj
198 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 690.6394 0 ] /Parent 195 0 R /Prev 197 0 R /Title (Infinites or Overflows)
>>
endobj
199 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 588.2394 0 ] /Next 200 0 R /Parent 194 0 R /Prev 195 0 R /Title (Exception configuration)
>>
endobj
200 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 513.4394 0 ] /Next 201 0 R /Parent 194 0 R /Prev 199 0 R /Title (The .double directive)
>>
endobj
201 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 357.8394 0 ] /Next 202 0 R /Parent 194 0 R /Prev 200 0 R /Title (The FCSR register)
>>
endobj
202 0 obj
<<
/Dest [ 156 0 R /XYZ 40.01575 115.0394 0 ] /Parent 194 0 R /Prev 201 0 R /Title (Instruction set)
>>
endobj
203 0 obj
<<
/Count 21 /Dest [ 161 0 R /XYZ 40.01575 787.0394 0 ] /First 204 0 R /Last 224 0 R /Next 225 0 R /Parent 172 0 R 
  /Prev 194 0 R /Title (The user interface)
>>
endobj
204 0 obj
<<
/Count 6 /Dest [ 161 0 R /XYZ 40.01575 493.8394 0 ] /First 205 0 R /Last 210 0 R /Next 211 0 R /Parent 203 0 R 
  /Title (The menu bar)
>>
endobj
205 0 obj
<<
/Dest [ 161 0 R /XYZ 40.01575 443.0394 0 ] /Next 206 0 R /Parent 204 0 R /Title (File)
>>
endobj
206 0 obj
<<
/Dest [ 161 0 R /XYZ 40.01575 262.6394 0 ] /Next 207 0 R /Parent 204 0 R /Prev 205 0 R /Title (Execute)
>>
endobj
207 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 787.0394 0 ] /Next 208 0 R /Parent 204 0 R /Prev 206 0 R /Title (Configure)
>>
endobj
208 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 648.6394 0 ] /Next 209 0 R /Parent 204 0 R /Prev 207 0 R /Title (Tools)
>>
endobj
209 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 564.2394 0 ] /Next 210 0 R /Parent 204 0 R /Prev 208 0 R /Title (Window)
>>
endobj
210 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 467.8394 0 ] /Parent 204 0 R /Prev 209 0 R /Title (Help)
>>
endobj
211 0 obj
<<
/Count 7 /Dest [ 162 0 R /XYZ 40.01575 383.4394 0 ] /First 212 0 R /Last 218 0 R /Next 219 0 R /Parent 203 0 R 
  /Prev 204 0 R /Title (Frames)
>>
endobj
212 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 332.6394 0 ] /Next 213 0 R /Parent 211 0 R /Title (Cycles)
>>
endobj
213 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 272.2394 0 ] /Next 214 0 R /Parent 211 0 R /Prev 212 0 R /Title (Registers)
>>
endobj
214 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 199.8394 0 ] /Next 215 0 R /Parent 211 0 R /Prev 213 0 R /Title (Statistics)
>>
endobj
215 0 obj
<<
/Dest [ 162 0 R /XYZ 40.01575 109.4394 0 ] /Next 216 0 R /Parent 211 0 R /Prev 214 0 R /Title (Pipeline)
>>
endobj
216 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 787.0394 0 ] /Next 217 0 R /Parent 211 0 R /Prev 215 0 R /Title (Memory)
>>
endobj
217 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 702.6394 0 ] /Next 218 0 R /Parent 211 0 R /Prev 216 0 R /Title (Code)
>>
endobj
218 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 630.2394 0 ] /Parent 211 0 R /Prev 217 0 R /Title (Input/Output)
>>
endobj
219 0 obj
<<
/Count 3 /Dest [ 163 0 R /XYZ 40.01575 557.8394 0 ] /First 220 0 R /Last 222 0 R /Next 223 0 R /Parent 203 0 R 
  /Prev 211 0 R /Title (Dialogs)
>>
endobj
220 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 495.0394 0 ] /Next 221 0 R /Parent 219 0 R /Title (Settings)
>>
endobj
221 0 obj
<<
/Dest [ 163 0 R /XYZ 40.01575 152.6394 0 ] /Next 222 0 R /Parent 219 0 R /Prev 220 0 R /Title (Dinero Frontend)
>>
endobj
222 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 787.0394 0 ] /Parent 219 0 R /Prev 221 0 R /Title (Help)
>>
endobj
223 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 738.6394 0 ] /Next 224 0 R /Parent 203 0 R /Prev 219 0 R /Title (Command line options)
>>
endobj
224 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 543.8394 0 ] /Parent 203 0 R /Prev 223 0 R /Title (Running EduMIPS64)
>>
endobj
225 0 obj
<<
/Count 8 /Dest [ 164 0 R /XYZ 40.01575 409.0394 0 ] /First 226 0 R /Last 226 0 R /Parent 172 0 R /Prev 203 0 R 
  /Title (Code Examples)
>>
endobj
226 0 obj
<<
/Count 7 /Dest [ 164 0 R /XYZ 40.01575 355.8394 0 ] /First 227 0 R /Last 233 0 R /Parent 225 0 R /Title (SYSCALL)
>>
endobj
227 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 251.0394 0 ] /Next 228 0 R /Parent 226 0 R /Title (SYSCALL 0)
>>
endobj
228 0 obj
<<
/Dest [ 164 0 R /XYZ 40.01575 159.8394 0 ] /Next 229 0 R /Parent 226 0 R /Prev 227 0 R /Title (SYSCALL 1)
>>
endobj
229 0 obj
<<
/Dest [ 165 0 R /XYZ 40.01575 414.2394 0 ] /Next 230 0 R /Parent 226 0 R /Prev 228 0 R /Title (SYSCALL 2)
>>
endobj
230 0 obj
<<
/Dest [ 166 0 R /XYZ 40.01575 729.0394 0 ] /Next 231 0 R /Parent 226 0 R /Prev 229 0 R /Title (SYSCALL 3)
>>
endobj
231 0 obj
<<
/Dest [ 166 0 R /XYZ 40.01575 257.8394 0 ] /Next 232 0 R /Parent 226 0 R /Prev 230 0 R /Title (SYSCALL 4)
>>
endobj
232 0 obj
<<
/Dest [ 167 0 R /XYZ 40.01575 504.2394 0 ] /Next 233 0 R /Parent 226 0 R /Prev 231 0 R /Title (SYSCALL 5)
>>
endobj
233 0 obj
<<
/Dest [ 167 0 R /XYZ 40.01575 279.0394 0 ] /Parent 226 0 R /Prev 232 0 R /Title (A more complex usage example of SYSCALL 5)
>>
endobj
234 0 obj
<<
/Count 28 /Kids [ 4 0 R 5 0 R 87 0 R 132 0 R 138 0 R 139 0 R 140 0 R 141 0 R 142 0 R 143 0 R 
  144 0 R 145 0 R 146 0 R 147 0 R 151 0 R 156 0 R 157 0 R 158 0 R 159 0 R 160 0 R 
  161 0 R 162 0 R 163 0 R 164 0 R 165 0 R 166 0 R 167 0 R 168 0 R ] /Type /Pages
>>
endobj
235 0 obj
<<
/Length 920
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 203.162 0 Td (EduMIPS64) Tj T* -203.162 0 Td ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 24 re B*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL 205.9245 0 Td (version 1.2.7.1) Tj T* -205.9245 0 Td ET
Q
Q
q
1 0 0 1 40.01575 650 cm
Q
q
1 0 0 1 40.01575 629.6 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F2 12 Tf 14.4 TL 91.90805 0 Td (Andrea Spadaccini and the EduMIPS64 development team) Tj T* -91.90805 0 Td ET
Q
Q
q
1 0 0 1 40.01575 544.5606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.4 Tm /F1 12 Tf 14.4 TL 220.602 0 Td (April 13, 2020) Tj T* -220.602 0 Td ET
Q
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
q
1 0 0 1 40.01575 524.1606 cm
Q
 
endstream
endobj
236 0 obj
<<
/Length 75
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 799.0394 cm
Q
 
endstream
endobj
237 0 obj
<<
/Length 9269
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 49.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 705 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 705 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 687 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Source files format) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 687 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 669 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Memory limits) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 669 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 651 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (.data) Tj /F1 10 Tf 0 0 .501961 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 651 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (.code) Tj /F1 10 Tf 0 0 .501961 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 633 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (#include) Tj /F1 10 Tf 0 0 .501961 rg ( command) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 615 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 597 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (ALU Instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 579 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (4) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Load/Store instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 561 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Flow control instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 543 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (8) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The ) Tj /F3 10 Tf 0 0 0 rg (SYSCALL) Tj /F1 10 Tf 0 0 .501961 rg ( instruction) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 525 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 0 - exit\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 507 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 1 - open\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 489 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 2 - close\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 471 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 3 - read\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 453 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 4 - write\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 435 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (SYSCALL 5 - printf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 417 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Other instructions) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 399 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (BREAK) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (NOP) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (TRAP) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (HALT) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Special values) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (NaN or Invalid Operation) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Zeroes or Underflows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Infinites or Overflows) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Exception configuration) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The .double directive) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The FCSR register) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Instruction set) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The menu bar) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (File) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Execute) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (17) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Configure) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Tools) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Window) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Frames) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
 
endstream
endobj
238 0 obj
<<
/Length 4880
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 403.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Cycles) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 381 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Registers) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 363 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Statistics) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 345 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Pipeline) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 327 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (18) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Memory) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 309 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Code) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 291 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Input/Output) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 273 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dialogs) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 255 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Settings) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 237 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dinero Frontend) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 219 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (19) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 201 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Command line options) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 183 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Running EduMIPS64) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 165 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 147 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 129 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 0) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 111 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 1) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 93 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 2) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 75 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (21) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 3) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 57 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 4) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 39 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 21 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (A more complex usage example of SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 443.2441 3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 403.0394 cm
Q
 
endstream
endobj
239 0 obj
<<
/Length 6953
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 30 re B*
Q
q
BT 1 0 0 1 0 4 Tm 24 TL /F2 20 Tf .12549 .262745 .360784 rg (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.439653 Tw (EduMIPS64 is a MIPS64 Instruction Set Architecture \(ISA\) simulator. It is designed to be used to execute small) Tj T* 0 Tw 1.976339 Tw (programs that use the subset of the MIPS64 ISA implemented by the simulator, allowing the user to see how) Tj T* 0 Tw -0.028732 Tw (instructions behave in the pipeline, how stalls are handled by the CPU, the status of registers and memory and much) Tj T* 0 Tw (more. It is both a simulator and a visual debugger.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
q
BT 1 0 0 1 0 26 Tm 13.57117 Tw 12 TL /F1 10 Tf 0 0 0 rg (The website for the project is ) Tj 0 0 .501961 rg (http://www.edumips.org) Tj 0 0 0 rg (, and the code is hosted at) Tj T* 0 Tw 2.308007 Tw 0 0 .501961 rg (http://github.com/lupino3/edumips64) Tj 0 0 0 rg (. If you find any bugs, or have any suggestion for improving the simulator,) Tj T* 0 Tw (please open an issue on github or send an email at ) Tj 0 0 .501961 rg (bugs@edumips.org) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.871268 Tw (EduMIPS64 is developed by a group of students of the University of Catania \(Italy\), and started as a clone of) Tj T* 0 Tw (WinMIPS64, even if now there are lots of differences between the two simulators.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 619.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This manual will introduce you to EduMIPS64, and will cover some details on how to use it.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F1 10 Tf 12 TL .000742 Tw (The first chapter of this manual covers the format of source files accepted by the simulator, describing the data types) Tj T* 0 Tw .308561 Tw (and the directives, in addition to command line parameters. In the second chapter there\222s an overview of the subset) Tj T* 0 Tw .184116 Tw (of the MIPS64 instruction set that is accepted by EduMIPS64, with all the needed parameters and indications to use) Tj T* 0 Tw 1.389705 Tw (them. The third chapter is a description of the Floating Point Unit and its instruction set. The fourth chapter is a) Tj T* 0 Tw 1.171894 Tw (description of the user interface of EduMIPS64, that explains the purpose of each frame and menu, along with a) Tj T* 0 Tw .137756 Tw (description of the configuration dialog, the Dinero frontend dialog, the Manual dialog and command line options. The) Tj T* 0 Tw (fifth chapter contains some useful examples.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This manual describes EduMIPS64 version 1.2.7.1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 475.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Source files format) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 445.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .264426 Tw (EduMIPS64 tries to follow the conventions used in other MIPS64 and DLX simulators, so that old time users will not) Tj T* 0 Tw (be confused by its syntax.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 415.8394 cm
q
BT 1 0 0 1 0 14 Tm .671794 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are two sections in a source file, the ) Tj /F3 10 Tf (data) Tj /F1 10 Tf ( section and the ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section, introduced respectively by the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf  T* 0 Tw (and the ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( directives. In the following listing you can see a very basic EduMIPS64 program:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 325.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 90 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 74 Tm /F4 10 Tf 12 TL (; This is a comment) Tj T* (        .data) Tj T* (label:  .word   15     ; This is an inline comment) Tj T*  T* (        .code) Tj T* (        daddi   r1, r0, 0) Tj T* (        syscall 0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 293.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .526705 Tw (To distinguish the various parts of each source code line, any combination of spaces and tabs can be used, as the) Tj T* 0 Tw (parser ignores multiple spaces and only detects whitespaces to separate tokens.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.799653 Tw (Comments can be specified using the \223;\224 character, everything that follows that character will be ignored. So a) Tj T* 0 Tw (comment can be used \223inline\224 \(after the directive\) or on a row by itself.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 209.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .238766 Tw (Labels can be used in the code to reference a memory cell or an instruction. They are case insensitive. Only a label) Tj T* 0 Tw 1.749705 Tw (for each source code line can be used. The label can be specified one or more rows above the effective data) Tj T* 0 Tw -0.000369 Tw (declaration or instruction, provided that there\222s nothing, except for comments and empty lines, between the label and) Tj T* 0 Tw (the declaration.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 176.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Memory limits) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 146.2394 cm
q
BT 1 0 0 1 0 14 Tm .443205 Tw 12 TL /F1 10 Tf 0 0 0 rg (EduMIPS64 has a fixed memory size for both data \(the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( section, capped at 640 kB \226 i.e., 80000 64-bit values\)) Tj T* 0 Tw (and instructions \(the ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( section, capped at 128 kB \226 i.e., 32000 instructions, each occupying 32 bits\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 128.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (These limits are hardcoded in the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.43937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (.data) Tj /F5 14 Tf .12549 .262745 .360784 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.43937 cm
q
BT 1 0 0 1 0 14 Tm .696506 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (data) Tj /F1 10 Tf ( section contains commands that specify how the memory must be filled before program execution starts.) Tj T* 0 Tw (The general form of a ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( command is:) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
 
endstream
endobj
240 0 obj
<<
/Length 14325
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 768.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] .datatype value1 [, value2 [, ...]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 748.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (EduMIPS64 supports different data types, that are described in the following table.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 742.2394 cm
Q
q
1 0 0 1 40.01575 648.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 88 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 88 495.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 72 495.2441 -18 re f*
1 1 1 rg
n 0 54 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 495.2441 -18 re f*
1 1 1 rg
n 0 18 495.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 88 495.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 111.811 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 44.23551 0 Td (Type) Tj T* -44.23551 0 Td ET
Q
Q
q
1 0 0 1 129.811 75 cm
q
.960784 .960784 .862745 rg
n 0 0 213.111 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 85.43548 0 Td (Directive) Tj T* -85.43548 0 Td ET
Q
Q
q
1 0 0 1 354.922 75 cm
q
.960784 .960784 .862745 rg
n 0 0 134.3221 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 36.32106 0 Td (Bits required) Tj T* -36.32106 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Byte) Tj T* ET
Q
Q
q
1 0 0 1 129.811 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.byte) Tj T* ET
Q
Q
q
1 0 0 1 354.922 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Half word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.word16) Tj T* ET
Q
Q
q
1 0 0 1 354.922 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (.word32) Tj T* ET
Q
Q
q
1 0 0 1 354.922 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (32) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Double Word) Tj T* ET
Q
Q
q
1 0 0 1 129.811 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (.word) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (.word64) Tj T* ET
Q
Q
q
1 0 0 1 354.922 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (64) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 495.2441 72 l S
n 0 54 m 495.2441 54 l S
n 0 36 m 495.2441 36 l S
n 0 18 m 495.2441 18 l S
n 123.811 0 m 123.811 88 l S
n 348.922 0 m 348.922 88 l S
n 0 88 m 495.2441 88 l S
n 0 0 m 495.2441 0 l S
n 0 0 m 0 88 l S
n 495.2441 0 m 495.2441 88 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 648.2394 cm
Q
q
1 0 0 1 40.01575 630.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Please note that a double word can be introduced either by the ) Tj /F3 10 Tf (.word) Tj /F1 10 Tf ( directive or by the ) Tj /F3 10 Tf (.word64) Tj /F1 10 Tf ( directive.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 600.2394 cm
q
BT 1 0 0 1 0 14 Tm .935479 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the data types are interpreted as signed. This means that integer literals in the ) Tj /F3 10 Tf (.data) Tj /F1 10 Tf ( section must be between) Tj T* 0 Tw (-2^\(n-1\) and 2^\(n-1\) - 1 \(inclusive\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.2394 cm
q
BT 1 0 0 1 0 38 Tm 1.639163 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is a big difference between declaring a list of data elements using a single directive or by using multiple) Tj T* 0 Tw .000205 Tw (directives of the same type. EduMIPS64 starts writing from the next 64-bit double word as soon as it finds a datatype) Tj T* 0 Tw .068921 Tw (identifier, so the first ) Tj /F3 10 Tf (.byte) Tj /F1 10 Tf ( statement in the following listing will put the numbers 1, 2, 3 and 4 in the space of 4 bytes,) Tj T* 0 Tw (taking 32 bits, while code in the next four rows will put each number in a different memory cell, occupying 32 bytes:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 467.4394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (.data) Tj T* (.byte    1, 2, 3, 4) Tj T* (.byte    1) Tj T* (.byte    2) Tj T* (.byte    3) Tj T* (.byte    4) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 423.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.082295 Tw (In the following table, the memory is represented using byte-sized cells and each row is 64 bits wide. The address on) Tj T* 0 Tw .808368 Tw (the left side of each row of the table refers to the right-most memory cell, that has the lowest address of the eight) Tj T* 0 Tw (cells in each line.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.4394 cm
Q
q
1 0 0 1 40.01575 327.4394 cm
1 1 1 rg
n 0 90 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 72 515.2441 -18 re f*
1 1 1 rg
n 0 54 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 515.2441 -18 re f*
1 1 1 rg
n 0 18 515.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 177.748 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 177.748 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 177.748 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (24) Tj T* ET
Q
Q
q
1 0 0 1 177.748 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (36) Tj T* ET
Q
Q
q
1 0 0 1 177.748 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 220.685 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 263.622 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 306.5591 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 349.4961 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 392.4331 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 435.3701 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 478.3071 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 515.2441 72 l S
n 0 54 m 515.2441 54 l S
n 0 36 m 515.2441 36 l S
n 0 18 m 515.2441 18 l S
n 171.748 0 m 171.748 90 l S
n 214.685 0 m 214.685 90 l S
n 257.622 0 m 257.622 90 l S
n 300.5591 0 m 300.5591 90 l S
n 343.4961 0 m 343.4961 90 l S
n 386.4331 0 m 386.4331 90 l S
n 429.3701 0 m 429.3701 90 l S
n 472.3071 0 m 472.3071 90 l S
n 0 90 m 515.2441 90 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 90 l S
n 515.2441 0 m 515.2441 90 l S
Q
Q
q
1 0 0 1 40.01575 327.4394 cm
Q
q
1 0 0 1 40.01575 309.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (There are some special directives that need to be discussed: ) Tj /F3 10 Tf (.space) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (.asciiz) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.4394 cm
q
BT 1 0 0 1 0 26 Tm 2.077584 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.space) Tj /F1 10 Tf ( directive is used to leave some free space in memory. It accepts as a parameter an integer, that) Tj T* 0 Tw -0.075268 Tw (indicates the number of bytes that must be left empty. It is handy when you must save some space in memory for the) Tj T* 0 Tw (results of your computations.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 237.4394 cm
q
BT 1 0 0 1 0 14 Tm 2.33694 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( directive accepts strings containing any of the ASCII characters, and some special C-like escaping) Tj T* 0 Tw (sequences, that are described in the following table, and puts those strings in memory.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 231.4394 cm
Q
q
1 0 0 1 40.01575 119.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 106 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 106 495.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 90 495.2441 -18 re f*
1 1 1 rg
n 0 72 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 495.2441 -18 re f*
1 1 1 rg
n 0 36 495.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 495.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 106 495.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 93 cm
q
.960784 .960784 .862745 rg
n 0 0 143.9102 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 25.27009 0 Td (Escaping sequence) Tj T* -25.27009 0 Td ET
Q
Q
q
1 0 0 1 161.9102 93 cm
q
.960784 .960784 .862745 rg
n 0 0 235.622 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 97.53102 0 Td (Meaning) Tj T* -97.53102 0 Td ET
Q
Q
q
1 0 0 1 409.5322 93 cm
q
.960784 .960784 .862745 rg
n 0 0 79.71187 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 13.46093 0 Td (ASCII code) Tj T* -13.46093 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\0) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Null byte) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\t) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Horizontal tabulation) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\n) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Newline character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (") Tj T* ET
Q
Q
q
1 0 0 1 161.9102 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Literal quote character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (34) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (\\) Tj T* ET
Q
Q
q
1 0 0 1 161.9102 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Literal backslash character) Tj T* ET
Q
Q
q
1 0 0 1 409.5322 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (92) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 90 m 495.2441 90 l S
n 0 72 m 495.2441 72 l S
n 0 54 m 495.2441 54 l S
n 0 36 m 495.2441 36 l S
n 0 18 m 495.2441 18 l S
n 155.9102 0 m 155.9102 106 l S
n 403.5322 0 m 403.5322 106 l S
n 0 106 m 495.2441 106 l S
n 0 0 m 495.2441 0 l S
n 0 0 m 0 106 l S
n 495.2441 0 m 495.2441 106 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 119.4394 cm
Q
q
1 0 0 1 40.01575 89.43937 cm
q
BT 1 0 0 1 0 14 Tm .165535 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (.asciiz) Tj /F1 10 Tf ( directive behaves exactly like the ) Tj /F3 10 Tf (.ascii) Tj /F1 10 Tf ( command, with the difference that it automatically ends the string) Tj T* 0 Tw (with a null byte.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 56.63937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (.code) Tj /F5 14 Tf .12549 .262745 .360784 rg ( section) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
 
endstream
endobj
241 0 obj
<<
/Length 10521
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
BT 1 0 0 1 0 14 Tm .589116 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section contains commands that specify how the memory must be filled when the program will start. The) Tj T* 0 Tw (general form of a ) Tj /F3 10 Tf (.code) Tj /F1 10 Tf ( command is:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 744.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] instruction [param1 [, param2 [, param3]]]) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 724.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (code) Tj /F1 10 Tf ( section can be specified with the ) Tj /F3 10 Tf (.text) Tj /F1 10 Tf ( alias.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 706.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The number and the type of parameters depends on the instruction itself.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 688.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Instructions can take three types of parameters:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 682.2394 cm
Q
q
1 0 0 1 40.01575 682.2394 cm
Q
q
1 0 0 1 40.01575 658.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .224952 Tw 12 TL /F3 10 Tf 0 0 0 rg (Registers) Tj /F1 10 Tf ( a register parameter is indicated by an uppercase or lowercase \223r\224, or a $, followed by the number of) Tj T* 0 Tw (the register \(between 0 and 31\), as in \223r4\224, \223R4\224 or \223$4\224;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 652.2394 cm
Q
q
1 0 0 1 40.01575 616.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .016385 Tw 12 TL /F3 10 Tf 0 0 0 rg (Immediate values) Tj /F1 10 Tf ( an immediate value can be a number or a label; the number can be specified in base 10 or in) Tj T* 0 Tw .915783 Tw (base 16: base 10 numbers are simply inserted by writing the number, while base 16 number are inserted by) Tj T* 0 Tw (putting before the number the prefix \2230x\224) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 586.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.010936 Tw 12 TL /F3 10 Tf 0 0 0 rg (Address) Tj /F1 10 Tf ( an address is composed by an immediate value followed by a register name enclosed in brackets. The) Tj T* 0 Tw (value of the register will be used as base, the value of the immediate will be the offset.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 586.2394 cm
Q
q
1 0 0 1 40.01575 568.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The size of immediate values is limited by the number of bits that are available in the bit encoding of the instruction.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 538.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.110742 Tw (You can use standard MIPS assembly aliases to address the first 32 registers, appending the alias to one of the) Tj T* 0 Tw (standard register prefixes like \223r\224, \223$\224 and \223R\224. See the next table.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 532.2394 cm
Q
q
1 0 0 1 40.01575 54.85039 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 466 cm
Q
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 466 489.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 450 489.2441 -18 re f*
1 1 1 rg
n 0 432 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 414 489.2441 -18 re f*
1 1 1 rg
n 0 396 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 378 489.2441 -18 re f*
1 1 1 rg
n 0 360 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 342 489.2441 -18 re f*
1 1 1 rg
n 0 324 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 306 489.2441 -18 re f*
1 1 1 rg
n 0 288 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 270 489.2441 -18 re f*
1 1 1 rg
n 0 252 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 234 489.2441 -18 re f*
1 1 1 rg
n 0 216 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 198 489.2441 -18 re f*
1 1 1 rg
n 0 180 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 162 489.2441 -18 re f*
1 1 1 rg
n 0 144 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 126 489.2441 -18 re f*
1 1 1 rg
n 0 108 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 90 489.2441 -18 re f*
1 1 1 rg
n 0 72 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 489.2441 -18 re f*
1 1 1 rg
n 0 36 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 489.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 466 489.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 453 cm
q
.960784 .960784 .862745 rg
n 0 0 267.5681 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 113.779 0 Td (Register) Tj T* -113.779 0 Td ET
Q
Q
q
1 0 0 1 285.5681 453 cm
q
.960784 .960784 .862745 rg
n 0 0 197.676 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 86.88802 0 Td (Alias) Tj T* -86.88802 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 435 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 435 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (zero) Tj T* ET
Q
Q
q
1 0 0 1 6 417 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 417 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (at) Tj T* ET
Q
Q
q
1 0 0 1 6 399 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 399 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (v0) Tj T* ET
Q
Q
q
1 0 0 1 6 381 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 381 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (v1) Tj T* ET
Q
Q
q
1 0 0 1 6 363 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 363 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a0) Tj T* ET
Q
Q
q
1 0 0 1 6 345 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 345 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a1) Tj T* ET
Q
Q
q
1 0 0 1 6 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 327 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a2) Tj T* ET
Q
Q
q
1 0 0 1 6 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 309 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (a3) Tj T* ET
Q
Q
q
1 0 0 1 6 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 291 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t0) Tj T* ET
Q
Q
q
1 0 0 1 6 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 273 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t1) Tj T* ET
Q
Q
q
1 0 0 1 6 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 255 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t2) Tj T* ET
Q
Q
q
1 0 0 1 6 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 237 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t3) Tj T* ET
Q
Q
q
1 0 0 1 6 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 219 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t4) Tj T* ET
Q
Q
q
1 0 0 1 6 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 201 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t5) Tj T* ET
Q
Q
q
1 0 0 1 6 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 183 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t6) Tj T* ET
Q
Q
q
1 0 0 1 6 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 165 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t7) Tj T* ET
Q
Q
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s0) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s1) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s2) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s3) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s4) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s5) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s6) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (s7) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t8) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 489.2441 0 l S
n 0 450 m 489.2441 450 l S
n 0 432 m 489.2441 432 l S
n 0 414 m 489.2441 414 l S
n 0 396 m 489.2441 396 l S
n 0 378 m 489.2441 378 l S
n 0 360 m 489.2441 360 l S
n 0 342 m 489.2441 342 l S
n 0 324 m 489.2441 324 l S
n 0 306 m 489.2441 306 l S
n 0 288 m 489.2441 288 l S
n 0 270 m 489.2441 270 l S
n 0 252 m 489.2441 252 l S
n 0 234 m 489.2441 234 l S
n 0 216 m 489.2441 216 l S
n 0 198 m 489.2441 198 l S
n 0 180 m 489.2441 180 l S
n 0 162 m 489.2441 162 l S
n 0 144 m 489.2441 144 l S
n 0 126 m 489.2441 126 l S
n 0 108 m 489.2441 108 l S
n 0 90 m 489.2441 90 l S
n 0 72 m 489.2441 72 l S
n 0 54 m 489.2441 54 l S
n 0 36 m 489.2441 36 l S
n 0 18 m 489.2441 18 l S
n 279.5681 0 m 279.5681 466 l S
n 0 466 m 489.2441 466 l S
n 0 0 m 0 466 l S
n 489.2441 0 m 489.2441 466 l S
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Welcome to the EduMIPS64 documentation!) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
 
endstream
endobj
242 0 obj
<<
/Length 8544
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 661.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
1 1 1 rg
n 0 126 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 108 489.2441 -18 re f*
1 1 1 rg
n 0 90 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 72 489.2441 -18 re f*
1 1 1 rg
n 0 54 489.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 36 489.2441 -18 re f*
1 1 1 rg
n 0 18 489.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (25) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (t9) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (26) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (k0) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (27) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (k1) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (28) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (gp) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (29) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (sp) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (30) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (fp) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (31) Tj T* ET
Q
Q
q
1 0 0 1 285.5681 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ra) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 126 m 489.2441 126 l S
n 0 108 m 489.2441 108 l S
n 0 90 m 489.2441 90 l S
n 0 72 m 489.2441 72 l S
n 0 54 m 489.2441 54 l S
n 0 36 m 489.2441 36 l S
n 0 18 m 489.2441 18 l S
n 279.5681 0 m 279.5681 126 l S
n 0 0 m 0 126 l S
n 489.2441 0 m 489.2441 126 l S
n 0 0 m 489.2441 0 l S
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
q
1 0 0 1 40.01575 661.0394 cm
Q
q
1 0 0 1 40.01575 628.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (#include) Tj /F5 14 Tf .12549 .262745 .360784 rg ( command) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 574.2394 cm
q
BT 1 0 0 1 0 38 Tm .864116 Tw 12 TL /F1 10 Tf 0 0 0 rg (Source files can contain the ) Tj /F3 10 Tf (#include filename) Tj /F1 10 Tf ( command, which has the effect of putting in place of the command) Tj T* 0 Tw 2.302576 Tw (row the content of the file ) Tj /F3 10 Tf (filename) Tj /F1 10 Tf (. It is useful if you want to include external routines, and it comes with a) Tj T* 0 Tw .307705 Tw (loop-detection algorithm that will warn you if you try to do something like \223) Tj /F3 10 Tf (#include A.s) Tj /F1 10 Tf (\224 in file ) Tj /F3 10 Tf (B.s) Tj /F1 10 Tf ( and \223) Tj /F3 10 Tf (#include B.s) Tj /F1 10 Tf (\224) Tj T* 0 Tw (in file ) Tj /F3 10 Tf (A.s) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 539.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.173561 Tw (In this section we will the subset of the MIPS64 instruction set that EduMIPS64 recognizes. We can operate two) Tj T* 0 Tw .151894 Tw (different taxonomic classification: one based on the functionality of the instructions and one based on the type of the) Tj T* 0 Tw (parameters of the instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 455.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.1243 Tw (The first classification divides instruction into three categories: ALU instructions, Load/Store instructions, Flow control) Tj T* 0 Tw 1.70494 Tw (instructions. The next three subsections will describe each category and every instruction that belongs to those) Tj T* 0 Tw (categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 437.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The fourth subsection will describe instructions that do not fit in any of the three categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 404.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (ALU Instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 362.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.021095 Tw (The Arithmetic Logic Unit \(in short, ALU\) is a part of the execution unit of a CPU, that has the duty of doing) Tj T* 0 Tw .381268 Tw (arithmetical and logic operations. So in the ALU instructions group we will find those instructions that do this kind of) Tj T* 0 Tw (operations.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 344.2394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (ALU Instructions can be divided in two groups: ) Tj /F3 10 Tf (R-Type) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (I-Type) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 314.2394 cm
q
BT 1 0 0 1 0 14 Tm 1.175783 Tw 12 TL /F1 10 Tf 0 0 0 rg (Four of those instructions make use of two special registers: LO and HI. They are internal CPU registers, whose) Tj T* 0 Tw (value can be accessed through the ) Tj /F3 10 Tf (MFLO) Tj /F1 10 Tf ( and ) Tj /F3 10 Tf (MFHI) Tj /F1 10 Tf ( instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 296.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here\222s the list of R-Type ALU Instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 290.2394 cm
Q
q
1 0 0 1 40.01575 290.2394 cm
Q
q
1 0 0 1 40.01575 260.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (AND rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise AND between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 254.2394 cm
Q
q
1 0 0 1 40.01575 212.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADD rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .072705 Tw (Sums the content of 32-bits registers rs and rt, considering them as signed values, and puts the result into rd. If) Tj T* 0 Tw (an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 206.2394 cm
Q
q
1 0 0 1 40.01575 164.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .017705 Tw (Sums the content of 32-bits registers rs and rt, and puts the result into rd. No integer overflow occurs under any) Tj T* 0 Tw (circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 164.2394 cm
Q
q
1 0 0 1 40.01575 158.2394 cm
Q
q
1 0 0 1 40.01575 158.2394 cm
Q
q
1 0 0 1 40.01575 116.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADD rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .072705 Tw (Sums the content of 64-bits registers rs and rt, considering them as signed values, and puts the result into rd. If) Tj T* 0 Tw (an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 110.2394 cm
Q
q
1 0 0 1 40.01575 68.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .017705 Tw (Sums the content of 64-bits registers rs and rt, and puts the result into rd. No integer overflow occurs under any) Tj T* 0 Tw (circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 68.23937 cm
Q
q
1 0 0 1 40.01575 66.85039 cm
Q
q
1 0 0 1 40.01575 66.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
 
endstream
endobj
243 0 obj
<<
/Length 8787
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DDIV rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.490829 Tw (Executes the division between 64-bits registers rs and rt, putting the 64-bits quotient in LO and the 64-bits) Tj T* 0 Tw (remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DDIVU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .334006 Tw (Executes the division between 64-bits registers rs and rt, considering them as unsigned values and putting the) Tj T* 0 Tw (64-bits quotient in LO and the 64-bits remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 649.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIV rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.490829 Tw (Executes the division between 32-bits registers rs and rt, putting the 32-bits quotient in LO and the 32-bits) Tj T* 0 Tw (remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 643.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIVU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .334006 Tw (Executes the division between 32-bits registers rs and rt, considering them as unsigned values and putting the) Tj T* 0 Tw (32-bits quotient in LO and the 32-bits remainder in HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULT rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .54294 Tw (Executes the multiplication between 64-bits registers rs and rt, putting the low-order 64-bits doubleword of the) Tj T* 0 Tw (result into special register LO and the high-order 64-bits doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 64-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw 2.432273 Tw (putting the low-order 64-bits doubleword of the result into special register LO and the high-order 64-bits) Tj T* 0 Tw (doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 487.0394 cm
Q
q
1 0 0 1 40.01575 433.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMULTU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 64-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw 2.432273 Tw (putting the low-order 64-bits doubleword of the result into special register LO and the high-order 64-bits) Tj T* 0 Tw (doubleword of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 427.0394 cm
Q
q
1 0 0 1 40.01575 385.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSLL rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .156705 Tw (Does a left shift of 64-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts the) Tj T* 0 Tw (result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 379.0394 cm
Q
q
1 0 0 1 40.01575 337.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSLLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.065295 Tw (Does a left shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned value,) Tj T* 0 Tw (and puts the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 331.0394 cm
Q
q
1 0 0 1 40.01575 277.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRA rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .721268 Tw (Does a right shift of 64-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw .017814 Tw (the result into 64-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is zero, otherwise they) Tj T* 0 Tw (are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 271.0394 cm
Q
q
1 0 0 1 40.01575 217.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRAV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned) Tj T* 0 Tw 1.049243 Tw (value, and puts the result into 64-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is) Tj T* 0 Tw (zero, otherwise they are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 211.0394 cm
Q
q
1 0 0 1 40.01575 169.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRL rd, rs, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .604426 Tw (Does a right shift of 64-bits register rs, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw (the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 163.0394 cm
Q
q
1 0 0 1 40.01575 121.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSRLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 64-bits register rt, by the amount specified in low-order 6-bits of rs threatd as unsigned) Tj T* 0 Tw (value, and puts the result into 64-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 115.0394 cm
Q
q
1 0 0 1 40.01575 73.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSUB rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .390227 Tw (Subtracts the value of 64-bits register rt to 64-bits register rs, considering them as signed values, and puts the) Tj T* 0 Tw (result in rd. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 67.03937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
 
endstream
endobj
244 0 obj
<<
/Length 9355
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DSUBU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.306531 Tw (Subtracts the value of 64-bits register rt to 64-bits register rs, and puts the result in rd. No integer overflow) Tj T* 0 Tw (occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFLO rd) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Moves the content of the special register LO into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 673.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFHI rd) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Moves the content of the special register HI into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVN rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is different from zero, then moves the content of rs into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVZ rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is equal to zero, then moves the content of rs into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MULT rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .683381 Tw (Executes the multiplication between 32-bits registers rs and rt, putting the low-order 32-bits word of the result) Tj T* 0 Tw (into special register LO and the high-order 32-bits word of the result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MULTU rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.169578 Tw (Executes the multiplication between 32-bits registers rs and rt, considering them as unsigned values and) Tj T* 0 Tw .791894 Tw (putting the low-order 32-bits word of the result into special register LO and the high-order 32-bits word of the) Tj T* 0 Tw (result into special register HI.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 487.0394 cm
Q
q
1 0 0 1 40.01575 457.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (OR rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise OR between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 451.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLL rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .156705 Tw (Does a left shift of 32-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts the) Tj T* 0 Tw (result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 403.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.065295 Tw (Does a left shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned value,) Tj T* 0 Tw (and puts the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 355.0394 cm
Q
q
1 0 0 1 40.01575 301.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRA rd, rt, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .721268 Tw (Does a right shift of 32-bits register rt, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw .017814 Tw (the result into 32-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is zero, otherwise they) Tj T* 0 Tw (are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 295.0394 cm
Q
q
1 0 0 1 40.01575 241.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRAV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned) Tj T* 0 Tw 1.049243 Tw (value, and puts the result into 32-bits register rd. Empty bits are padded with zeros if the leftmost bit of rt is) Tj T* 0 Tw (zero, otherwise they are padded with ones.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 235.0394 cm
Q
q
1 0 0 1 40.01575 193.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRL rd, rs, sa) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .604426 Tw (Does a right shift of 32-bits register rs, by the amount specified in the immediate \(positive\) value sa, and puts) Tj T* 0 Tw (the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 187.0394 cm
Q
q
1 0 0 1 40.01575 145.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SRLV rd, rt, rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.160215 Tw (Does a right shift of 32-bits register rt, by the amount specified in low-order 5-bits of rs threatd as unsigned) Tj T* 0 Tw (value, and puts the result into 32-bits register rd. Empty bits are padded with zeros.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 139.0394 cm
Q
q
1 0 0 1 40.01575 97.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUB rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .390227 Tw (Subtracts the value of 32-bits register rt to 32-bits register rs, considering them as signed values, and puts the) Tj T* 0 Tw (result in rd. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 91.03937 cm
Q
q
1 0 0 1 40.01575 79.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUBU rd, rs, rt) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.03937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.306531 Tw (Subtracts the value of 32-bits register rt to 32-bits register rs, and puts the result in rd. No integer overflow) Tj T* 0 Tw (occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.03937 cm
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
 
endstream
endobj
245 0 obj
<<
/Length 8995
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 787.0394 cm
Q
q
1 0 0 1 40.01575 745.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLT rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.102964 Tw (Sets the value of rd to 1 if the value of rs is less than the value of rt, otherwise sets it to 0. This instruction) Tj T* 0 Tw (performs a signed comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTU rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.102964 Tw (Sets the value of rd to 1 if the value of rs is less than the value of rt, otherwise sets it to 0. This instruction) Tj T* 0 Tw (performs an unsigned comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 661.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (XOR rd, rs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise exclusive OR \(XOR\) between rs and rt, and puts the result into rd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 661.0394 cm
Q
q
1 0 0 1 40.01575 643.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here\222s the list of I-Type ALU Instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .512006 Tw (Executes the sum between 32-bits register rs and the immediate value, putting the result in rt. This instruction) Tj T* 0 Tw (considers rs and the immediate value as signed values. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 589.0394 cm
Q
q
1 0 0 1 40.01575 547.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADDIU rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 32-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 541.0394 cm
Q
q
1 0 0 1 40.01575 541.0394 cm
Q
q
1 0 0 1 40.01575 511.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ANDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes the bitwise AND between rs and the immediate value, putting the result in rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 505.0394 cm
Q
q
1 0 0 1 40.01575 463.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .512006 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. This instruction) Tj T* 0 Tw (considers rs and the immediate value as signed values. If an overflow occurs then trap.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 457.0394 cm
Q
q
1 0 0 1 40.01575 415.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDIU rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 415.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 367.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DADDUI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.75377 Tw (Executes the sum between 64-bits register rs and the immediate value, putting the result in rt. No integer) Tj T* 0 Tw (overflow occurs under any circumstances.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 367.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
Q
q
1 0 0 1 40.01575 361.0394 cm
Q
q
1 0 0 1 40.01575 319.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LUI rt, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.572705 Tw (Loads the constant defined in the immediate value in the upper half \(16 bit\) of the lower 32 bits of rt,) Tj T* 0 Tw (sign-extending the upper 32 bits of the register.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 313.0394 cm
Q
q
1 0 0 1 40.01575 283.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ORI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes the bitwise OR between rs and the immediate value, putting the result in rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 277.0394 cm
Q
q
1 0 0 1 40.01575 235.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .880564 Tw (Sets the value of rt to 1 if the value of rs is less than the value of the immediate, otherwise sets it to 0. This) Tj T* 0 Tw (instruction performs a signed comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 229.0394 cm
Q
q
1 0 0 1 40.01575 187.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SLTUI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .880564 Tw (Sets the value of rt to 1 if the value of rs is less than the value of the immediate, otherwise sets it to 0. This) Tj T* 0 Tw (instruction performs an unsigned comparison.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 181.0394 cm
Q
q
1 0 0 1 40.01575 151.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (XORI rt, rs, immediate) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bitwise exclusive OR \(XOR\) between rs and the immediate value, and puts the result into rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 151.0394 cm
Q
q
1 0 0 1 40.01575 118.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Load/Store instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 88.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.425256 Tw (This category contains all the instructions that operate transfers between registers and the memory. All of these) Tj T* 0 Tw (instructions are in the form:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 69.43937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL ([label:] instruction rt, offset\(base\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
 
endstream
endobj
246 0 obj
<<
/Length 8428
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 751.0394 cm
q
BT 1 0 0 1 0 26 Tm .152004 Tw 12 TL /F1 10 Tf 0 0 0 rg (Where rt is the source or destination register, depending if we are using a store or a load instruction; offset is a label) Tj T* 0 Tw .024277 Tw (or an immediate value and base is a register. The address is obtained by adding to the value of the register ) Tj /F3 10 Tf (base) Tj /F1 10 Tf ( the) Tj T* 0 Tw (immediate value ) Tj /F3 10 Tf (offset) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .648005 Tw (The address specified must be aligned according to the data type that is treated. Load instructions ending with \223U\224) Tj T* 0 Tw (treat the content of the register rt as an unsigned value.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of load instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 697.0394 cm
Q
q
1 0 0 1 40.01575 655.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LB rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 649.0394 cm
Q
q
1 0 0 1 40.01575 607.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LBU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.128205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as an) Tj T* 0 Tw (unsigned byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 559.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LD rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (double word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 553.0394 cm
Q
q
1 0 0 1 40.01575 511.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LH rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 505.0394 cm
Q
q
1 0 0 1 40.01575 463.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LHU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.128205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as an) Tj T* 0 Tw (unsigned half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 457.0394 cm
Q
q
1 0 0 1 40.01575 415.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LW rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 409.0394 cm
Q
q
1 0 0 1 40.01575 367.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LWU rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.406205 Tw (Loads the content of the memory cell at address specified by offset and base in register rt, treating it as a) Tj T* 0 Tw (signed word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 367.0394 cm
Q
q
1 0 0 1 40.01575 349.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of store instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 343.0394 cm
Q
q
1 0 0 1 40.01575 343.0394 cm
Q
q
1 0 0 1 40.01575 313.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SB rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a byte.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 307.0394 cm
Q
q
1 0 0 1 40.01575 277.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SD rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a double word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 271.0394 cm
Q
q
1 0 0 1 40.01575 241.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SH rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a half word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 235.0394 cm
Q
q
1 0 0 1 40.01575 205.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SW rt, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Stores the content of register rt in the memory cell specified by offset and base, treating it as a word.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 205.0394 cm
Q
q
1 0 0 1 40.01575 172.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Flow control instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 142.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.223705 Tw (Flow control instructions are used to alter the order of instructions that are fetched by the CPU. We can make a) Tj T* 0 Tw (distinction between these instructions: R-Type, I-Type and J-Type.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 112.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .379689 Tw (Those instructions effectively executes the jump in the ID stage, so often an useless fetch is executed. In this case,) Tj T* 0 Tw (two instructions are removed from the pipeline, and the branch taken stalls counter is incremented by two units.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 94.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of R-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 88.23937 cm
Q
q
1 0 0 1 40.01575 88.23937 cm
Q
q
1 0 0 1 40.01575 76.23937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JALR rs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8) Tj T* ET
Q
Q
 
endstream
endobj
247 0 obj
<<
/Length 8525
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 11 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .071205 Tw (Puts the content of rs into the program counter, and puts into R31 the address of the instruction that follows the) Tj T* 0 Tw (JALR instruction, the return value.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 757.0394 cm
Q
q
1 0 0 1 40.01575 727.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JR rs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Puts the content of rs into the program counter.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 727.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of I-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 703.0394 cm
Q
q
1 0 0 1 40.01575 673.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (B offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Unconditionally jumps to offset) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
Q
q
1 0 0 1 40.01575 637.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BEQ rs, rt, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is equal to rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.0394 cm
Q
q
1 0 0 1 40.01575 601.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BEQZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is equal to zero.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 595.0394 cm
Q
q
1 0 0 1 40.01575 565.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BGEZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rs is greather than zero, does a PC-relative jump to offset.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 559.0394 cm
Q
q
1 0 0 1 40.01575 529.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BNE rs, rt, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is not equal to rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 523.0394 cm
Q
q
1 0 0 1 40.01575 493.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BNEZ rs, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Jumps to offset if rs is not equal to zero.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 493.0394 cm
Q
q
1 0 0 1 40.01575 475.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (List of J-Type flow control instructions:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 469.0394 cm
Q
q
1 0 0 1 40.01575 469.0394 cm
Q
q
1 0 0 1 40.01575 439.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (J target) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Puts the immediate value target into the program counter.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 433.0394 cm
Q
q
1 0 0 1 40.01575 391.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (JAL target) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .295783 Tw (Puts the immediate value target into the program counter, and puts into R31 the address of the instruction that) Tj T* 0 Tw (follows the JAL instruction, the return value.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 391.0394 cm
Q
q
1 0 0 1 40.01575 358.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The ) Tj /F3 14 Tf 0 0 0 rg (SYSCALL) Tj /F5 14 Tf .12549 .262745 .360784 rg ( instruction) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 328.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .17493 Tw (The SYSCALL instruction offers to the programmer an operating-system-like interface, making available six different) Tj T* 0 Tw (system calls.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 298.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .029705 Tw (System calls expect that the address of their parameters is stored in register R14 \($t6\), and will put their return value) Tj T* 0 Tw (in register R1 \($at\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 280.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (System calls follow as much as possible the POSIX convention.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 249.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 0 - exit\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 231.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 0 does not expect any parameter, nor it returns anything. It simply stops the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 201.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .266265 Tw (Note that if the simulator does not find SYSCALL 0 in the source code, or any of its equivalents \(HALT - TRAP 0\), it) Tj T* 0 Tw (will be added automatically at the end of the source.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 171.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 1 - open\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 129.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .523182 Tw (The SYSCALL 1 expects two parameters: a zero-terminated string that indicates the pathname of the file that must) Tj T* 0 Tw -0.108853 Tw (be opened, and a double word containing an integer that indicates the flags that must be used to specify how to open) Tj T* 0 Tw (the file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 111.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This integer must be built summing the flags that you want to use, choosing them from the following list:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 105.4394 cm
Q
q
1 0 0 1 40.01575 105.4394 cm
Q
q
1 0 0 1 40.01575 93.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_RDONLY \(0x01\)) Tj /F1 10 Tf ( Opens the file in read only mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 87.43937 cm
Q
q
1 0 0 1 40.01575 75.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_WRONLY \(0x02\)) Tj /F1 10 Tf ( Opens the file in write only mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 69.43937 cm
Q
q
1 0 0 1 40.01575 57.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_RDWR \(0x03\)) Tj /F1 10 Tf ( Opens the file in read/write mode;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (9) Tj T* ET
Q
Q
 
endstream
endobj
248 0 obj
<<
/Length 8448
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 775.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_CREAT \(0x04\)) Tj /F1 10 Tf ( Creates the file if it does not exist;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 757.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_APPEND \(0x08\)) Tj /F1 10 Tf ( In write mode, appends written text at the end of the file;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 751.0394 cm
Q
q
1 0 0 1 40.01575 739.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (O_TRUNC \(0x08\)) Tj /F1 10 Tf ( In write mode, deletes the content of the file as soon as it is opened.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 739.0394 cm
Q
q
1 0 0 1 40.01575 709.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.084481 Tw (It is mandatory to specify one of the first three modes. The fourth and the fifth modes are exclusive, you can not) Tj T* 0 Tw (specify O_APPEND if you specify O_TRUNC \(and vice versa\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 667.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .027705 Tw (You can specify a combination of modes by simply adding the integer values of those flags. For instance, if you want) Tj T* 0 Tw .425542 Tw (to open a file in write only mode and append the written text to the end of file, you should specify the mode 2 + 8 =) Tj T* 0 Tw (10.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 637.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .025641 Tw (The return value of the system call is the new file descriptor associated with the file, that can be further used with the) Tj T* 0 Tw (other system calls. If there is an error, the return value will be -1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 606.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 2 - close\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 588.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 2 expects only one parameter, the file descriptor of the file that is closed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .265479 Tw (If the operation ends successfully, SYSCALL 2 will return 0, otherwise it will return -1. Possible causes of failure are) Tj T* 0 Tw .079243 Tw (the attempt to close a non-existent file descriptor or the attempt to close file descriptors 0, 1 or 2, that are associated) Tj T* 0 Tw (respectively to standard input, standard output and standard error.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 516.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 3 - read\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 486.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .146005 Tw (SYSCALL 3 expects three parameters: the file descriptor to read from, the address where the read data must be put) Tj T* 0 Tw (into, the number of bytes to read.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 456.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .254337 Tw (If the first parameter is 0, the simulator will prompt the user for an input, via an input dialog. If the length of the input) Tj T* 0 Tw (is greater than the number of bytes that have to be read, the simulator will show again the message dialog.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 414.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .916205 Tw (It returns the number of bytes that have effectively been read, or -1 if the read operation fails. Possible causes of) Tj T* 0 Tw .030215 Tw (failure are the attempt to read from a non-existent file descriptor, the attempt to read from file descriptors 1 \(standard) Tj T* 0 Tw (output\) or 2 \(standard error\) or the attempt to read from a write-only file descriptor.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 383.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 4 - write\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 353.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .234426 Tw (SYSCALL 4 expects three parameters: the file descriptor to write to, the address where the data must be read from,) Tj T* 0 Tw (the number of bytes to write.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 335.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If the first parameter is two or three, the simulator will pop the input/output frame, and write there the read data.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 293.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .370671 Tw (It returns the number of bytes that have been written, or -1 if the write operation fails. Possible causes of failure are) Tj T* 0 Tw .889705 Tw (the attempt to write to a non-existent file descriptor, the attempt to write to file descriptor 0 \(standard input\) or the) Tj T* 0 Tw (attempt to write to a read-only file descriptor.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 263.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (SYSCALL 5 - printf\(\)) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 233.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .40245 Tw (SYSCALL 5 expects a variable number of parameters, the first being the address of the so-called \223format string\224. In) Tj T* 0 Tw (the format string can be included some placeholders, described in the following list:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 227.4394 cm
Q
q
1 0 0 1 40.01575 227.4394 cm
Q
q
1 0 0 1 40.01575 215.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%s) Tj /F1 10 Tf ( indicates a string parameter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 209.4394 cm
Q
q
1 0 0 1 40.01575 197.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%i) Tj /F1 10 Tf ( indicates an integer parameter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 191.4394 cm
Q
q
1 0 0 1 40.01575 179.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%d) Tj /F1 10 Tf ( behaves like ) Tj /F3 10 Tf (%i) Tj /F1 10 Tf (;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 173.4394 cm
Q
q
1 0 0 1 40.01575 161.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (%%) Tj /F1 10 Tf ( literal ) Tj /F3 10 Tf (%) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 161.4394 cm
Q
q
1 0 0 1 40.01575 143.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (For each ) Tj /F3 10 Tf (%s) Tj /F1 10 Tf (, ) Tj /F3 10 Tf (%d) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (%i) Tj /F1 10 Tf ( placeholder, SYSCALL 5 expects a parameter, starting from the address of the previous one.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 113.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .326711 Tw (When the SYSCALL finds a placeholder for an integer parameter, it expects that the corresponding parameter is an) Tj T* 0 Tw (integer value, when if it finds a placeholder for a string parameter, it expects as a parameter the address of the string.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The result is printed in the input/output frame, and the number of bytes written is put into R1.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 77.43937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If there\222s an error, -1 is written to R1.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The instruction set) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (10) Tj T* ET
Q
Q
 
endstream
endobj
249 0 obj
<<
/Length 6479
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 770.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Other instructions) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 752.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In this section there are instructions that do not fit in the previous categories.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (BREAK) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.000795 Tw (The BREAK instruction throws an exception that has the effect to stop the execution if the simulator is running. It can) Tj T* 0 Tw (be used for debugging purposes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 661.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (NOP) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 643.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The NOP instruction does not do anything, and it\222s used to create gaps in the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 613.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (TRAP) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 595.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The TRAP instruction is a deprecated alias for the SYSCALL instruction.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 564.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F3 12 Tf 0 0 0 rg (HALT) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 546.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The HALT instruction is a deprecated alias for the SYSCALL 0 instruction, that halts the simulator.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 493.4394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This chapter ) Tj /F1 8 Tf 0 0 .501961 rg 5 Ts (1) Tj /F1 10 Tf 0 0 0 rg 0 Ts ( describes the Floating Point Unit \(FPU\) emulated in EduMIPS64.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 463.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.696339 Tw (In the first paragraph we introduce the double format, the special floating point values defined in the IEEE 754) Tj T* 0 Tw (standard and the exceptions that floating point computations can raise.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 445.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In the second paragraph we explain how EduMIPS64 allows users to enable or disable the IEEE floating point traps.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 415.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .278005 Tw (In the third paragraph we describe how double precision numbers and special values can be specified in the source) Tj T* 0 Tw (programs.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 373.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.439116 Tw (In the fourth paragraph, we introduce the FCSR register, used by the FPU to represent its state. It contains) Tj T* 0 Tw .22094 Tw (information about rounding, the boolean results of comparison operations and the policies for handling IEEE floating) Tj T* 0 Tw (point exceptions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 343.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .585227 Tw (In the fifth and last paragraph, we present all the MIPS64 floating point instructions that have been implemented in) Tj T* 0 Tw (EduMIPS64.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 313.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .882006 Tw (Before starting the discussion about the FPU, we define the domain of floating point double precision numbers as) Tj T* 0 Tw ([-1.79E308,-4.94E-324] ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL ( {0} ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL ( [4.94E-324,1.79E308].) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 280.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Special values) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 238.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.398381 Tw (Floating point arithmetics allows the programmer to choose whether to stop the computation or not, if invalid) Tj T* 0 Tw .784947 Tw (operations are carried on. In this scenario, operations like the division between zeroes or square roots of negative) Tj T* 0 Tw (numbers must produce a result that, not being a number \(NaN\) is treated as somehting different.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 208.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (NaN or Invalid Operation) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 142.2394 cm
q
BT 1 0 0 1 0 50 Tm 1.628864 Tw 12 TL /F1 10 Tf 0 0 0 rg (The IEEE Standard for Floating-Point Arithmetic \(IEEE 754\) defined that invalid arithmetic operations can either) Tj T* 0 Tw .474205 Tw (signal the error while the program is running \(using a trap for the IEEE exception ) Tj /F2 10 Tf (Invalid Operation) Tj /F1 10 Tf (\) or return as a) Tj T* 0 Tw 1.212006 Tw (result the special value QNan \(Quit Not a Number\). Another NaN value, that inconditionally raises the same trap) Tj T* 0 Tw .609243 Tw (once it is detected as being one of the operands, is SNan \(Signalling Not a Number\). This value is seldom used in) Tj T* 0 Tw (applications, and historically it has been used to initialize variables.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
q
q
q
1 0 0 1 0 24 cm
n 0 14.17323 m 515.2441 14.17323 l S
Q
Q
q
q
1 0 0 1 0 0 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 12 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 4.371902 Tw (This chapter is part of the Bachelor\222s degree thesis by Massimo Trubia: \223Progetto e) Tj T* 0 Tw (implementazione di un modello di Floating Point Unit per un simulatore di CPU MIPS64\224.) Tj T* ET
Q
Q
q
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (11) Tj T* ET
Q
Q
 
endstream
endobj
250 0 obj
<<
/Length 8286
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Zeroes or Underflows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 706.6394 cm
q
BT 1 0 0 1 0 50 Tm 1.637058 Tw 12 TL /F1 10 Tf 0 0 0 rg (Another special value defined by the standard is zero. Since the double format does not include the zero in its) Tj T* 0 Tw 1.006385 Tw (domain, it is considered a special value. There is a positive zero and a negative zero: the former is used when a) Tj T* 0 Tw .168476 Tw (representation of a negative number ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( ]-4.94E-324,0[\) is attempted, and a result is required \(as opposed to allowing) Tj T* 0 Tw .062847 Tw (an ) Tj /F2 10 Tf (Underflow) Tj /F1 10 Tf ( trap\), while the latter is used when the number that should be represented is ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,4.94E-324[, and the) Tj T* 0 Tw (Underflow trap is disabled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 676.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Infinites or Overflows) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 634.2394 cm
q
BT 1 0 0 1 0 26 Tm 2.767756 Tw 12 TL /F1 10 Tf 0 0 0 rg (When a program attempts to represent a value with an extremely large absolute value \() Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( ]-) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (,-1.79E308[ ) Tj /F6 10 Tf 12 TL (n) Tj /F1 10 Tf 12 TL T* 0 Tw .745479 Tw (]1.79E308,+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ([\), that is outside the domain of double values, the CPU returns either -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( or +) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (. The alternative is to) Tj T* 0 Tw (trigger a trap for the exceptional ) Tj /F2 10 Tf (Overflow) Tj /F1 10 Tf ( condition.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 604.2394 cm
q
BT 1 0 0 1 0 14 Tm .184337 Tw 12 TL /F1 10 Tf 0 0 0 rg (Infinites can also be returned in case of a division by zero; in that case the sign of the infinite is given by the product) Tj T* 0 Tw (of the sign of the zero and the sign of the dividend. The ) Tj /F2 10 Tf (Divide by zero) Tj /F1 10 Tf ( trap can be alternatively raised.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 571.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Exception configuration) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 529.4394 cm
q
BT 1 0 0 1 0 26 Tm 2.456005 Tw 12 TL /F1 10 Tf 0 0 0 rg (EduMIPS64 allows the user to enable or disable the traps for 4 of the 5 IEEE exceptions, through the ) Tj /F3 10 Tf (FPU) Tj T* 0 Tw .709689 Tw (Exceptions) Tj /F1 10 Tf ( tab in the ) Tj /F3 10 Tf (Configure) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\256) Tj /F1 10 Tf 12 TL ( ) Tj /F3 10 Tf (Settings) Tj /F1 10 Tf ( window. If any of them is disabled, the respective special value will be) Tj T* 0 Tw (returned \(as described in ) Tj (Special values) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 496.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The .double directive) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 466.6394 cm
q
BT 1 0 0 1 0 14 Tm .119243 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F4 10 Tf (.double) Tj /F1 10 Tf ( directive must be used in the ) Tj /F4 10 Tf (.data) Tj /F1 10 Tf ( section of source files, and allows to allocate a memory cell for a) Tj T* 0 Tw /F3 10 Tf (double) Tj /F1 10 Tf ( value.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 448.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The directive can be used in 2 ways:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 417.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (variable-name: .double double_number) Tj T* (variable-name: .double keyword) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 373.8394 cm
q
BT 1 0 0 1 0 26 Tm 5.674508 Tw 12 TL /F1 10 Tf 0 0 0 rg (where ) Tj /F4 10 Tf (double_number) Tj /F1 10 Tf ( can be represented either in extended notation \() Tj /F4 10 Tf (1.0,0.003) Tj /F1 10 Tf (\), or in scientific) Tj T* 0 Tw 4.660682 Tw (notation\() Tj /F4 10 Tf (3.7E-12,0.5E32) Tj /F1 10 Tf (\). ) Tj /F4 10 Tf (keyword) Tj /F1 10 Tf ( can be ) Tj /F4 10 Tf (POSITIVEINFINITY) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (NEGATIVEINFINITY) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (POSITIVEZERO) Tj /F1 10 Tf (,) Tj T* 0 Tw /F4 10 Tf (NEGATIVEZERO) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (SNAN) Tj /F1 10 Tf ( e ) Tj /F4 10 Tf (QNAN) Tj /F1 10 Tf (, thus allowing to directly insert in memory the special values.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 341.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The FCSR register) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 311.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .067888 Tw (The FCSR \(Floating point Control Status Register\) is the register that controls several functional aspects of the FPU.) Tj T* 0 Tw (It is 32 bits long and it is represented in the statistics window.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 281.0394 cm
q
BT 1 0 0 1 0 14 Tm .464205 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (FCC) Tj /F1 10 Tf ( field is 8 bits wide, from 0 to 7. The conditional instructions \() Tj /F4 10 Tf (C.EQ.D,C.LT.D) Tj /F1 10 Tf (\) use it to save the boolean) Tj T* 0 Tw (result of comparisons between two registers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 239.0394 cm
q
BT 1 0 0 1 0 26 Tm .686123 Tw 12 TL /F1 10 Tf 0 0 0 rg (The Cause, Enables and Flag fields handle the dynamics of IEEE exceptions described in ) Tj (Special values) Tj (. Each of) Tj T* 0 Tw -0.107295 Tw (them is composed of 5 bits, V \(Invalid Operation\), Z \(Divide by Zero\), O \(Overflow\), U \(Underflow\) and I \(Inexact\); the) Tj T* 0 Tw (latter is not yet used.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 221.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Clause) Tj /F1 10 Tf ( field bits are set if the corresponding IEEE exceptions occur during the execution of a program.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 191.0394 cm
q
BT 1 0 0 1 0 14 Tm .926339 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Enable) Tj /F1 10 Tf ( field bits are set through the configuration window and show the IEEE exceptions for which traps are) Tj T* 0 Tw (enabled.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 161.0394 cm
q
BT 1 0 0 1 0 14 Tm 2.159672 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (Flag) Tj /F1 10 Tf ( field shows the exceptions that have happened but, since the trap is not enabled for that particular) Tj T* 0 Tw (exception, have returned special values \(the ones described in ) Tj (Special values) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 131.0394 cm
q
BT 1 0 0 1 0 14 Tm .649116 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F2 10 Tf (RM) Tj /F1 10 Tf ( field describes the rounding method currently in use to convert floating point numbers to integers \(see the) Tj T* 0 Tw (description of the ) Tj /F4 10 Tf (CVT.L.D) Tj /F1 10 Tf ( instruction\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 98.23937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Instruction set) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 56.23937 cm
q
BT 1 0 0 1 0 26 Tm .335606 Tw 12 TL /F1 10 Tf 0 0 0 rg (This section describes the MIPS64 FPU instruction implemented by EduMIPS64; they are listed in alphabetic order.) Tj T* 0 Tw -0.029217 Tw (The operations performed by the instruction are described using a notation according to which the i-th memory cell is) Tj T* 0 Tw (represented as ) Tj /F4 10 Tf (memory[i]) Tj /F1 10 Tf (, and the FCC fields of the FCSR register are ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (cc) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,7].) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (12) Tj T* ET
Q
Q
 
endstream
endobj
251 0 obj
<<
/Length 8846
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 727.0394 cm
q
BT 1 0 0 1 0 50 Tm .920783 Tw 12 TL /F1 10 Tf 0 0 0 rg (In some instructions, to avoid ambiguity, the registers are represented as ) Tj /F4 10 Tf (GPR[i]) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (FPR[i]) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (i) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( [0,31], but in) Tj T* 0 Tw .438439 Tw (most cases we just use the ) Tj /F4 10 Tf (rx) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (fx) Tj /F1 10 Tf ( notation, with ) Tj /F4 10 Tf (x) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\316) Tj /F1 10 Tf 12 TL ( {d,s,t}. The three letters are used to indicate the purpose of) Tj T* 0 Tw .596721 Tw (each register \(destination, source, third\). Lastly, the values returned by conversion operations are represented with) Tj T* 0 Tw 15.65482 Tw (the following notation: ) Tj /F4 10 Tf (convert_conversiontype\(register[,rounding_type]\)) Tj /F1 10 Tf (, where the) Tj T* 0 Tw /F4 10 Tf (rounding_type) Tj /F1 10 Tf ( parameter is optional.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 697.0394 cm
q
BT 1 0 0 1 0 14 Tm 33.21301 Tw 12 TL /F1 10 Tf 0 0 0 rg (Some examples for the FPU instructions are available at) Tj T* 0 Tw /F4 10 Tf (http://www.edumips.org/attachment/wiki/Upload/FPUMaxSamples.rar) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 691.0394 cm
Q
q
1 0 0 1 40.01575 631.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (ADD.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (+) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .355606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Overflow and underflow traps are generated if the result cannot be represented according to IEEE) Tj T* 0 Tw (754. Invalid operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation \(+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( - ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\) is executed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 490.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BC1F cc, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (branch) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf ( is false, do a PC-relative branch.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.EQ.D 7,f1,f2) Tj T* (BC1F 7,label) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.109814 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.EQ.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf ( are equal, writing the results of the comparison in the 7th bit of the) Tj T* 0 Tw (FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1F) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (label) Tj /F1 10 Tf ( if the result of the comparison is 0 \(false\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 484.2394 cm
Q
q
1 0 0 1 40.01575 349.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (BC1T cc, offset) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (1) Tj ( ) Tj (then) Tj ( ) Tj (branch) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (If ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf ( is true, do a PC-relative branch.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.EQ.D 7,f1,f2) Tj T* (BC1T 7,label) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.109814 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.EQ.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( and ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf ( are equal, writing the results of the comparison in the 7th bit of the) Tj T* 0 Tw (FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1F) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (label) Tj /F1 10 Tf ( if the result of the comparison is 1 \(false\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 343.4394 cm
Q
q
1 0 0 1 40.01575 253.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (C.EQ.D cc, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj ( ) Tj (=) Tj ( ) Tj (\(fs==ft\)) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 14 Tm -0.125048 Tw 12 TL /F1 10 Tf 0 0 0 rg (Checks if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( is equal to ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf (, and saves the result of the comparison in ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (. See examples for ) Tj /F4 10 Tf (BC1T) Tj /F1 10 Tf (,) Tj T* 0 Tw /F4 10 Tf (BC1F) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .069205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Invalid Operation can be thrown if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf ( contain QNaN \(trap is triggered if it is enabled\) o SNaN) Tj T* 0 Tw (\(trap is always triggered\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 247.4394 cm
Q
q
1 0 0 1 40.01575 82.63937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 149.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 149.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (C.LT.D cc, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 131.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj ( ) Tj (=) Tj ( ) Tj (\(fs) Tj (<) Tj (ft\)) Tj T* ET
Q
Q
q
1 0 0 1 23 113.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Checks if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( is smaller than ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf (, and saves the result of the comparison in ) Tj /F4 10 Tf (FCSR_FCC[cc]) Tj /F1 10 Tf (.) Tj T* ET
Q
Q
q
1 0 0 1 23 95.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (C.LT.D 2,f1,f2) Tj T* (BC1T 2,target) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 14 Tm .269205 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (C.LT.D) Tj /F1 10 Tf ( checks if ) Tj /F4 10 Tf (f1) Tj /F1 10 Tf ( is smaller than ) Tj /F4 10 Tf (f2) Tj /F1 10 Tf (, and saves the result of the comparison in the second) Tj T* 0 Tw (bit of the FCC field of the FCSR register. After that, ) Tj /F4 10 Tf (BC1T) Tj /F1 10 Tf ( jumps to ) Tj /F4 10 Tf (target) Tj /F1 10 Tf ( if that bit is set to 1.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .069205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Invalid Operation can be thrown if ) Tj /F4 10 Tf (fs) Tj /F1 10 Tf ( or ) Tj /F4 10 Tf (ft) Tj /F1 10 Tf ( contain QNaN \(trap is triggered if it is enabled\) o SNaN) Tj T* 0 Tw (\(trap is always triggered\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 76.63937 cm
Q
q
1 0 0 1 40.01575 64.63937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.D.L fd, fs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (13) Tj T* ET
Q
Q
 
endstream
endobj
252 0 obj
<<
/Length 10754
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 628.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 145.8 Tm  T* ET
q
1 0 0 1 23 143.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description) Tj /F1 10 Tf (: ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_longToDouble\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a long to a double.) Tj T* ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 77 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (DMTC1 r6,f5) Tj T* (CVT.D.L f5,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 38 Tm .363205 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (DMTC1) Tj /F1 10 Tf ( copies the value of GPR r6 to FPR f5; after that ) Tj /F4 10 Tf (CVT.D.L) Tj /F1 10 Tf ( converts the value stored in) Tj T* 0 Tw 2.240215 Tw (f5 from long to double. If for instance r6 contains the value 52, after the execution of ) Tj /F4 10 Tf (DMTC1) Tj /F1 10 Tf ( the binary) Tj T* 0 Tw -0.001524 Tw (representation of 52 gets copied to f5. After the execution of ) Tj /F4 10 Tf (CVT.D.L) Tj /F1 10 Tf (, f5 contains the IEEE 754 representation) Tj T* 0 Tw (of 52.0.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains QNaN, SNaN or an infinite.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 622.2394 cm
Q
q
1 0 0 1 40.01575 427.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 179.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 179.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.D.W fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 161.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_IntToDouble\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 143.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts an int to a double.) Tj T* ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 95 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (MTC1 r6,f5) Tj T* (CVT.D.W f5,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 14 Tm -0.051996 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( copies the lower 32 bit of the GPR r6 into the FPR f5. Then, ) Tj /F4 10 Tf (CVT.D.W) Tj /F1 10 Tf (, reads f5 as an int,) Tj T* 0 Tw (and converts it to double.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 26 Tm 1.714508 Tw 12 TL /F1 10 Tf 0 0 0 rg (If we had ) Tj /F4 10 Tf (r6=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (, after the execution of ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( we get ) Tj /F4 10 Tf (f5=0xXXXXXXXXBBBBBBBB) Tj /F1 10 Tf (; its) Tj T* 0 Tw 2.22894 Tw (upper 32 bits \() Tj /F4 10 Tf (XX..X) Tj /F1 10 Tf (\) are now UNDEFINED \(haven\222t been overwritten\). ) Tj /F4 10 Tf (CVT.D.W) Tj /F1 10 Tf ( interprets f5 as an int) Tj T* 0 Tw (\() Tj /F4 10 Tf (f5=-1145324613) Tj /F1 10 Tf (\), and converts it to double\() Tj /F4 10 Tf (f5=0xC1D1111111400000 =-1.145324613E9) Tj /F1 10 Tf (\).) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains QNaN, SNaN or an infinite.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 421.4394 cm
Q
q
1 0 0 1 40.01575 286.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 119.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.L.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 101.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_doubleToLong\(fs,) Tj ( ) Tj (CurrentRoundingMode\)) Tj T* ET
Q
Q
q
1 0 0 1 23 83.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a double to a long, rounding it before the conversion.) Tj T* ET
Q
Q
q
1 0 0 1 23 65.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (CVT.L.D f5,f5) Tj T* (DMFC1 r6,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .581624 Tw 12 TL /F4 10 Tf 0 0 0 rg (CVT.L.D) Tj /F1 10 Tf ( the double value in f5 to a long; then ) Tj /F4 10 Tf (DMFC1) Tj /F1 10 Tf ( copies f5 to r6; the result of this operation depends on) Tj T* 0 Tw (the current rounding modality, that can be set in the ) Tj /F3 10 Tf (FPU Rounding) Tj /F1 10 Tf ( tab of the ) Tj /F3 10 Tf (Configure) Tj /F1 10 Tf ( ) Tj /F7 10 Tf 12 TL (\256) Tj /F1 10 Tf 12 TL ( ) Tj /F3 10 Tf (Settings) Tj /F1 10 Tf ( window.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 286.6394 cm
Q
q
1 0 0 1 40.01575 280.6394 cm
Q
q
1 0 0 1 40.01575 250.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 200.61 0 Td 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Rounding examples) Tj T* -200.61 0 Td ET
Q
Q
q
1 0 0 1 40.01575 66.23937 cm
1 1 1 rg
n 0 178 515.2441 -16 re f*
.878431 .878431 .878431 rg
n 0 162 515.2441 -18 re f*
1 1 1 rg
n 0 144 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 126 515.2441 -18 re f*
1 1 1 rg
n 0 108 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 90 515.2441 -18 re f*
1 1 1 rg
n 0 72 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 54 515.2441 -18 re f*
1 1 1 rg
n 0 36 515.2441 -18 re f*
.878431 .878431 .878431 rg
n 0 18 515.2441 -18 re f*
.960784 .960784 .862745 rg
n 0 178 515.2441 -16 re f*
.12549 .262745 .360784 rg
BT /F2 10 Tf 10 TL ET
q
1 0 0 1 6 165 cm
q
.960784 .960784 .862745 rg
n 0 0 139.5424 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 59.21619 0 Td (Tipo) Tj T* -59.21619 0 Td ET
Q
Q
q
1 0 0 1 157.5424 165 cm
q
.960784 .960784 .862745 rg
n 0 0 89.02825 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 25.06913 0 Td (RM field) Tj T* -25.06913 0 Td ET
Q
Q
q
1 0 0 1 258.5706 165 cm
q
.960784 .960784 .862745 rg
n 0 0 119.3367 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 35.49336 0 Td (f5 register) Tj T* -35.49336 0 Td ET
Q
Q
q
1 0 0 1 389.9074 165 cm
q
.960784 .960784 .862745 rg
n 0 0 119.3367 10 re f*
Q
q
.12549 .262745 .360784 rg
BT 1 0 0 1 0 0 Tm /F2 10 Tf 10 TL 35.21336 0 Td (r6 register) Tj T* -35.21336 0 Td ET
Q
Q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.4) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 147 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6) Tj T* ET
Q
Q
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.8) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6.5) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (6 \(to even\)) Tj T* ET
Q
Q
q
1 0 0 1 6 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To nearest) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (0) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7.5) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 93 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (8 \(to even\)) Tj T* ET
Q
Q
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards 0) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7.1) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (7) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards 0) Tj T* ET
Q
Q
q
1 0 0 1 157.5424 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-2.3) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-2) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4.2) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (5) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3.9) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4.2) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 0 m 515.2441 0 l S
n 0 162 m 515.2441 162 l S
n 0 144 m 515.2441 144 l S
n 0 126 m 515.2441 126 l S
n 0 108 m 515.2441 108 l S
n 0 90 m 515.2441 90 l S
n 0 72 m 515.2441 72 l S
n 0 54 m 515.2441 54 l S
n 0 36 m 515.2441 36 l S
n 0 18 m 515.2441 18 l S
n 151.5424 0 m 151.5424 178 l S
n 252.5706 0 m 252.5706 178 l S
n 383.9074 0 m 383.9074 178 l S
n 0 178 m 515.2441 178 l S
n 0 0 m 0 178 l S
n 515.2441 0 m 515.2441 178 l S
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (14) Tj T* ET
Q
Q
 
endstream
endobj
253 0 obj
<<
/Length 9285
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 769.0394 cm
1 1 1 rg
n 0 18 515.2441 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Towards -) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* ET
Q
Q
q
1 0 0 1 157.5424 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 258.5706 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-3.9) Tj T* ET
Q
Q
q
1 0 0 1 389.9074 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (-4) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 18 m 515.2441 18 l S
n 151.5424 0 m 151.5424 18 l S
n 252.5706 0 m 252.5706 18 l S
n 383.9074 0 m 383.9074 18 l S
n 0 0 m 0 18 l S
n 515.2441 0 m 515.2441 18 l S
n 0 0 m 515.2441 0 l S
Q
Q
q
1 0 0 1 40.01575 769.0394 cm
Q
q
1 0 0 1 40.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 763.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (CVT.W.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (convert_DoubleToInt\(fs,) Tj ( ) Tj (CurrentRoundingMode\)) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Converts a double to an int, using the current rounding modality.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.224116 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Invalid Operation is thrown if fs contains an infinite value, any NaN or the results is outside the) Tj T* 0 Tw (signed int domain [-2 ) Tj /F1 8 Tf 5 Ts (63) Tj /F1 10 Tf 0 Ts (, 2 ) Tj /F1 8 Tf 5 Ts (63) Tj /F1 10 Tf 0 Ts ( -1]) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 607.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DIV.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (\\div) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm -0.047869 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Overflow or Underflow are raised if the results cannot be represented using the IEEE 754 standard.) Tj T* 0 Tw .634705 Tw (Invalid Operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation is executed \(0div0,) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( div) Tj T* 0 Tw /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\). Divide by zero is raised if a division by zero is attempted with a dividend that is not QNaN or SNaN.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.0394 cm
Q
q
1 0 0 1 40.01575 553.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMFC1 rt,fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (rt) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bit per bit copy of the FPR fs into the GPR rt.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 547.0394 cm
Q
q
1 0 0 1 40.01575 499.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (DMTC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fs) Tj ( ) Tj (=) Tj ( ) Tj (rt) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Executes a bit per bit copy of the GPR rt into the FPR fs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 493.0394 cm
Q
q
1 0 0 1 40.01575 445.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (L.D ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (ft) Tj ( ) Tj (=) Tj ( ) Tj (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a doubleword and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 445.0394 cm
Q
q
1 0 0 1 40.01575 433.0394 cm
Q
q
1 0 0 1 40.01575 364.2394 cm
.933333 .933333 .933333 rg
n 0 68.8 515.2441 -68.8 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 50.8 Tm  T* ET
q
1 0 0 1 8 44 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.8 Tm /F5 14 Tf 16.8 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 8 8 cm
q
BT 1 0 0 1 0 14 Tm .584004 Tw 12 TL /F3 10 Tf 0 0 0 rg (L.D) Tj /F1 10 Tf ( is not present in the MIPS64 ISA, it is an alias for ) Tj /F4 10 Tf (LDC1) Tj /F1 10 Tf ( that is present in EduMIPS64 for compatibility with) Tj T* 0 Tw (WinMIPS64.) Tj T* ET
Q
Q
q
1 J
1 j
.8 .8 .8 RG
.5 w
n 0 68.8 m 515.2441 68.8 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 68.8 l S
n 515.2441 0 m 515.2441 68.8 l S
Q
Q
q
1 0 0 1 40.01575 358.2394 cm
Q
q
1 0 0 1 40.01575 352.2394 cm
Q
q
1 0 0 1 40.01575 352.2394 cm
Q
q
1 0 0 1 40.01575 304.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LDC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a doubleword and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 298.2394 cm
Q
q
1 0 0 1 40.01575 250.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (LWC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (ft) Tj ( ) Tj (=) Tj ( ) Tj (memory[GPR[base]) Tj ( ) Tj (+) Tj ( ) Tj (offset]) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Loads from memory a word and stores it in ft.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 244.2394 cm
Q
q
1 0 0 1 40.01575 103.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 125.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MFC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (rt) Tj ( ) Tj (=) Tj ( ) Tj (readInt\(fs\)) Tj T* ET
Q
Q
q
1 0 0 1 23 89.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Reads the fs FPR as an int and writes its value to the rt GPR as long. ) Tj /F3 10 Tf (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 59 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 30 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F4 10 Tf 12 TL (MFC1 r6,f5) Tj T* (SD r6,mem\(R0\)) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 4.249546 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let ) Tj /F4 10 Tf (f5=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (; ) Tj /F4 10 Tf (MFC1) Tj /F1 10 Tf ( reads f5 as an int \(lower 32 bits\), interpreting ) Tj /F4 10 Tf (BBBBBBBB) Tj /F1 10 Tf ( as) Tj T* 0 Tw .014273 Tw /F4 10 Tf (-1145324613) Tj /F1 10 Tf (, and writes the value to f6 \(64 bits\). After the execution of ) Tj /F4 10 Tf (MFC1) Tj /F1 10 Tf (, ) Tj /F4 10 Tf (r6=0xFFFFFFFFBBBBBBBB) Tj ( ) Tj (=) Tj T* 0 Tw .010742 Tw (-1145324613) Tj /F1 10 Tf (. So the ) Tj /F4 10 Tf (SD) Tj /F1 10 Tf ( instruction will write to memory a doubleword with this value, since the sign in r6 was) Tj T* 0 Tw (extended.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 97.43937 cm
Q
q
1 0 0 1 40.01575 67.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVF.D fd, fs, cc) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 -1 Tm  T* ET
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If FCSR_FCC[cc] is false, the copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 54.85039 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (15) Tj T* ET
Q
Q
 
endstream
endobj
254 0 obj
<<
/Length 8291
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 739.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVT.D fd, fs, cc) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (FCSR_FCC[cc]) Tj ( ) Tj (==) Tj ( ) Tj (1) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If FCSR_FCC[cc] is true, the copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 733.0394 cm
Q
q
1 0 0 1 40.01575 685.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOV.D fd, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 679.0394 cm
Q
q
1 0 0 1 40.01575 631.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVN.D fd, fs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (rt) Tj ( ) Tj (!=) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is not zero, copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 625.0394 cm
Q
q
1 0 0 1 40.01575 577.0394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MOVZ.D fd, fs, rt) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (if) Tj ( ) Tj (rt) Tj ( ) Tj (==) Tj ( ) Tj (0) Tj ( ) Tj (then) Tj ( ) Tj (fd=fs) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (If rt is equal to zero, copies fs to fd.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 577.0394 cm
Q
q
1 0 0 1 40.01575 571.0394 cm
Q
q
1 0 0 1 40.01575 571.0394 cm
Q
q
1 0 0 1 40.01575 448.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 107.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 107.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MTC1 rt, fs) Tj T* ET
Q
Q
q
1 0 0 1 23 89.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( fs = rt ) Tj /F1 8 Tf -5 Ts (0..31) Tj T* ET
Q
Q
q
1 0 0 1 23 71.8 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies the lower 32 bit of rt to fs.) Tj T* ET
Q
Q
q
1 0 0 1 23 53.8 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj /F1 10 Tf (:) Tj T* ET
Q
Q
q
1 0 0 1 23 35 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 491.4441 18 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F4 10 Tf 12 TL (MTC1 r6,f5) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.008206 Tw 12 TL /F1 10 Tf 0 0 0 rg (Let ) Tj /F4 10 Tf (r5=0xAAAAAAAABBBBBBBB) Tj /F1 10 Tf (; ) Tj /F4 10 Tf (MTC1) Tj /F1 10 Tf ( reads the lower 32 bits of r5 copying them to the 32 lower bits of f5. The) Tj T* 0 Tw (higher 32 bits of f5 are not overwritten.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 442.2394 cm
Q
q
1 0 0 1 40.01575 370.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (MUL.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs) Tj ( ) Tj (\327) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm -0.047869 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions:) Tj /F1 10 Tf ( Overflow or Underflow are raised if the results cannot be represented using the IEEE 754 standard.) Tj T* 0 Tw .234481 Tw (Invalid Operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation is executed \(multiply by ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL T* 0 Tw (OR BY QNaN\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 364.2394 cm
Q
q
1 0 0 1 40.01575 316.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (S.D ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 316.2394 cm
Q
q
1 0 0 1 40.01575 304.2394 cm
Q
q
1 0 0 1 40.01575 235.4394 cm
.933333 .933333 .933333 rg
n 0 68.8 515.2441 -68.8 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 50.8 Tm  T* ET
q
1 0 0 1 8 44 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.8 Tm /F5 14 Tf 16.8 TL (Note) Tj T* ET
Q
Q
q
1 0 0 1 8 8 cm
q
BT 1 0 0 1 0 14 Tm .531147 Tw 12 TL /F3 10 Tf 0 0 0 rg (S.D) Tj /F1 10 Tf ( is not present in the MIPS64 ISA, it is an alias for ) Tj /F4 10 Tf (SDC1) Tj /F1 10 Tf ( that is present in EduMIPS64 for compatibility with) Tj T* 0 Tw (WinMIPS64.) Tj T* ET
Q
Q
q
1 J
1 j
.8 .8 .8 RG
.5 w
n 0 68.8 m 515.2441 68.8 l S
n 0 0 m 515.2441 0 l S
n 0 0 m 0 68.8 l S
n 515.2441 0 m 515.2441 68.8 l S
Q
Q
q
1 0 0 1 40.01575 229.4394 cm
Q
q
1 0 0 1 40.01575 223.4394 cm
Q
q
1 0 0 1 40.01575 223.4394 cm
Q
q
1 0 0 1 40.01575 175.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SDC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 169.4394 cm
Q
q
1 0 0 1 40.01575 109.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SUB.D fd, fs, ft) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (fd) Tj ( ) Tj (=) Tj ( ) Tj (fs-ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .355606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Exceptions) Tj /F1 10 Tf (: Overflow and underflow traps are generated if the result cannot be represented according to IEEE) Tj T* 0 Tw (753. Invalid operation is raised if fs or ft contain QNaN or SNan, or if an invalid operation \(+) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL ( - ) Tj /F7 10 Tf 12 TL (\245) Tj /F1 10 Tf 12 TL (\) is executed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 103.4394 cm
Q
q
1 0 0 1 40.01575 55.43937 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (SWC1 ft, offset\(base\)) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Description:) Tj /F1 10 Tf ( ) Tj /F4 10 Tf (memory[base+offset]) Tj ( ) Tj (=) Tj ( ) Tj (ft) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Copies the lower 32 bits of ft to memory.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 55.43937 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Floating Point Unit) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (16) Tj T* ET
Q
Q
 
endstream
endobj
255 0 obj
<<
/Length 9779
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 767.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 737.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.144116 Tw (The GUI of EduMIPS64 is inspired to WinMIPS64 user interface. In fact, the main window is identical, except for) Tj T* 0 Tw (some menus.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 683.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 2.453182 Tw (The EduMIPS64 main window is composed by a menu bar and six frames, showing different aspects of the) Tj T* 0 Tw .146531 Tw (simulation. There\222s also a status bar, that has the double purpose to show the content of memory cells and registers) Tj T* 0 Tw .916705 Tw (when you click them and to notify the user that the simulator is running when the simulation has been started but) Tj T* 0 Tw (verbose mode is not selected.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 665.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The status bar also shows the CPU status. It can show one of the following four states:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 659.8394 cm
Q
q
1 0 0 1 40.01575 659.8394 cm
Q
q
1 0 0 1 40.01575 647.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (READY) Tj /F1 10 Tf ( The CPU hasn\222t executed any instructions \(no program is loaded\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 641.8394 cm
Q
q
1 0 0 1 40.01575 629.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (RUNNING) Tj /F1 10 Tf ( The CPU is executing a series of instructions.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 623.8394 cm
Q
q
1 0 0 1 40.01575 599.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .647756 Tw 12 TL /F3 10 Tf 0 0 0 rg (STOPPING) Tj /F1 10 Tf ( The CPU has found a termination instruction, and is executing the instructions that are already in) Tj T* 0 Tw (the pipeline before terminating the execution.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 593.8394 cm
Q
q
1 0 0 1 40.01575 581.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (HALTED) Tj /F1 10 Tf ( The CPU is stopped: a program just finished running.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 581.8394 cm
Q
q
1 0 0 1 40.01575 527.8394 cm
q
BT 1 0 0 1 0 38 Tm .382847 Tw 12 TL /F1 10 Tf 0 0 0 rg (Note that the CPU status is different from the simulator status. The simulator may execute a number of CPU cycles) Tj T* 0 Tw .556339 Tw (and then stop executing, allowing the user to inspect memory and registers: in this state, between CPU cycles, the) Tj T* 0 Tw .836339 Tw (CPU stays in ) Tj /F3 10 Tf (RUNNING) Tj /F1 10 Tf ( or ) Tj /F3 10 Tf (STOPPING) Tj /F1 10 Tf ( state. Once the CPU reaches the ) Tj /F3 10 Tf (HALTED) Tj /F1 10 Tf ( state, the user cannot run any) Tj T* 0 Tw (CPU cycle without loading a program again \(the same program, or a different one\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 509.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are more details in the following sections.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 477.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (The menu bar) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 459.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The menu bar contains six menus:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 428.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (File) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 410.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The File menu contains menu items about opening files, resetting or shutting down the simulator, writing trace files.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 404.6394 cm
Q
q
1 0 0 1 40.01575 404.6394 cm
Q
q
1 0 0 1 40.01575 392.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Open\205) Tj /F1 10 Tf ( Opens a dialog that allows the user to choose a source file to open.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 386.6394 cm
Q
q
1 0 0 1 40.01575 362.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .267205 Tw 12 TL /F3 10 Tf 0 0 0 rg (Open recent) Tj /F1 10 Tf ( Shows the list of the recent files opened by the simulator, from which the user can choose the file) Tj T* 0 Tw (to open) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 356.6394 cm
Q
q
1 0 0 1 40.01575 344.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Reset) Tj /F1 10 Tf ( Resets the simulator, keeping open the file that was loaded but resetting the execution.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 338.6394 cm
Q
q
1 0 0 1 40.01575 326.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Write Dinero Tracefile\205) Tj /F1 10 Tf ( Writes the memory access data to a file, in xdin format.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 320.6394 cm
Q
q
1 0 0 1 40.01575 308.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Exit) Tj /F1 10 Tf ( Closes the simulator.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 308.6394 cm
Q
q
1 0 0 1 40.01575 278.6394 cm
q
BT 1 0 0 1 0 14 Tm .557058 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Write Dinero Tracefile\205) Tj /F1 10 Tf ( menu item is only available when a whole source file has been executed and the end) Tj T* 0 Tw (has been already reached.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 248.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Execute) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 230.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Execute menu contains menu items regarding the execution flow of the simulation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 224.2394 cm
Q
q
1 0 0 1 40.01575 224.2394 cm
Q
q
1 0 0 1 40.01575 212.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Single Cycle) Tj /F1 10 Tf ( Executes a single simulation step) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 206.2394 cm
Q
q
1 0 0 1 40.01575 182.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.654631 Tw 12 TL /F3 10 Tf 0 0 0 rg (Run) Tj /F1 10 Tf ( Starts the execution, stopping when the simulator reaches a ) Tj /F3 10 Tf (SYSCALL 0) Tj /F1 10 Tf ( \(or equivalent\) or a ) Tj /F3 10 Tf (BREAK) Tj /F1 10 Tf  T* 0 Tw (instruction, or when the user clicks the Stop menu item \(or presses F9\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 176.2394 cm
Q
q
1 0 0 1 40.01575 152.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.431606 Tw 12 TL /F3 10 Tf 0 0 0 rg (Multi Cycle) Tj /F1 10 Tf ( Executes some simulation steps. The number of steps executed can be configured through the) Tj T* 0 Tw (Setting dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 152.2394 cm
Q
q
1 0 0 1 40.01575 146.2394 cm
Q
q
1 0 0 1 40.01575 146.2394 cm
Q
q
1 0 0 1 40.01575 134.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Stop) Tj /F1 10 Tf ( Stops the execution when the simulator is in \223Run\224 or \223Multi cycle\224 mode, as described previously.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 134.2394 cm
Q
q
1 0 0 1 40.01575 104.2394 cm
q
BT 1 0 0 1 0 14 Tm -0.076178 Tw 12 TL /F1 10 Tf 0 0 0 rg (This menu is only available when a source file is loaded and the end of the simulation is not reached. The ) Tj /F3 10 Tf (Stop) Tj /F1 10 Tf ( menu) Tj T* 0 Tw (item is available only in \223Run\224 or \223Multi Cycle\224 mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 74.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.284672 Tw (Note that the simulator slows down when updating the UI. If you want to execute long \(thousands of cycles\)) Tj T* 0 Tw (programs quickly, disable the \223Sync graphics with CPU in multi-step execution\224 option.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (17) Tj T* ET
Q
Q
 
endstream
endobj
256 0 obj
<<
/Length 7894
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Configure) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 754.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Configure menu provides facilities for customizing EduMIPS64 appearance and behavior.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 748.6394 cm
Q
q
1 0 0 1 40.01575 748.6394 cm
Q
q
1 0 0 1 40.01575 736.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Settings\205) Tj /F1 10 Tf ( Opens the Settings dialog, described in the next sections of this chapter;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 730.6394 cm
Q
q
1 0 0 1 40.01575 694.6394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .714631 Tw 12 TL /F3 10 Tf 0 0 0 rg (Change Language) Tj /F1 10 Tf ( Allows the user to change the language used by the user interface. Currently only English) Tj T* 0 Tw .127205 Tw (and Italian are supported. This change affects every aspect of the GUI, from the title of the frames to the online) Tj T* 0 Tw (manual and warning/error messages.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 694.6394 cm
Q
q
1 0 0 1 40.01575 664.6394 cm
q
BT 1 0 0 1 0 14 Tm .149163 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (Settings\205) Tj /F1 10 Tf ( menu item is not available when the simulator is in \223Run\224 or \223Multi Cycle\224 mode, because of potential) Tj T* 0 Tw (race conditions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 634.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Tools) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 616.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains only an item, used to invoke the Dinero Frontend dialog.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 610.2394 cm
Q
q
1 0 0 1 40.01575 598.2394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Dinero Frontend\205) Tj /F1 10 Tf ( Opens the Dinero Frontend dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 598.2394 cm
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu is not available until you have not executed a program and the execution has reached its end.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 549.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Window) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 531.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains items related to operations with frames.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 525.8394 cm
Q
q
1 0 0 1 40.01575 525.8394 cm
Q
q
1 0 0 1 40.01575 501.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .194277 Tw 12 TL /F3 10 Tf 0 0 0 rg (Tile) Tj /F1 10 Tf ( Sorts the visible windows so that no more that three frames are put in a row. It tries to maximize the space) Tj T* 0 Tw (occupied by every frame.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 501.8394 cm
Q
q
1 0 0 1 40.01575 483.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The other menu items simply toggle the status of each frame, making them visible or minimizing them.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 453.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 435.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This menu contains help-related menu items.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 429.4394 cm
Q
q
1 0 0 1 40.01575 429.4394 cm
Q
q
1 0 0 1 40.01575 417.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (Manual\205) Tj /F1 10 Tf ( Shows the Help dialog.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 411.4394 cm
Q
q
1 0 0 1 40.01575 399.4394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (About us\205) Tj /F1 10 Tf ( Shows a cute dialog that contains the names of the project contributors, along with their roles.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 399.4394 cm
Q
q
1 0 0 1 40.01575 366.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Frames) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 348.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The GUI is composed by seven frames, six of which are visible by default, and one \(the I/O frame\) is hidden.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 318.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Cycles) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 288.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.9773 Tw (The Cycles frame shows the evolution of the execution flow during time, showing for each time slot which) Tj T* 0 Tw (instructions are in the pipeline, and in which stage of the pipeline they are located.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 257.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Registers) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 215.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .417705 Tw (The Registers frame shows the content of each register. By left-clicking on them you can see in the status bar their) Tj T* 0 Tw .056205 Tw (decimal \(signed\) value, while double-clicking on them will pop up a dialog that allows the user to change the value of) Tj T* 0 Tw (the register.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 185.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Statistics) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 167.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Statistics frame shows some statistics about the program execution.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 125.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .586894 Tw (Note that during the last execution cycle the cycles counter is not incremented, because the last execution cycle is) Tj T* 0 Tw .279205 Tw (not a full CPU cycle but rather a pseudo-cycle whose only duties are to remove the last instruction from the pipeline) Tj T* 0 Tw (and increment the counter of executed instructions.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 95.03937 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Pipeline) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 65.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.439653 Tw (The Pipeline frame shows the actual status of the pipeline, showing which instruction is in which pipeline stage.) Tj T* 0 Tw (Different colors highlight different pipeline stages.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (18) Tj T* ET
Q
Q
 
endstream
endobj
257 0 obj
<<
/Length 7015
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Memory) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 718.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.740256 Tw (The Memory frame shows memory cells content, along with labels and comments taken from the source code.) Tj T* 0 Tw .788476 Tw (Memory cells content, like registers, can be modified double-clicking on them, and clicking on them will show their) Tj T* 0 Tw .001268 Tw (decimal value in the status bar. The first column shows the hexadecimal address of the memory cell, and the second) Tj T* 0 Tw (column shows the value of the cell. Other columns show additional info from the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 688.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Code) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 646.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .590829 Tw (The Code window shows the instructions loaded in memory. The first column shows the address of the instruction,) Tj T* 0 Tw .636721 Tw (while the second column shows the hexadecimal representation of the instructions. Other columns show additional) Tj T* 0 Tw (info taken from the source code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 615.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Input/Output) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 573.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .708005 Tw (The Input/Output window provides an interface for the user to see the output that the program creates through the) Tj T* 0 Tw -0.024413 Tw (SYSCALLs 4 and 5. Actually it is not used for input, as there\222s a dialog that pops up when a SYSCALL 3 tries to read) Tj T* 0 Tw (from standard input, but future versions will include an input text box.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 541.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Dialogs) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 511.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .938637 Tw (Dialogs are used by EduMIPS64 to interact with the user in many ways. Here\222s a summary of the most important) Tj T* 0 Tw (dialogs:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 480.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Settings) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 438.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .409689 Tw (In the Settings dialog various aspects of the simulator can be configured. Clicking on the \223OK\224 button will cause the) Tj T* 0 Tw .353373 Tw (options to be saved, while clicking on \223Cancel\224 \(or simply closing the window\) will cause the changes to be ignored.) Tj T* 0 Tw (Don\222t forget to click \223OK\224 if you want to save your changes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 420.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Main Settings tab allow to configure forwarding and the number of steps in the Multi Cycle mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 342.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.359672 Tw (The Behavior tab allow to enable or disable warnings during the parsing phase, the \223Sync graphics with CPU in) Tj T* 0 Tw .632273 Tw (multi-step execution\224 option, when checked, will synchronize the frames\222 graphical status with the internal status of) Tj T* 0 Tw .3239 Tw (the simulator. This means that the simulation will be slower, but you\222ll have an explicit graphical feedback of what is) Tj T* 0 Tw 1.285881 Tw (happening during the simulation. If this option is checked, the \223Interval between cycles\224 option will influence how) Tj T* 0 Tw 1.441417 Tw (many milliseconds the simulator will wait before starting a new cycle. Those options are effective only when the) Tj T* 0 Tw (simulation is run using the \223Run\224 or the \223Multi Cycle\224 options from the Execute menu.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 240.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 86 Tm /F1 10 Tf 12 TL 2.409116 Tw (The last two options set the behavior of the simulator when a synchronous exception is raised. If the \223Mask) Tj T* 0 Tw 2.44894 Tw (synchronous exceptions\224 option is checked, the simulator will ignore any Division by zero or Integer overflow) Tj T* 0 Tw 2.953381 Tw (exception. If the \223Terminate on synchronous exception\224 option is checked, the simulation will be halted if a) Tj T* 0 Tw .25894 Tw (synchronous exception is raised. Please note that if synchronous exceptions are masked, nothing will happen, even) Tj T* 0 Tw .116005 Tw (if the termination option is checked. If exceptions are not masked and the termination option is not checked, a dialog) Tj T* 0 Tw 1.287913 Tw (will pop out, but the simulation will go on as soon as the dialog is closed. If exceptions are not masked and the) Tj T* 0 Tw 1.055705 Tw (termination option is checked, the dialog will pop out, and the simulation will be stopped as soon as the dialog is) Tj T* 0 Tw (closed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 198.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.530227 Tw (The last tab allows to change the appearance of the user interface. There are options to change the colors) Tj T* 0 Tw .555227 Tw (associated to the different pipeline stages, an option to choose whether memory cells are shown as long or double) Tj T* 0 Tw (values and an option to set the UI font size.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 168.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .429732 Tw (Note that the UI scaling with font size is far from perfect, but it should be enough to make the simulator usable with) Tj T* 0 Tw (high-resolution displays \(e.g., 4k\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 138.2394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Dinero Frontend) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 96.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.123106 Tw (The Dinero Frontend dialog allows to feed a DineroIV process with the trace file internally generated by the execution) Tj T* 0 Tw -0.001996 Tw (of the program. In the first text box there is the path of the DineroIV executable, and in the second one there must be) Tj T* 0 Tw (the parameters of DineroIV.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 78.23937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The lower section contains the output of the DineroIV process, from which you can take the data that you need.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The user interface) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (19) Tj T* ET
Q
Q
 
endstream
endobj
258 0 obj
<<
/Length 7676
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 772.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (Help) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 754.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The Help dialog brings up the on-line manual, which is an HTML copy of this document.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 721.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Command line options) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 691.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .649672 Tw (Three command line options are available. They are described in the following list, with the long name enclosed in) Tj T* 0 Tw (round brackets. Long and short names can be used in the same way.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 685.8394 cm
Q
q
1 0 0 1 40.01575 685.8394 cm
Q
q
1 0 0 1 40.01575 673.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-v \(\226version\)) Tj /F1 10 Tf ( prints the simulator version and exits.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 667.8394 cm
Q
q
1 0 0 1 40.01575 655.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-h \(\226help\)) Tj /F1 10 Tf ( prints a help message with a brief summary of command line options, then exits.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 649.8394 cm
Q
q
1 0 0 1 40.01575 637.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-f \(\226file\) filename) Tj /F1 10 Tf ( opens ) Tj /F3 10 Tf (filename) Tj /F1 10 Tf ( in the simulator) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 631.8394 cm
Q
q
1 0 0 1 40.01575 619.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-r \(\226reset\)) Tj /F1 10 Tf ( resets the stored configuration to the default values) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 613.8394 cm
Q
q
1 0 0 1 40.01575 601.8394 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (-d \(\226debug\)) Tj /F1 10 Tf ( enters Debug mode) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 40.01575 601.8394 cm
Q
q
1 0 0 1 40.01575 559.8394 cm
q
BT 1 0 0 1 0 26 Tm .804705 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf (\226debug) Tj /F1 10 Tf ( flag has the effect to activate Debug mode. In this mode, a new frame is available, the Debug frame,) Tj T* 0 Tw .740171 Tw (and it shows the log of internal activities of EduMIPS64. It is not useful for the end user, it is meant to be used by) Tj T* 0 Tw (EduMIPS64 developers.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 527.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (Running EduMIPS64) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 497.0394 cm
q
BT 1 0 0 1 0 14 Tm .225641 Tw 12 TL /F1 10 Tf 0 0 0 rg (The EduMIPS64 ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file can act both as a stand-alone executable ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file and as an applet, so it can be executed in) Tj T* 0 Tw (both ways. Both methods need the Java Runtime Environment, version 5 or later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 455.0394 cm
q
BT 1 0 0 1 0 26 Tm 5.820241 Tw 12 TL /F1 10 Tf 0 0 0 rg (To run it as a stand-alone application, the ) Tj /F3 10 Tf (java) Tj /F1 10 Tf ( executable must be issued in this way: ) Tj /F3 10 Tf (java -jar) Tj T* 0 Tw .419631 Tw (edumips64-version.jar) Tj /F1 10 Tf (, where the ) Tj /F3 10 Tf (version) Tj /F1 10 Tf ( string must be replaced with the actual version of the simulator. On some) Tj T* 0 Tw (systems, you may be able to execute it by just clicking on the ) Tj /F3 10 Tf (.jar) Tj /F1 10 Tf ( file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 425.0394 cm
q
BT 1 0 0 1 0 14 Tm 1.026705 Tw 12 TL /F1 10 Tf 0 0 0 rg (To embed it in an HTML, the ) Tj /F3 10 Tf (<) Tj (applet) Tj (>) Tj /F1 10 Tf ( tag must be used. The EduMIPS64 web site contains a page that already) Tj T* 0 Tw (contains the applet, so that everyone can execute it without the hassle of using the command line.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 389.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 25.2 re B*
Q
q
BT 1 0 0 1 0 3.2 Tm 19.2 TL /F2 16 Tf .12549 .262745 .360784 rg (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 371.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In this chapter you\222ll find some sample listings that will be useful in order to understand how EduMIPS64 works.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 339.0394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 22.8 re B*
Q
q
BT 1 0 0 1 0 2.8 Tm 16.8 TL /F5 14 Tf .12549 .262745 .360784 rg (SYSCALL) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 297.0394 cm
q
BT 1 0 0 1 0 26 Tm .058637 Tw 12 TL /F1 10 Tf 0 0 0 rg (It\222s important to understand that examples for SYSCALL 1-4 refer to the ) Tj /F3 10 Tf (print.s) Tj /F1 10 Tf ( file, that is the example for SYSCALL) Tj T* 0 Tw .191917 Tw (5. If you want to run the examples, you should copy the content of that example in a file named ) Tj /F3 10 Tf (print.s) Tj /F1 10 Tf ( and include it) Tj T* 0 Tw (in your code.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 267.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.311794 Tw (Some examples use an already existing file descriptor, even if it doesn\222t truly exist. If you want to run those) Tj T* 0 Tw (examples, use the SYSCALL 1 example to open a file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 236.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 0) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 218.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (When SYSCALL 0 is called, it stops the execution of the program. Example:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 175.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 42 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F4 10 Tf 12 TL (.code) Tj T* (    daddi   r1, r0, 0    ; saves 0 in R1) Tj T* (    syscall 0            ; exits) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 145.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 1) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 127.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that opens a file:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 60.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 66 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F4 10 Tf 12 TL (                .data) Tj T* (error_op:       .asciiz     "Error opening the file") Tj T* (ok_message:     .asciiz     "All right") Tj T* (params_sys1:    .asciiz     "filename.txt") Tj T* (                .word64     0xF) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (20) Tj T* ET
Q
Q
 
endstream
endobj
259 0 obj
<<
/Length 4878
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 612.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 174 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 158 Tm /F4 10 Tf 12 TL  T* (                .text) Tj T* (open:           daddi       r14, r0, params_sys1) Tj T* (                syscall     1) Tj T* (                daddi       $s0, r0, -1) Tj T* (                dadd        $s2, r0, r1) Tj T* (                daddi       $a0,r0,ok_message) Tj T* (                bne         r1,$s0,end) Tj T* (                daddi       $a0,r0,error_op) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall 0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .252205 Tw (In the first two rows we write to memory the strings containing the error message and the success message that we) Tj T* 0 Tw (will pass to print_string function, and we give them two labels. The print_string function is included in the print.s file.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 550.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .290178 Tw (Next, we write to memory the data required from SYSCALL 1 \(row 4, 5\), the path of the file to be opened \(that must) Tj T* 0 Tw (exist if we work in read or read/write mode\) and, in the next memory cell, an integer that defines the opening mode.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 520.2394 cm
q
BT 1 0 0 1 0 14 Tm .644947 Tw 12 TL /F1 10 Tf 0 0 0 rg (In this example, the file was opened using the following modes: ) Tj /F3 10 Tf (O_RDWR) Tj /F1 10 Tf ( | ) Tj /F3 10 Tf (O_CREAT) Tj /F1 10 Tf ( | ) Tj /F3 10 Tf (O_APPEND) Tj /F1 10 Tf (. The number) Tj T* 0 Tw (15 \(0xF in base 16\) comes from the sum of the values of these three modes \(3 + 4 + 8\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 502.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We give a label to this data so that we can use it later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 460.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .318766 Tw (In the .text section, we save the address of params_sys1 \(that for the compiler is a number\) in register r14; next we) Tj T* 0 Tw .221364 Tw (can call SYSCALL 1 and save the content of r1 in $s2, so that we can use it in the rest of the program \(for instance,) Tj T* 0 Tw (with other SYSCALL\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 430.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.140705 Tw (Then the print_string function is called, passing error_op as an argument if r1 is equal to -1 \(rows 13-14\) or else) Tj T* 0 Tw (passing ok_message as an argument if everything went smoothly \(rows 12 and 16\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 399.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 2) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 381.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that closes a file:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 159.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 222 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 206 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys2:    .space 8) Tj T* (error_cl:       .asciiz     "Error closing the file") Tj T* (ok_message:     .asciiz     "All right") Tj T*  T* (                .text) Tj T* (close:          daddi       r14, r0, params_sys2) Tj T* (                sw          $s2, params_sys2\(r0\)) Tj T* (                syscall     2) Tj T* (                daddi       $s0, r0, -1) Tj T* (                daddi       $a0, r0, ok_message) Tj T* (                bne         r1, $s0, end) Tj T* (                daddi       $a0, r0, error_cl) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 127.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .530671 Tw (First we save some memory for the only argument of SYSCALL 2, the file descriptor of the file that must be closed) Tj T* 0 Tw (\(row 2\), and we give it a label so that we can access it later.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 97.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.110295 Tw (Next we put in memory the strings containing the error message and the success message, that will be passed to the) Tj T* 0 Tw (print_string function \(rows 3, 4\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 79.03937 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (In the .text section, we save the address of params_sys2 in r14; then we can call SYSCALL 2.) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (21) Tj T* ET
Q
Q
 
endstream
endobj
260 0 obj
<<
/Length 4418
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 763.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.935433 Tw (Now we call the print_string function using error_cl as a parameter if r1 yields -1 \(row 13\), or we call it using) Tj T* 0 Tw (ok_message as a parameter if all went smoothly \(row 11\).) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 745.0394 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 0 rg (Note:) Tj /F1 10 Tf ( This listing needs that registry $s2 contains the file descriptor of the file to use.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 714.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 3) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 696.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that reads 16 bytes from a file and saves them to memory:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 401.8394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 294 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 278 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys3:    .space      8) Tj T* (ind_value:      .space      8) Tj T* (                .word64     16) Tj T* (error_3:        .asciiz     "Error while reading from file") Tj T* (ok_message:     .asciiz     "All right") Tj T*  T* (value:          .space      30) Tj T*  T* (                .text) Tj T* (read:           daddi       r14, r0, params_sys3) Tj T* (                sw          $s2, params_sys3\(r0\)) Tj T* (                daddi       $s1, r0, value) Tj T* (                sw          $s1, ind_value\(r0\)) Tj T* (                syscall     3) Tj T* (                daddi       $s0, r0, -1) Tj T* (                daddi       $a0, r0,ok_message) Tj T* (                bne         r1, $s0,end) Tj T* (                daddi       $a0, r0,error_3) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 345.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .68829 Tw (The first 4 rows of the .data section contain the arguments of SYSCALL 3, the file descriptor of the from which we) Tj T* 0 Tw .000205 Tw (must read, the memory address where the SYSCALL must save the read data, the number of bytes to read. We give) Tj T* 0 Tw 1.698561 Tw (labels to those parameters that must be accessed later. Next we put, as usual, the strings containing the error) Tj T* 0 Tw (message and the success message.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 303.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .001205 Tw (In the .text section, we save the params_sys3 address to register r14, we save in the memory cells for the SYSCALL) Tj T* 0 Tw .024277 Tw (parameters the file descriptor \(that we suppose to have in $s2\) and the address that we want to use to save the read) Tj T* 0 Tw (bytes.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 273.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.499064 Tw (Next we can call SYSCALL 3, and then we call the print_string function passing as argument error_3 or) Tj T* 0 Tw (ok_message, according to the success of the operation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 243.4394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 4) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 225.4394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that writes to a file a string:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 62.63937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 162 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 146 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys4:    .space      8) Tj T* (ind_value:      .space      8) Tj T* (                .word64     16) Tj T* (error_4:        .asciiz     "Error writing to file") Tj T* (ok_message:     .asciiz     "All right") Tj T* (value:          .space      30) Tj T*  T* (                .text) Tj T*  T* (write:          daddi       r14, r0,params_sys4) Tj T* (                sw          $s2, params_sys4\(r0\)) Tj T* (                daddi       $s1, r0,value) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22) Tj T* ET
Q
Q
 
endstream
endobj
261 0 obj
<<
/Length 4833
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 648.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 138 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 122 Tm /F4 10 Tf 12 TL (                sw          $s1, ind_value\(r0\)) Tj T* (                syscall     4) Tj T* (                daddi       $s0, r0,-1) Tj T* (                daddi       $a0, r0,ok_message) Tj T* (                bne         r1, $s0,end) Tj T* (                daddi       $a0, r0,error_4) Tj T*  T* (end:            jal         print_string) Tj T* (                syscall     0) Tj T*  T* (                #include    print.s) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 592.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .68829 Tw (The first 4 rows of the .data section contain the arguments of SYSCALL 4, the file descriptor of the from which we) Tj T* 0 Tw -0.026295 Tw (must read, the memory address from where the SYSCALL must read the bytes to write, the number of bytes to write.) Tj T* 0 Tw .819163 Tw (We give labels to those parameters that must be accessed later. Next we put, as usual, the strings containing the) Tj T* 0 Tw (error message and the success message.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 550.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .001205 Tw (In the .text section, we save the params_sys4 address to register r14, we save in the memory cells for the SYSCALL) Tj T* 0 Tw .306205 Tw (parameters the file descriptor \(that we suppose to have in $s2\) and the address from where we must take the bytes) Tj T* 0 Tw (to weite.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 520.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.499064 Tw (Next we can call SYSCALL 3, and then we call the print_string function passing as argument error_3 or) Tj T* 0 Tw (ok_message, according to the success of the operation.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 489.8394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 471.8394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example program that contains a function that prints to standard output the string contained in $a0:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 357.0394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 114 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 98 Tm /F4 10 Tf 12 TL (                .data) Tj T* (params_sys5:    .space  8) Tj T*  T* (                .text) Tj T* (print_string:) Tj T* (                sw      $a0, params_sys5\(r0\)) Tj T* (                daddi   r14, r0, params_sys5) Tj T* (                syscall 5) Tj T* (                jr      r31) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 325.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .579743 Tw (The second row is used to save space for the string that must be printed by the SYSCALL, that is filled by the first) Tj T* 0 Tw (instruction of the .text section, that assumes that in $a0 there\222s the address of the string to be printed.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 295.0394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .252004 Tw (The next instruction puts in r14 the address of this string, and then we can call SYSCALL 5 and print the string. The) Tj T* 0 Tw (last instruction sets the program counter to the content of r31, as the usual MIPS calling convention states.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 264.6394 cm
q
.8 .8 .8 RG
.3 w
.94902 .94902 .94902 rg
n -10 0 525.2441 20.4 re B*
Q
q
BT 1 0 0 1 0 2.4 Tm 14.4 TL /F5 12 Tf .12549 .262745 .360784 rg (A more complex usage example of SYSCALL 5) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 246.6394 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (SYSCALL 5 uses a not-so-simple arguments passing mechanism, that will be shown in the following example:) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 59.83937 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 186 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F4 10 Tf 12 TL (                .data) Tj T* (format_str:     .asciiz   "%dth of %s:\\n%s version %i.%i is being tested!") Tj T* (s1:             .asciiz   "June") Tj T* (s2:             .asciiz   "EduMIPS64") Tj T* (fs_addr:        .space    4) Tj T* (                .word     5) Tj T* (s1_addr:        .space    4) Tj T* (s2_addr:        .space    4) Tj T* (                .word     0) Tj T* (                .word     5) Tj T* (test:) Tj T* (                .code) Tj T* (                daddi     r5, r0, format_str) Tj T* (                sw        r5, fs_addr\(r0\)) Tj T* (                daddi     r2, r0, s1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (23) Tj T* ET
Q
Q
 
endstream
endobj
262 0 obj
<<
/Length 1903
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 40.01575 708.2394 cm
q
q
q
1 0 0 1 4.4 .4 cm
q
.666667 .8 .6 RG
.3 w
.933333 1 .8 rg
n -4 0 514.4441 78 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F4 10 Tf 12 TL (                daddi     r3, r0, s2) Tj T* (                sd        r2, s1_addr\(r0\)) Tj T* (                sd        r3, s2_addr\(r0\)) Tj T* (                daddi     r14, r0, fs_addr) Tj T* (                syscall   5) Tj T* (                syscall   0) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 40.01575 664.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.111705 Tw (The address of the format string is put into R5, whose content is then saved to memory at address fs_addr. The) Tj T* 0 Tw .834006 Tw (string parameters\222 addresses are saved into s1_addr and s2_addr. Those two string parameters are the ones that) Tj T* 0 Tw (match the two %s placeholders in the format string.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 610.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .383381 Tw (Looking at the memory, it\222s obvious that the parameters matching the placeholders are stored immediately after the) Tj T* 0 Tw .92894 Tw (address of the format string: numbers match integer parameters, while addresses match string parameters. In the) Tj T* 0 Tw .999205 Tw (s1_addr and s2_addr locations there are the addresses of the two strings that we want to print instead of the %s) Tj T* 0 Tw (placeholders.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .702847 Tw (The execution of the example will show how SYSCALL 5 can handle complex format strings like the one stored at) Tj T* 0 Tw (format_str.) Tj T* ET
Q
Q
q
1 0 0 1 40.01575 580.2394 cm
Q
q
1 0 0 1 34.01575 807.2126 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Code Examples) Tj T* ET
Q
Q
q
1 0 0 1 34.01575 22.67717 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (24) Tj T* ET
Q
Q
 
endstream
endobj
263 0 obj
<<
/Nums [ 0 264 0 R 1 265 0 R 2 266 0 R 3 267 0 R 4 268 0 R 
  5 269 0 R 6 270 0 R 7 271 0 R 8 272 0 R 9 273 0 R 
  10 274 0 R 11 275 0 R 12 276 0 R 13 277 0 R 14 278 0 R 
  15 279 0 R 16 280 0 R 17 281 0 R 18 282 0 R 19 283 0 R 
  20 284 0 R 21 285 0 R 22 286 0 R 23 287 0 R 24 288 0 R 
  25 289 0 R 26 290 0 R 27 291 0 R ]
>>
endobj
264 0 obj
<<
/S /D /St 1
>>
endobj
265 0 obj
<<
/S /D /St 2
>>
endobj
266 0 obj
<<
/S /r /St 1
>>
endobj
267 0 obj
<<
/S /r /St 2
>>
endobj
268 0 obj
<<
/S /D /St 1
>>
endobj
269 0 obj
<<
/S /D /St 2
>>
endobj
270 0 obj
<<
/S /D /St 3
>>
endobj
271 0 obj
<<
/S /D /St 4
>>
endobj
272 0 obj
<<
/S /D /St 5
>>
endobj
273 0 obj
<<
/S /D /St 6
>>
endobj
274 0 obj
<<
/S /D /St 7
>>
endobj
275 0 obj
<<
/S /D /St 8
>>
endobj
276 0 obj
<<
/S /D /St 9
>>
endobj
277 0 obj
<<
/S /D /St 10
>>
endobj
278 0 obj
<<
/S /D /St 11
>>
endobj
279 0 obj
<<
/S /D /St 12
>>
endobj
280 0 obj
<<
/S /D /St 13
>>
endobj
281 0 obj
<<
/S /D /St 14
>>
endobj
282 0 obj
<<
/S /D /St 15
>>
endobj
283 0 obj
<<
/S /D /St 16
>>
endobj
284 0 obj
<<
/S /D /St 17
>>
endobj
285 0 obj
<<
/S /D /St 18
>>
endobj
286 0 obj
<<
/S /D /St 19
>>
endobj
287 0 obj
<<
/S /D /St 20
>>
endobj
288 0 obj
<<
/S /D /St 21
>>
endobj
289 0 obj
<<
/S /D /St 22
>>
endobj
290 0 obj
<<
/S /D /St 23
>>
endobj
291 0 obj
<<
/S /D /St 24
>>
endobj
xref
0 292
0000000000 65535 f 
0000000073 00000 n 
0000000176 00000 n 
0000000283 00000 n 
0000000395 00000 n 
0000000602 00000 n 
0000000809 00000 n 
0000000978 00000 n 
0000001147 00000 n 
0000001316 00000 n 
0000001485 00000 n 
0000001655 00000 n 
0000001825 00000 n 
0000001941 00000 n 
0000002111 00000 n 
0000002281 00000 n 
0000002451 00000 n 
0000002621 00000 n 
0000002791 00000 n 
0000002961 00000 n 
0000003131 00000 n 
0000003301 00000 n 
0000003471 00000 n 
0000003641 00000 n 
0000003811 00000 n 
0000003981 00000 n 
0000004151 00000 n 
0000004321 00000 n 
0000004491 00000 n 
0000004661 00000 n 
0000004831 00000 n 
0000005001 00000 n 
0000005171 00000 n 
0000005341 00000 n 
0000005511 00000 n 
0000005681 00000 n 
0000005851 00000 n 
0000006021 00000 n 
0000006191 00000 n 
0000006361 00000 n 
0000006531 00000 n 
0000006701 00000 n 
0000006871 00000 n 
0000007041 00000 n 
0000007211 00000 n 
0000007381 00000 n 
0000007551 00000 n 
0000007721 00000 n 
0000007891 00000 n 
0000008061 00000 n 
0000008231 00000 n 
0000008401 00000 n 
0000008571 00000 n 
0000008741 00000 n 
0000008911 00000 n 
0000009081 00000 n 
0000009251 00000 n 
0000009421 00000 n 
0000009591 00000 n 
0000009761 00000 n 
0000009931 00000 n 
0000010101 00000 n 
0000010271 00000 n 
0000010441 00000 n 
0000010611 00000 n 
0000010781 00000 n 
0000010951 00000 n 
0000011121 00000 n 
0000011291 00000 n 
0000011461 00000 n 
0000011631 00000 n 
0000011801 00000 n 
0000011971 00000 n 
0000012141 00000 n 
0000012311 00000 n 
0000012481 00000 n 
0000012651 00000 n 
0000012821 00000 n 
0000012991 00000 n 
0000013161 00000 n 
0000013331 00000 n 
0000013501 00000 n 
0000013671 00000 n 
0000013841 00000 n 
0000014011 00000 n 
0000014181 00000 n 
0000014351 00000 n 
0000014521 00000 n 
0000015318 00000 n 
0000015488 00000 n 
0000015658 00000 n 
0000015828 00000 n 
0000015998 00000 n 
0000016168 00000 n 
0000016338 00000 n 
0000016508 00000 n 
0000016678 00000 n 
0000016848 00000 n 
0000017018 00000 n 
0000017188 00000 n 
0000017358 00000 n 
0000017529 00000 n 
0000017700 00000 n 
0000017871 00000 n 
0000018042 00000 n 
0000018213 00000 n 
0000018384 00000 n 
0000018555 00000 n 
0000018726 00000 n 
0000018897 00000 n 
0000019068 00000 n 
0000019239 00000 n 
0000019410 00000 n 
0000019581 00000 n 
0000019752 00000 n 
0000019923 00000 n 
0000020094 00000 n 
0000020265 00000 n 
0000020436 00000 n 
0000020607 00000 n 
0000020778 00000 n 
0000020949 00000 n 
0000021120 00000 n 
0000021291 00000 n 
0000021462 00000 n 
0000021633 00000 n 
0000021804 00000 n 
0000021975 00000 n 
0000022146 00000 n 
0000022317 00000 n 
0000022488 00000 n 
0000022659 00000 n 
0000022830 00000 n 
0000023403 00000 n 
0000023579 00000 n 
0000023768 00000 n 
0000023945 00000 n 
0000024052 00000 n 
0000024173 00000 n 
0000024418 00000 n 
0000024627 00000 n 
0000024836 00000 n 
0000025045 00000 n 
0000025254 00000 n 
0000025463 00000 n 
0000025672 00000 n 
0000025881 00000 n 
0000026090 00000 n 
0000026299 00000 n 
0000026470 00000 n 
0000026555 00000 n 
0000026726 00000 n 
0000026963 00000 n 
0000027042 00000 n 
0000027213 00000 n 
0000027384 00000 n 
0000027555 00000 n 
0000027800 00000 n 
0000028009 00000 n 
0000028218 00000 n 
0000028427 00000 n 
0000028636 00000 n 
0000028845 00000 n 
0000029054 00000 n 
0000029263 00000 n 
0000029472 00000 n 
0000029681 00000 n 
0000029890 00000 n 
0000030099 00000 n 
0000030308 00000 n 
0000030418 00000 n 
0000030677 00000 n 
0000030755 00000 n 
0000030925 00000 n 
0000031091 00000 n 
0000031210 00000 n 
0000031347 00000 n 
0000031484 00000 n 
0000031610 00000 n 
0000031791 00000 n 
0000031913 00000 n 
0000032056 00000 n 
0000032201 00000 n 
0000032385 00000 n 
0000032511 00000 n 
0000032651 00000 n 
0000032792 00000 n 
0000032932 00000 n 
0000033073 00000 n 
0000033201 00000 n 
0000033366 00000 n 
0000033477 00000 n 
0000033600 00000 n 
0000033724 00000 n 
0000033834 00000 n 
0000034014 00000 n 
0000034175 00000 n 
0000034305 00000 n 
0000034445 00000 n 
0000034573 00000 n 
0000034716 00000 n 
0000034857 00000 n 
0000034994 00000 n 
0000035115 00000 n 
0000035295 00000 n 
0000035454 00000 n 
0000035564 00000 n 
0000035691 00000 n 
0000035820 00000 n 
0000035945 00000 n 
0000036071 00000 n 
0000036181 00000 n 
0000036348 00000 n 
0000036460 00000 n 
0000036589 00000 n 
0000036719 00000 n 
0000036847 00000 n 
0000036973 00000 n 
0000037097 00000 n 
0000037215 00000 n 
0000037383 00000 n 
0000037497 00000 n 
0000037632 00000 n 
0000037742 00000 n 
0000037882 00000 n 
0000038005 00000 n 
0000038165 00000 n 
0000038302 00000 n 
0000038417 00000 n 
0000038546 00000 n 
0000038675 00000 n 
0000038804 00000 n 
0000038933 00000 n 
0000039062 00000 n 
0000039209 00000 n 
0000039490 00000 n 
0000040462 00000 n 
0000040588 00000 n 
0000049910 00000 n 
0000054843 00000 n 
0000061849 00000 n 
0000076228 00000 n 
0000086803 00000 n 
0000095400 00000 n 
0000104240 00000 n 
0000113648 00000 n 
0000122696 00000 n 
0000131177 00000 n 
0000139755 00000 n 
0000148256 00000 n 
0000154788 00000 n 
0000163127 00000 n 
0000172026 00000 n 
0000182834 00000 n 
0000192172 00000 n 
0000200516 00000 n 
0000210348 00000 n 
0000218295 00000 n 
0000225363 00000 n 
0000233092 00000 n 
0000238023 00000 n 
0000242494 00000 n 
0000247380 00000 n 
0000249336 00000 n 
0000249682 00000 n 
0000249717 00000 n 
0000249752 00000 n 
0000249787 00000 n 
0000249822 00000 n 
0000249857 00000 n 
0000249892 00000 n 
0000249927 00000 n 
0000249962 00000 n 
0000249997 00000 n 
0000250032 00000 n 
0000250067 00000 n 
0000250102 00000 n 
0000250137 00000 n 
0000250173 00000 n 
0000250209 00000 n 
0000250245 00000 n 
0000250281 00000 n 
0000250317 00000 n 
0000250353 00000 n 
0000250389 00000 n 
0000250425 00000 n 
0000250461 00000 n 
0000250497 00000 n 
0000250533 00000 n 
0000250569 00000 n 
0000250605 00000 n 
0000250641 00000 n 
trailer
<<
/ID 
[<1b13163e141839e5a7a234fde8607330><1b13163e141839e5a7a234fde8607330>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 170 0 R
/Root 169 0 R
/Size 292
>>
startxref
250677
%%EOF
