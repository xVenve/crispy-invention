DROP TABLE USUARIOS CASCADE CONSTRAINTS;
DROP TABLE PERFILES CASCADE CONSTRAINTS;
DROP TABLE TIPOS_CONTRATOS CASCADE CONSTRAINTS;
DROP TABLE CONTRATOS CASCADE CONSTRAINTS;
DROP TABLE RATIOS CASCADE CONSTRAINTS;
DROP TABLE IDIOMAS CASCADE CONSTRAINTS;
DROP TABLE CALIFICACIONES CASCADE CONSTRAINTS;
DROP TABLE GENEROS CASCADE CONSTRAINTS;
DROP TABLE IMDBS CASCADE CONSTRAINTS;
DROP TABLE PELICULAS CASCADE CONSTRAINTS;
DROP TABLE PALABRAS_PELICULA CASCADE CONSTRAINTS;
DROP TABLE GENEROS_PELICULA CASCADE CONSTRAINTS;
DROP TABLE PROTAGONISTAS CASCADE CONSTRAINTS;
DROP TABLE CLUBES CASCADE CONSTRAINTS;
DROP TABLE MEMBRESIA CASCADE CONSTRAINTS;
DROP TABLE PROPUESTAS CASCADE CONSTRAINTS;
DROP TABLE CLUBES_HISTORICOS CASCADE CONSTRAINTS;
DROP TABLE MEMBRESIA_HISTORICAS CASCADE CONSTRAINTS;
DROP TABLE OPINIONES CASCADE CONSTRAINTS;
DROP TABLE INVITACIONES CASCADE CONSTRAINTS;
DROP TABLE SOLICITUDES CASCADE CONSTRAINTS;
DROP TABLE CREACIONES_CLUB CASCADE CONSTRAINTS;

CREATE TABLE USUARIOS(
	nombre_usuario VARCHAR2(100) NOT NULL,
	password VARCHAR2(100) NOT NULL,
	email VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_USUARIOS PRIMARY KEY (nombre_usuario),
	CONSTRAINT FK_USUARIOS_email UNIQUE(email),
	CONSTRAINT password_valid CHECK (LENGTH(password) >8) --Indicar que hemos resuelto el supuesto semantico explicito, al controlar la longitud.
	);

CREATE TABLE PERFILES(
	dni VARCHAR2(9) NOT NULL,
	nombre_pila VARCHAR2(100),
	apellido1 VARCHAR2(100),
	apellido2 VARCHAR(100),
	f_nacimiento DATE,
	telf VARCHAR2(14), --Revisar si es un numero
	edad NUMBER(3),
	usuario VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_PERFILES PRIMARY KEY (dni),
	CONSTRAINT  FK_PERFILES_perfil_usuario FOREIGN KEY(usuario) REFERENCES USUARIOS(nombre_usuario)
	ON DELETE CASCADE
);

CREATE TABLE TIPOS_CONTRATOS(
	tipo VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_TIPOSCONTRATOS PRIMARY KEY (tipo)
);

CREATE TABLE CONTRATOS(
	id VARCHAR2(100) NOT NULL,
	tipo_contrato VARCHAR2(50) NOT NULL,
	perfil VARCHAR2(9) NOT NULL,
	cod_postal VARCHAR2(10) NOT NULL, --revisar si es un numero
	ciudad VARCHAR2(100) NOT NULL,
	pais VARCHAR2(100) NOT NULL,
	f_inicio DATE NOT NULL,
	f_fin DATE,
	CONSTRAINT PKCONTRATOS_id PRIMARY KEY (id),
	CONSTRAINT FK_CONTRATOS_contrato_perfil FOREIGN KEY (perfil) REFERENCES PERFILES(DNI),
	CONSTRAINT FK_CONTRATOS_contrato_tipo FOREIGN KEY (tipo_contrato) REFERENCES TIPOS_CONTRATOS(tipo)
);

CREATE TABLE RATIOS(
	tipo VARCHAR2(100) NOT NULL, --revisar si es un numero
	CONSTRAINT PK_RATIOS PRIMARY KEY (tipo)
);

CREATE TABLE IDIOMAS(
	nombre VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_IDIOMAS PRIMARY KEY (nombre)
);

CREATE TABLE CALIFICACIONES(
	tipo VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_CALIFICACIONES PRIMARY KEY (tipo)
);

CREATE TABLE GENEROS(
	tipo VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_GENEROS PRIMARY KEY (tipo)
);

CREATE TABLE IMDBS(
	link VARCHAR2(200) NOT NULL,
	puntuacion NUMBER(2,1) NOT NULL, --2 para la parte entera y 1 para el decimal.
	cantidad_users NUMBER(4) NOT NULL,
	cantidad_criticos NUMBER(4) NOT NULL,
	CONSTRAINT PK_IMDBS_link PRIMARY KEY (link)
);

CREATE TABLE PELICULAS(
	titulo VARCHAR2(100) NOT NULL,
	director VARCHAR2(100) NOT NULL,
	duracion NUMBER(3) NOT NULL, --poner como un numero
	color VARCHAR2(100) NOT NULL,
	ratio DECIMAL(5) NOT NULL,
	aÃ±o_estreno DATE NOT NULL,
	calif_edad VARCHAR2(8) NOT NULL,
	pais VARCHAR2(100) NOT NULL,
	idioma VARCHAR2(100) NOT NULL,
	presupuesto NUMBER(30) NOT NULL,
	ingresos NUMBER(30) NOT NULL,
	imdb VARCHAR2(100) NOT NULL,
	n_rostros NUMBER(8) NOT NULL,
	l_dir NUMBER(25) NOT NULL,
	l_peli NUMBER(25) NOT NULL,
	servicio VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_PELICULAS PRIMARY KEY(titulo, director),
	CONSTRAINT CHECK_PELICULAS_COLOR CHECK (color IN('Color','Black and White')),
	CONSTRAINT FK_PELICULAS_RATIO FOREIGN KEY(ratio) REFERENCES RATIOS(tipo),
	CONSTRAINT FK_PELICULAS_CALIFICACION FOREIGN KEY(calif_edad) REFERENCES CALIFICACIONES(TIPO),
	CONSTRAINT FK_PELICULAS_IDIOMA FOREIGN KEY(idioma) REFERENCES IDIOMAS(NOMBRE),
	CONSTRAINT FK_PELICULAS_IMDB FOREIGN KEY(imdb) REFERENCES IMDBS(link),
	CONSTRAINT FK_PELICULAS_SERVICIO FOREIGN KEY(servicio) REFERENCES TIPOS_CONTRATOS(tipo)
);

CREATE TABLE PALABRAS_PELICULA(
	pelicula_titulo VARCHAR2(100) NOT NULL,
	pelicula_director VARCHAR2(100) NOT NULL,
	palabra VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_PALABRASPELICULA PRIMARY KEY(pelicula_titulo, pelicula_director),
	CONSTRAINT FK_PALABRASPELICULA_pelicula FOREIGN KEY (pelicula_titulo, pelicula_director) REFERENCES PELICULAS(titulo, director)
	 ON DELETE CASCADE
);

CREATE TABLE GENEROS_PELICULA(
	pelicula_titulo VARCHAR2(100) NOT NULL,
	pelicula_director VARCHAR(100) NOT NULL,
	genero VARCHAR2(100) NOT NULL,
	CONSTRAINT PK_GENEROSPELICULA PRIMARY KEY(pelicula_titulo, pelicula_director),
	CONSTRAINT FK_GENEROSPELICULA_pelicula FOREIGN KEY (pelicula_titulo, pelicula_director) REFERENCES PELICULAS(titulo, director)
	 ON DELETE CASCADE,
	CONSTRAINT FK_GENEROSPELICULA_genero FOREIGN KEY (genero) REFERENCES GENEROS(tipo)
);

CREATE TABLE PROTAGONISTAS(
	pelicula_titulo VARCHAR2(100) NOT NULL,
	pelicula_director VARCHAR2(100) NOT NULL,
	nombre VARCHAR2(50) NOT NULL,
	apellido VARCHAR2(50) NOT NULL,
	likes NUMBER (25) NOT NULL,
	CONSTRAINT PK_PROTAGONISTAS PRIMARY KEY(pelicula_titulo, pelicula_director, nombre, apellido),
	CONSTRAINT FK_PROTAGONISTAS_pelicula FOREIGN KEY (pelicula_titulo, pelicula_director) REFERENCES PELICULAS(titulo, director)
);

CREATE TABLE CLUBES(
	nombre VARCHAR2(100) NOT NULL,
	abierto NUMBER(1) NOT NULL,
	ciudad VARCHAR2(50) NOT NULL,
	cod_postal VARCHAR2(60) NOT NULL,
	pais VARCHAR2(50) NOT NULL,
	f_creacion DATE NOT NULL,
	CONSTRAINT PK_CLUBES PRIMARY KEY(nombre)
);

CREATE TABLE MEMBRESIA(
	club VARCHAR2(100) NOT NULL,
	usuario VARCHAR2(100) NOT NULL,
	media_actividad NUMBER(10) NOT NULL,
	CONSTRAINT PK_MEMBRESIA PRIMARY KEY(club, usuario),
	CONSTRAINT FK_MEMBRESIA_club FOREIGN KEY(club) REFERENCES CLUBES(nombre),
	CONSTRAINT FK_MEMBRESIA_usuario FOREIGN KEY(usuario) REFERENCES USUARIOS(nombre_usuario)
);

CREATE TABLE PROPUESTAS(
	miembro_club VARCHAR(100) NOT NULL,
	miembro_usuario VARCHAR(100) NOT NULL,
	pelicula_titulo VARCHAR(100) NOT NULL,
	pelicula_director VARCHAR(100) NOT NULL,
	f_completa DATE NOT NULL,
	aceptado NUMBER(1) NOT NULL,
	asunto VARCHAR(100) NOT NULL,
	mensaje VARCHAR (1500) NOT NULL,
	CONSTRAINT PK_PROPUESTAS PRIMARY KEY(miembro_club, miembro_usuario, f_completa),
	CONSTRAINT FK_PROPUESTAS_miembro FOREIGN KEY(miembro_club, miembro_usuario) REFERENCES MEMBRESIA(club, usuario)
	 ON DELETE CASCADE,
	CONSTRAINT FK_PROPUESTAS_peliculas FOREIGN KEY(pelicula_titulo, pelicula_director) REFERENCES PELICULAS(titulo, director)
);

CREATE TABLE CLUBES_HISTORICOS(
	nombre VARCHAR2(100) NOT NULL,
	abierto NUMBER(1) NOT NULL,
	ciudad VARCHAR2(50) NOT NULL,
	cod_postal VARCHAR2(60) NOT NULL,
	pais VARCHAR2(50) NOT NULL,
	f_creacion DATE,
	f_cierre DATE,
	CONSTRAINT PK_CLUBES_HISTORICOS PRIMARY KEY(nombre)
);

CREATE TABLE MEMBRESIA_HISTORICAS (
	club VARCHAR2(100) NOT NULL,
	usuario VARCHAR2(100) NOT NULL,
	media_actividad NUMBER(10) NOT NULL,
	CONSTRAINT PK_MEMBRESIA_HISTORICAS PRIMARY KEY(club, usuario),
	CONSTRAINT FK_MEMBRESIA_HISTORICAS_club FOREIGN KEY(club) REFERENCES CLUBES_HISTORICOS(nombre)
	 ON DELETE CASCADE,
	CONSTRAINT FK_MEMBRESIA_HISTRORICAS_usuario FOREIGN KEY(usuario) REFERENCES USUARIOS(nombre_usuario)
	 ON DELETE CASCADE
);

CREATE TABLE OPINIONES(
	miembro_club VARCHAR2(100) NOT NULL,
	miembro_usuario VARCHAR2(100) NOT NULL,
	pelicula_titulo VARCHAR2(100) NOT NULL,
	pelicula_director VARCHAR2(100) NOT NULL,
	f_completa DATE NOT NULL,
	asunto VARCHAR2(1500) NOT NULL,
	valoracion NUMBER(2),
	CONSTRAINT PK_OPINIONES PRIMARY KEY (miembro_club, miembro_usuario, pelicula_titulo, pelicula_director),
	CONSTRAINT FK_OPINIONES_pelicula FOREIGN KEY (pelicula_titulo, pelicula_director) REFERENCES PELICULAS(titulo, director)
	ON DELETE CASCADE,
	CONSTRAINT FK_OPINIONES_miembro FOREIGN KEY (miembro_usuario, miembro_club) REFERENCES MEMBRESIA (usuario, club)
	ON DELETE CASCADE
);

CREATE TABLE INVITACIONES(
	miembro_usuario VARCHAR2(100) NOT NULL,
	miembro_club VARCHAR2(100) NOT NULL,
	invitado VARCHAR(100) NOT NULL,
	f_completa DATE NOT NULL,
	aceptado NUMBER(1),
	CONSTRAINT PK_INVITACIONES PRIMARY KEY (miembro_club, miembro_usuario, invitado),
	CONSTRAINT FK_INVITACIONES_miembro FOREIGN KEY (miembro_usuario, miembro_club) REFERENCES MEMBRESIA (usuario, club)
	ON DELETE CASCADE,
	CONSTRAINT FK_INVITACIONES_invitado FOREIGN KEY (invitado) REFERENCES USUARIOS (nombre_usuario)
	ON DELETE CASCADE
);

CREATE TABLE SOLICITUDES(
	usuario VARCHAR2(100) NOT NULL,
	club varchar2(100) NOT NULL,
	f_completa DATE NOT NULL,
	aceptado NUMBER(1),
	CONSTRAINT PK_SOLICITUDES PRIMARY KEY(usuario, club),
	CONSTRAINT FK_SOLICITUDES_usuario FOREIGN KEY(usuario) REFERENCES USUARIOS(nombre_usuario)
	 ON DELETE CASCADE,
	CONSTRAINT FK_SOLICITUDES_club FOREIGN KEY(club) REFERENCES CLUBES(nombre)
	 ON DELETE CASCADE
);

CREATE TABLE CREACIONES_CLUB (
	usuario VARCHAR2(100) NOT NULL,
	club VARCHAR2(100) NOT NULL,
	f_completa DATE NOT NULL,
	CONSTRAINT PK_CREACIONESCLUB PRIMARY KEY (usuario, club),
	CONSTRAINT FK_CREACIONESCLUB_usuario FOREIGN KEY (usuario) REFERENCES USUARIOS(nombre_usuario)
	ON DELETE CASCADE,
	CONSTRAINT FK_CREACIONESCLUB_club FOREIGN KEY (club) REFERENCES CLUBES(nombre)
	ON DELETE CASCADE
);

INSERT INTO USUARIOS (nombre_usuario, password, email)
 SELECT nickname, passw, eMail
 FROM old_users
 WHERE (LENGTH(passw)>8); --Anotar en memoria que descartamos entradas que tienen pass menor de 8 letras

INSERT INTO PERFILES (dni, nombre_pila, apellido1, apellido2, f_nacimiento, telf, edad, usuario)
	SELECT citizenID, name, surname, sec_surname, TO_DATE(birthdate, 'YYYY-MM-DD') , phoneN, (SYSDATE-(TO_DATE(birthdate, 'YYYY-MM-DD')))/365.2422, nickname
	FROM old_users --Que hemos sacado edad de la fehca altual y la de nacimiento, no la hemos cogido
	WHERE (citizenID IS NOT NULL AND LENGTH(passw)>8);

INSERT INTO TIPOS_CONTRATOS (tipo)
	SELECT DISTINCT contract_type
	FROM old_users
	WHERE (contractId IS NOT NULL);

INSERT INTO CONTRATOS (id, tipo_contrato, perfil, cod_postal, ciudad, pais, f_inicio, f_fin)
	SELECT contractId, contract_type, citizenID, ZIPcode, town, country, TO_DATE(startdate, 'YYYY-MM-DD'), TO_DATE(enddate, 'YYYY-MM-DD')
	FROM old_users
	WHERE (contractId IS NOT NULL AND citizenID IS NOT NULL AND LENGTH(passw)>8);

INSERT INTO RATIOS (tipo)
	SELECT DISTINCT aspect_ratio
	FROM old_movies
	WHERE (aspect_ratio IS NOT NULL);

INSERT INTO IDIOMAS (nombre)
	SELECT DISTINCT language
	FROM old_movies
	WHERE (language IS NOT NULL);

INSERT INTO CALIFICACIONES (tipo)
	SELECT DISTINCT content_rating
	FROM old_movies
	WHERE (content_rating IS NOT NULL);

INSERT INTO GENEROS(tipo)
	SELECT DISTINCT genre1
	FROM old_movies
	WHERE (genre1 IS NOT NULL);

INSERT INTO GENEROS(tipo)
	SELECT DISTINCT genre2
	FROM old_movies
	WHERE (genre2 IS NOT NULL AND genre2 NOT IN (SELECT tipo FROM GENEROS)); --Para evitar que aparezcan valores repetidos y de error hacemos: atrib NOT IN (query)

INSERT INTO GENEROS(tipo)
	SELECT DISTINCT genre3
	FROM old_movies
	WHERE (genre3 IS NOT NULL AND genre3 NOT IN (SELECT tipo FROM GENEROS));

INSERT INTO GENEROS(tipo)
	SELECT DISTINCT genre4
	FROM old_movies
	WHERE (genre4 IS NOT NULL AND genre4 NOT IN (SELECT tipo FROM GENEROS));

INSERT INTO GENEROS(tipo)
	SELECT DISTINCT genre5
	FROM old_movies
	WHERE (genre5 IS NOT NULL AND genre5 NOT IN (SELECT tipo FROM GENEROS));

INSERT INTO IMDBS (link, puntuacion, cantidad_users, cantidad_criticos)
		SELECT DISTINCT movie_imdb_link, TO_NUMBER(imdb_score,'99.9'), TO_NUMBER(num_user_for_reviews, '99999'), TO_NUMBER(num_critic_for_reviews, '99999')
		FROM old_movies --Hemos cambiado los tipos de datos a enteros, documentar.
		WHERE (movie_imdb_link IS NOT NULL AND num_critic_for_reviews IS NOT NULL AND num_user_for_reviews IS NOT NULL);
